// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Gallery() GalleryResolver
	Image() ImageResolver
	Movie() MovieResolver
	Mutation() MutationResolver
	Performer() PerformerResolver
	Query() QueryResolver
	Scene() SceneResolver
	SceneMarker() SceneMarkerResolver
	Studio() StudioResolver
	Subscription() SubscriptionResolver
	Tag() TagResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	AutoTagMetadataOptions struct {
		Performers func(childComplexity int) int
		Studios    func(childComplexity int) int
		Tags       func(childComplexity int) int
	}

	ConfigDLNAResult struct {
		Enabled        func(childComplexity int) int
		Interfaces     func(childComplexity int) int
		ServerName     func(childComplexity int) int
		WhitelistedIPs func(childComplexity int) int
	}

	ConfigDefaultSettingsResult struct {
		AutoTag         func(childComplexity int) int
		DeleteFile      func(childComplexity int) int
		DeleteGenerated func(childComplexity int) int
		Generate        func(childComplexity int) int
		Identify        func(childComplexity int) int
		Scan            func(childComplexity int) int
	}

	ConfigDisableDropdownCreate struct {
		Performer func(childComplexity int) int
		Studio    func(childComplexity int) int
		Tag       func(childComplexity int) int
	}

	ConfigGeneralResult struct {
		APIKey                       func(childComplexity int) int
		CachePath                    func(childComplexity int) int
		CalculateMd5                 func(childComplexity int) int
		ConfigFilePath               func(childComplexity int) int
		CreateGalleriesFromFolders   func(childComplexity int) int
		CustomPerformerImageLocation func(childComplexity int) int
		DatabasePath                 func(childComplexity int) int
		Excludes                     func(childComplexity int) int
		GalleryExtensions            func(childComplexity int) int
		GeneratedPath                func(childComplexity int) int
		ImageExcludes                func(childComplexity int) int
		ImageExtensions              func(childComplexity int) int
		LogAccess                    func(childComplexity int) int
		LogFile                      func(childComplexity int) int
		LogLevel                     func(childComplexity int) int
		LogOut                       func(childComplexity int) int
		MaxSessionAge                func(childComplexity int) int
		MaxStreamingTranscodeSize    func(childComplexity int) int
		MaxTranscodeSize             func(childComplexity int) int
		MetadataPath                 func(childComplexity int) int
		ParallelTasks                func(childComplexity int) int
		Password                     func(childComplexity int) int
		PreviewAudio                 func(childComplexity int) int
		PreviewExcludeEnd            func(childComplexity int) int
		PreviewExcludeStart          func(childComplexity int) int
		PreviewPreset                func(childComplexity int) int
		PreviewSegmentDuration       func(childComplexity int) int
		PreviewSegments              func(childComplexity int) int
		PythonPath                   func(childComplexity int) int
		ScraperCDPPath               func(childComplexity int) int
		ScraperCertCheck             func(childComplexity int) int
		ScraperUserAgent             func(childComplexity int) int
		ScrapersPath                 func(childComplexity int) int
		StashBoxes                   func(childComplexity int) int
		Stashes                      func(childComplexity int) int
		TrustedProxies               func(childComplexity int) int
		Username                     func(childComplexity int) int
		VideoExtensions              func(childComplexity int) int
		VideoFileNamingAlgorithm     func(childComplexity int) int
		WriteImageThumbnails         func(childComplexity int) int
	}

	ConfigImageLightboxResult struct {
		DisplayMode                func(childComplexity int) int
		ResetZoomOnNav             func(childComplexity int) int
		ScaleUp                    func(childComplexity int) int
		ScrollAttemptsBeforeChange func(childComplexity int) int
		ScrollMode                 func(childComplexity int) int
		SlideshowDelay             func(childComplexity int) int
	}

	ConfigInterfaceResult struct {
		AutostartVideo               func(childComplexity int) int
		AutostartVideoOnPlaySelected func(childComplexity int) int
		CSS                          func(childComplexity int) int
		CSSEnabled                   func(childComplexity int) int
		ContinuePlaylistDefault      func(childComplexity int) int
		DisableDropdownCreate        func(childComplexity int) int
		DisabledDropdownCreate       func(childComplexity int) int
		FunscriptOffset              func(childComplexity int) int
		HandyKey                     func(childComplexity int) int
		ImageLightbox                func(childComplexity int) int
		Language                     func(childComplexity int) int
		MaximumLoopDuration          func(childComplexity int) int
		MenuItems                    func(childComplexity int) int
		NoBrowser                    func(childComplexity int) int
		NotificationsEnabled         func(childComplexity int) int
		ShowScrubber                 func(childComplexity int) int
		ShowStudioAsText             func(childComplexity int) int
		SlideshowDelay               func(childComplexity int) int
		SoundOnPreview               func(childComplexity int) int
		WallPlayback                 func(childComplexity int) int
		WallShowTitle                func(childComplexity int) int
	}

	ConfigResult struct {
		Defaults  func(childComplexity int) int
		Dlna      func(childComplexity int) int
		General   func(childComplexity int) int
		Interface func(childComplexity int) int
		Scraping  func(childComplexity int) int
		UI        func(childComplexity int) int
	}

	ConfigScrapingResult struct {
		ExcludeTagPatterns func(childComplexity int) int
		ScraperCDPPath     func(childComplexity int) int
		ScraperCertCheck   func(childComplexity int) int
		ScraperUserAgent   func(childComplexity int) int
	}

	DLNAIP struct {
		IPAddress func(childComplexity int) int
		Until     func(childComplexity int) int
	}

	DLNAStatus struct {
		AllowedIPAddresses func(childComplexity int) int
		RecentIPAddresses  func(childComplexity int) int
		Running            func(childComplexity int) int
		Until              func(childComplexity int) int
	}

	Directory struct {
		Directories func(childComplexity int) int
		Parent      func(childComplexity int) int
		Path        func(childComplexity int) int
	}

	FindGalleriesResultType struct {
		Count     func(childComplexity int) int
		Galleries func(childComplexity int) int
	}

	FindImagesResultType struct {
		Count      func(childComplexity int) int
		Filesize   func(childComplexity int) int
		Images     func(childComplexity int) int
		Megapixels func(childComplexity int) int
	}

	FindMoviesResultType struct {
		Count  func(childComplexity int) int
		Movies func(childComplexity int) int
	}

	FindPerformersResultType struct {
		Count      func(childComplexity int) int
		Performers func(childComplexity int) int
	}

	FindSceneMarkersResultType struct {
		Count        func(childComplexity int) int
		SceneMarkers func(childComplexity int) int
	}

	FindScenesResultType struct {
		Count    func(childComplexity int) int
		Duration func(childComplexity int) int
		Filesize func(childComplexity int) int
		Scenes   func(childComplexity int) int
	}

	FindStudiosResultType struct {
		Count   func(childComplexity int) int
		Studios func(childComplexity int) int
	}

	FindTagsResultType struct {
		Count func(childComplexity int) int
		Tags  func(childComplexity int) int
	}

	Gallery struct {
		Checksum    func(childComplexity int) int
		Cover       func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Date        func(childComplexity int) int
		Details     func(childComplexity int) int
		FileModTime func(childComplexity int) int
		ID          func(childComplexity int) int
		ImageCount  func(childComplexity int) int
		Images      func(childComplexity int) int
		Organized   func(childComplexity int) int
		Path        func(childComplexity int) int
		Performers  func(childComplexity int) int
		Rating      func(childComplexity int) int
		Scenes      func(childComplexity int) int
		Studio      func(childComplexity int) int
		Tags        func(childComplexity int) int
		Title       func(childComplexity int) int
		URL         func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	GalleryFilesType struct {
		Index func(childComplexity int) int
		Name  func(childComplexity int) int
		Path  func(childComplexity int) int
	}

	GenerateMetadataOptions struct {
		ImagePreviews             func(childComplexity int) int
		InteractiveHeatmapsSpeeds func(childComplexity int) int
		MarkerImagePreviews       func(childComplexity int) int
		MarkerScreenshots         func(childComplexity int) int
		Markers                   func(childComplexity int) int
		Phashes                   func(childComplexity int) int
		PreviewOptions            func(childComplexity int) int
		Previews                  func(childComplexity int) int
		Sprites                   func(childComplexity int) int
		Transcodes                func(childComplexity int) int
	}

	GeneratePreviewOptions struct {
		PreviewExcludeEnd      func(childComplexity int) int
		PreviewExcludeStart    func(childComplexity int) int
		PreviewPreset          func(childComplexity int) int
		PreviewSegmentDuration func(childComplexity int) int
		PreviewSegments        func(childComplexity int) int
	}

	IdentifyFieldOptions struct {
		CreateMissing func(childComplexity int) int
		Field         func(childComplexity int) int
		Strategy      func(childComplexity int) int
	}

	IdentifyMetadataOptions struct {
		FieldOptions          func(childComplexity int) int
		IncludeMalePerformers func(childComplexity int) int
		SetCoverImage         func(childComplexity int) int
		SetOrganized          func(childComplexity int) int
	}

	IdentifyMetadataTaskOptions struct {
		Options func(childComplexity int) int
		Sources func(childComplexity int) int
	}

	IdentifySource struct {
		Options func(childComplexity int) int
		Source  func(childComplexity int) int
	}

	Image struct {
		Checksum    func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		File        func(childComplexity int) int
		FileModTime func(childComplexity int) int
		Galleries   func(childComplexity int) int
		ID          func(childComplexity int) int
		OCounter    func(childComplexity int) int
		Organized   func(childComplexity int) int
		Path        func(childComplexity int) int
		Paths       func(childComplexity int) int
		Performers  func(childComplexity int) int
		Rating      func(childComplexity int) int
		Studio      func(childComplexity int) int
		Tags        func(childComplexity int) int
		Title       func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	ImageFileType struct {
		Height func(childComplexity int) int
		Size   func(childComplexity int) int
		Width  func(childComplexity int) int
	}

	ImagePathsType struct {
		Image     func(childComplexity int) int
		Thumbnail func(childComplexity int) int
	}

	Job struct {
		AddTime     func(childComplexity int) int
		Description func(childComplexity int) int
		EndTime     func(childComplexity int) int
		ID          func(childComplexity int) int
		Progress    func(childComplexity int) int
		StartTime   func(childComplexity int) int
		Status      func(childComplexity int) int
		SubTasks    func(childComplexity int) int
	}

	JobStatusUpdate struct {
		Job  func(childComplexity int) int
		Type func(childComplexity int) int
	}

	LogEntry struct {
		Level   func(childComplexity int) int
		Message func(childComplexity int) int
		Time    func(childComplexity int) int
	}

	MarkerStringsResultType struct {
		Count func(childComplexity int) int
		ID    func(childComplexity int) int
		Title func(childComplexity int) int
	}

	Movie struct {
		Aliases        func(childComplexity int) int
		BackImagePath  func(childComplexity int) int
		Checksum       func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		Date           func(childComplexity int) int
		Director       func(childComplexity int) int
		Duration       func(childComplexity int) int
		FrontImagePath func(childComplexity int) int
		ID             func(childComplexity int) int
		Name           func(childComplexity int) int
		Rating         func(childComplexity int) int
		SceneCount     func(childComplexity int) int
		Scenes         func(childComplexity int) int
		Studio         func(childComplexity int) int
		Synopsis       func(childComplexity int) int
		URL            func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
	}

	Mutation struct {
		AddGalleryImages             func(childComplexity int, input GalleryAddInput) int
		AddTempDlnaip                func(childComplexity int, input AddTempDLNAIPInput) int
		BackupDatabase               func(childComplexity int, input BackupDatabaseInput) int
		BulkGalleryUpdate            func(childComplexity int, input BulkGalleryUpdateInput) int
		BulkImageUpdate              func(childComplexity int, input BulkImageUpdateInput) int
		BulkMovieUpdate              func(childComplexity int, input BulkMovieUpdateInput) int
		BulkPerformerUpdate          func(childComplexity int, input BulkPerformerUpdateInput) int
		BulkSceneUpdate              func(childComplexity int, input BulkSceneUpdateInput) int
		ConfigureDefaults            func(childComplexity int, input ConfigDefaultSettingsInput) int
		ConfigureDlna                func(childComplexity int, input ConfigDLNAInput) int
		ConfigureGeneral             func(childComplexity int, input ConfigGeneralInput) int
		ConfigureInterface           func(childComplexity int, input ConfigInterfaceInput) int
		ConfigureScraping            func(childComplexity int, input ConfigScrapingInput) int
		ConfigureUI                  func(childComplexity int, input map[string]interface{}) int
		ConfigureUISetting           func(childComplexity int, key string, value interface{}) int
		DestroySavedFilter           func(childComplexity int, input DestroyFilterInput) int
		DisableDlna                  func(childComplexity int, input DisableDLNAInput) int
		EnableDlna                   func(childComplexity int, input EnableDLNAInput) int
		ExportObjects                func(childComplexity int, input ExportObjectsInput) int
		GalleriesUpdate              func(childComplexity int, input []*GalleryUpdateInput) int
		GalleryCreate                func(childComplexity int, input GalleryCreateInput) int
		GalleryDestroy               func(childComplexity int, input GalleryDestroyInput) int
		GalleryUpdate                func(childComplexity int, input GalleryUpdateInput) int
		GenerateAPIKey               func(childComplexity int, input GenerateAPIKeyInput) int
		ImageDecrementO              func(childComplexity int, id string) int
		ImageDestroy                 func(childComplexity int, input ImageDestroyInput) int
		ImageIncrementO              func(childComplexity int, id string) int
		ImageResetO                  func(childComplexity int, id string) int
		ImageUpdate                  func(childComplexity int, input ImageUpdateInput) int
		ImagesDestroy                func(childComplexity int, input ImagesDestroyInput) int
		ImagesUpdate                 func(childComplexity int, input []*ImageUpdateInput) int
		ImportObjects                func(childComplexity int, input ImportObjectsInput) int
		MetadataAutoTag              func(childComplexity int, input AutoTagMetadataInput) int
		MetadataClean                func(childComplexity int, input CleanMetadataInput) int
		MetadataExport               func(childComplexity int) int
		MetadataGenerate             func(childComplexity int, input GenerateMetadataInput) int
		MetadataIdentify             func(childComplexity int, input IdentifyMetadataInput) int
		MetadataImport               func(childComplexity int) int
		MetadataScan                 func(childComplexity int, input ScanMetadataInput) int
		Migrate                      func(childComplexity int, input MigrateInput) int
		MigrateHashNaming            func(childComplexity int) int
		MovieCreate                  func(childComplexity int, input MovieCreateInput) int
		MovieDestroy                 func(childComplexity int, input MovieDestroyInput) int
		MovieUpdate                  func(childComplexity int, input MovieUpdateInput) int
		MoviesDestroy                func(childComplexity int, ids []string) int
		PerformerCreate              func(childComplexity int, input PerformerCreateInput) int
		PerformerDestroy             func(childComplexity int, input PerformerDestroyInput) int
		PerformerUpdate              func(childComplexity int, input PerformerUpdateInput) int
		PerformersDestroy            func(childComplexity int, ids []string) int
		ReloadPlugins                func(childComplexity int) int
		ReloadScrapers               func(childComplexity int) int
		RemoveGalleryImages          func(childComplexity int, input GalleryRemoveInput) int
		RemoveTempDlnaip             func(childComplexity int, input RemoveTempDLNAIPInput) int
		RunPluginTask                func(childComplexity int, pluginID string, taskName string, args []*PluginArgInput) int
		SaveFilter                   func(childComplexity int, input SaveFilterInput) int
		SceneDecrementO              func(childComplexity int, id string) int
		SceneDestroy                 func(childComplexity int, input SceneDestroyInput) int
		SceneGenerateScreenshot      func(childComplexity int, id string, at *float64) int
		SceneIncrementO              func(childComplexity int, id string) int
		SceneMarkerCreate            func(childComplexity int, input SceneMarkerCreateInput) int
		SceneMarkerDestroy           func(childComplexity int, id string) int
		SceneMarkerUpdate            func(childComplexity int, input SceneMarkerUpdateInput) int
		SceneResetO                  func(childComplexity int, id string) int
		SceneUpdate                  func(childComplexity int, input SceneUpdateInput) int
		ScenesDestroy                func(childComplexity int, input ScenesDestroyInput) int
		ScenesUpdate                 func(childComplexity int, input []*SceneUpdateInput) int
		SetDefaultFilter             func(childComplexity int, input SetDefaultFilterInput) int
		Setup                        func(childComplexity int, input SetupInput) int
		StashBoxBatchPerformerTag    func(childComplexity int, input StashBoxBatchPerformerTagInput) int
		StopAllJobs                  func(childComplexity int) int
		StopJob                      func(childComplexity int, jobID string) int
		StudioCreate                 func(childComplexity int, input StudioCreateInput) int
		StudioDestroy                func(childComplexity int, input StudioDestroyInput) int
		StudioUpdate                 func(childComplexity int, input StudioUpdateInput) int
		StudiosDestroy               func(childComplexity int, ids []string) int
		SubmitStashBoxFingerprints   func(childComplexity int, input StashBoxFingerprintSubmissionInput) int
		SubmitStashBoxPerformerDraft func(childComplexity int, input StashBoxDraftSubmissionInput) int
		SubmitStashBoxSceneDraft     func(childComplexity int, input StashBoxDraftSubmissionInput) int
		TagCreate                    func(childComplexity int, input TagCreateInput) int
		TagDestroy                   func(childComplexity int, input TagDestroyInput) int
		TagUpdate                    func(childComplexity int, input TagUpdateInput) int
		TagsDestroy                  func(childComplexity int, ids []string) int
		TagsMerge                    func(childComplexity int, input TagsMergeInput) int
	}

	Performer struct {
		Aliases       func(childComplexity int) int
		Birthdate     func(childComplexity int) int
		CareerLength  func(childComplexity int) int
		Checksum      func(childComplexity int) int
		Country       func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		DeathDate     func(childComplexity int) int
		Details       func(childComplexity int) int
		Ethnicity     func(childComplexity int) int
		EyeColor      func(childComplexity int) int
		FakeTits      func(childComplexity int) int
		Favorite      func(childComplexity int) int
		GalleryCount  func(childComplexity int) int
		Gender        func(childComplexity int) int
		HairColor     func(childComplexity int) int
		Height        func(childComplexity int) int
		ID            func(childComplexity int) int
		IgnoreAutoTag func(childComplexity int) int
		ImageCount    func(childComplexity int) int
		ImagePath     func(childComplexity int) int
		Instagram     func(childComplexity int) int
		Measurements  func(childComplexity int) int
		MovieCount    func(childComplexity int) int
		Movies        func(childComplexity int) int
		Name          func(childComplexity int) int
		Piercings     func(childComplexity int) int
		Rating        func(childComplexity int) int
		SceneCount    func(childComplexity int) int
		Scenes        func(childComplexity int) int
		StashIds      func(childComplexity int) int
		Tags          func(childComplexity int) int
		Tattoos       func(childComplexity int) int
		Twitter       func(childComplexity int) int
		URL           func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		Weight        func(childComplexity int) int
	}

	Plugin struct {
		Description func(childComplexity int) int
		Hooks       func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Tasks       func(childComplexity int) int
		URL         func(childComplexity int) int
		Version     func(childComplexity int) int
	}

	PluginHook struct {
		Description func(childComplexity int) int
		Hooks       func(childComplexity int) int
		Name        func(childComplexity int) int
		Plugin      func(childComplexity int) int
	}

	PluginResult struct {
		Error  func(childComplexity int) int
		Result func(childComplexity int) int
	}

	PluginTask struct {
		Description func(childComplexity int) int
		Name        func(childComplexity int) int
		Plugin      func(childComplexity int) int
	}

	Query struct {
		AllMovies                   func(childComplexity int) int
		AllPerformers               func(childComplexity int) int
		AllStudios                  func(childComplexity int) int
		AllTags                     func(childComplexity int) int
		Configuration               func(childComplexity int) int
		Directory                   func(childComplexity int, path *string, locale *string) int
		DlnaStatus                  func(childComplexity int) int
		FindDefaultFilter           func(childComplexity int, mode FilterMode) int
		FindDuplicateScenes         func(childComplexity int, distance *int) int
		FindGalleries               func(childComplexity int, galleryFilter *GalleryFilterType, filter *FindFilterType) int
		FindGallery                 func(childComplexity int, id string) int
		FindImage                   func(childComplexity int, id *string, checksum *string) int
		FindImages                  func(childComplexity int, imageFilter *ImageFilterType, imageIds []int, filter *FindFilterType) int
		FindJob                     func(childComplexity int, input FindJobInput) int
		FindMovie                   func(childComplexity int, id string) int
		FindMovies                  func(childComplexity int, movieFilter *MovieFilterType, filter *FindFilterType) int
		FindPerformer               func(childComplexity int, id string) int
		FindPerformers              func(childComplexity int, performerFilter *PerformerFilterType, filter *FindFilterType) int
		FindSavedFilter             func(childComplexity int, id string) int
		FindSavedFilters            func(childComplexity int, mode *FilterMode) int
		FindScene                   func(childComplexity int, id *string, checksum *string) int
		FindSceneByHash             func(childComplexity int, input SceneHashInput) int
		FindSceneMarkers            func(childComplexity int, sceneMarkerFilter *SceneMarkerFilterType, filter *FindFilterType) int
		FindScenes                  func(childComplexity int, sceneFilter *SceneFilterType, sceneIds []int, filter *FindFilterType) int
		FindScenesByPathRegex       func(childComplexity int, filter *FindFilterType) int
		FindStudio                  func(childComplexity int, id string) int
		FindStudios                 func(childComplexity int, studioFilter *StudioFilterType, filter *FindFilterType) int
		FindTag                     func(childComplexity int, id string) int
		FindTags                    func(childComplexity int, tagFilter *TagFilterType, filter *FindFilterType) int
		JobQueue                    func(childComplexity int) int
		Latestversion               func(childComplexity int) int
		ListGalleryScrapers         func(childComplexity int) int
		ListMovieScrapers           func(childComplexity int) int
		ListPerformerScrapers       func(childComplexity int) int
		ListSceneScrapers           func(childComplexity int) int
		ListScrapers                func(childComplexity int, types []ScrapeContentType) int
		Logs                        func(childComplexity int) int
		MarkerStrings               func(childComplexity int, q *string, sort *string) int
		MarkerWall                  func(childComplexity int, q *string) int
		ParseSceneFilenames         func(childComplexity int, filter *FindFilterType, config SceneParserInput) int
		PluginTasks                 func(childComplexity int) int
		Plugins                     func(childComplexity int) int
		SceneMarkerTags             func(childComplexity int, sceneID string) int
		SceneStreams                func(childComplexity int, id *string) int
		SceneWall                   func(childComplexity int, q *string) int
		ScrapeFreeonesPerformerList func(childComplexity int, query string) int
		ScrapeGallery               func(childComplexity int, scraperID string, gallery GalleryUpdateInput) int
		ScrapeGalleryURL            func(childComplexity int, url string) int
		ScrapeMovieURL              func(childComplexity int, url string) int
		ScrapeMultiPerformers       func(childComplexity int, source ScraperSourceInput, input ScrapeMultiPerformersInput) int
		ScrapeMultiScenes           func(childComplexity int, source ScraperSourceInput, input ScrapeMultiScenesInput) int
		ScrapePerformer             func(childComplexity int, scraperID string, scrapedPerformer ScrapedPerformerInput) int
		ScrapePerformerList         func(childComplexity int, scraperID string, query string) int
		ScrapePerformerURL          func(childComplexity int, url string) int
		ScrapeScene                 func(childComplexity int, scraperID string, scene SceneUpdateInput) int
		ScrapeSceneURL              func(childComplexity int, url string) int
		ScrapeSingleGallery         func(childComplexity int, source ScraperSourceInput, input ScrapeSingleGalleryInput) int
		ScrapeSingleMovie           func(childComplexity int, source ScraperSourceInput, input ScrapeSingleMovieInput) int
		ScrapeSinglePerformer       func(childComplexity int, source ScraperSourceInput, input ScrapeSinglePerformerInput) int
		ScrapeSingleScene           func(childComplexity int, source ScraperSourceInput, input ScrapeSingleSceneInput) int
		ScrapeURL                   func(childComplexity int, url string, ty ScrapeContentType) int
		Stats                       func(childComplexity int) int
		SystemStatus                func(childComplexity int) int
		ValidateStashBoxCredentials func(childComplexity int, input StashBoxInput) int
		Version                     func(childComplexity int) int
	}

	SavedFilter struct {
		Filter func(childComplexity int) int
		ID     func(childComplexity int) int
		Mode   func(childComplexity int) int
		Name   func(childComplexity int) int
	}

	ScanMetadataOptions struct {
		ScanGenerateImagePreviews func(childComplexity int) int
		ScanGeneratePhashes       func(childComplexity int) int
		ScanGeneratePreviews      func(childComplexity int) int
		ScanGenerateSprites       func(childComplexity int) int
		ScanGenerateThumbnails    func(childComplexity int) int
		StripFileExtension        func(childComplexity int) int
		UseFileMetadata           func(childComplexity int) int
	}

	Scene struct {
		Captions         func(childComplexity int) int
		Checksum         func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		Date             func(childComplexity int) int
		Details          func(childComplexity int) int
		File             func(childComplexity int) int
		FileModTime      func(childComplexity int) int
		Galleries        func(childComplexity int) int
		ID               func(childComplexity int) int
		Interactive      func(childComplexity int) int
		InteractiveSpeed func(childComplexity int) int
		Movies           func(childComplexity int) int
		OCounter         func(childComplexity int) int
		Organized        func(childComplexity int) int
		Oshash           func(childComplexity int) int
		Path             func(childComplexity int) int
		Paths            func(childComplexity int) int
		Performers       func(childComplexity int) int
		Phash            func(childComplexity int) int
		Rating           func(childComplexity int) int
		SceneMarkers     func(childComplexity int) int
		SceneStreams     func(childComplexity int) int
		StashIds         func(childComplexity int) int
		Studio           func(childComplexity int) int
		Tags             func(childComplexity int) int
		Title            func(childComplexity int) int
		URL              func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
	}

	SceneCaption struct {
		CaptionType  func(childComplexity int) int
		LanguageCode func(childComplexity int) int
	}

	SceneFileType struct {
		AudioCodec func(childComplexity int) int
		Bitrate    func(childComplexity int) int
		Duration   func(childComplexity int) int
		Framerate  func(childComplexity int) int
		Height     func(childComplexity int) int
		Size       func(childComplexity int) int
		VideoCodec func(childComplexity int) int
		Width      func(childComplexity int) int
	}

	SceneMarker struct {
		CreatedAt  func(childComplexity int) int
		ID         func(childComplexity int) int
		Preview    func(childComplexity int) int
		PrimaryTag func(childComplexity int) int
		Scene      func(childComplexity int) int
		Screenshot func(childComplexity int) int
		Seconds    func(childComplexity int) int
		Stream     func(childComplexity int) int
		Tags       func(childComplexity int) int
		Title      func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
	}

	SceneMarkerTag struct {
		SceneMarkers func(childComplexity int) int
		Tag          func(childComplexity int) int
	}

	SceneMovie struct {
		Movie      func(childComplexity int) int
		SceneIndex func(childComplexity int) int
	}

	SceneMovieID struct {
		MovieID    func(childComplexity int) int
		SceneIndex func(childComplexity int) int
	}

	SceneParserResult struct {
		Date         func(childComplexity int) int
		Details      func(childComplexity int) int
		GalleryIds   func(childComplexity int) int
		Movies       func(childComplexity int) int
		PerformerIds func(childComplexity int) int
		Rating       func(childComplexity int) int
		Scene        func(childComplexity int) int
		StudioID     func(childComplexity int) int
		TagIds       func(childComplexity int) int
		Title        func(childComplexity int) int
		URL          func(childComplexity int) int
	}

	SceneParserResultType struct {
		Count   func(childComplexity int) int
		Results func(childComplexity int) int
	}

	ScenePathsType struct {
		Caption            func(childComplexity int) int
		ChaptersVtt        func(childComplexity int) int
		Funscript          func(childComplexity int) int
		InteractiveHeatmap func(childComplexity int) int
		Preview            func(childComplexity int) int
		Screenshot         func(childComplexity int) int
		Sprite             func(childComplexity int) int
		Stream             func(childComplexity int) int
		Vtt                func(childComplexity int) int
		Webp               func(childComplexity int) int
	}

	SceneStreamEndpoint struct {
		Label    func(childComplexity int) int
		MimeType func(childComplexity int) int
		URL      func(childComplexity int) int
	}

	ScrapedGallery struct {
		Date       func(childComplexity int) int
		Details    func(childComplexity int) int
		Performers func(childComplexity int) int
		Studio     func(childComplexity int) int
		Tags       func(childComplexity int) int
		Title      func(childComplexity int) int
		URL        func(childComplexity int) int
	}

	ScrapedMovie struct {
		Aliases    func(childComplexity int) int
		BackImage  func(childComplexity int) int
		Date       func(childComplexity int) int
		Director   func(childComplexity int) int
		Duration   func(childComplexity int) int
		FrontImage func(childComplexity int) int
		Name       func(childComplexity int) int
		Rating     func(childComplexity int) int
		StoredID   func(childComplexity int) int
		Studio     func(childComplexity int) int
		Synopsis   func(childComplexity int) int
		URL        func(childComplexity int) int
	}

	ScrapedPerformer struct {
		Aliases      func(childComplexity int) int
		Birthdate    func(childComplexity int) int
		CareerLength func(childComplexity int) int
		Country      func(childComplexity int) int
		DeathDate    func(childComplexity int) int
		Details      func(childComplexity int) int
		Ethnicity    func(childComplexity int) int
		EyeColor     func(childComplexity int) int
		FakeTits     func(childComplexity int) int
		Gender       func(childComplexity int) int
		HairColor    func(childComplexity int) int
		Height       func(childComplexity int) int
		Image        func(childComplexity int) int
		Images       func(childComplexity int) int
		Instagram    func(childComplexity int) int
		Measurements func(childComplexity int) int
		Name         func(childComplexity int) int
		Piercings    func(childComplexity int) int
		RemoteSiteID func(childComplexity int) int
		StoredID     func(childComplexity int) int
		Tags         func(childComplexity int) int
		Tattoos      func(childComplexity int) int
		Twitter      func(childComplexity int) int
		URL          func(childComplexity int) int
		Weight       func(childComplexity int) int
	}

	ScrapedScene struct {
		Date         func(childComplexity int) int
		Details      func(childComplexity int) int
		Duration     func(childComplexity int) int
		File         func(childComplexity int) int
		Fingerprints func(childComplexity int) int
		Image        func(childComplexity int) int
		Movies       func(childComplexity int) int
		Performers   func(childComplexity int) int
		RemoteSiteID func(childComplexity int) int
		Studio       func(childComplexity int) int
		Tags         func(childComplexity int) int
		Title        func(childComplexity int) int
		URL          func(childComplexity int) int
	}

	ScrapedStudio struct {
		Image        func(childComplexity int) int
		Name         func(childComplexity int) int
		RemoteSiteID func(childComplexity int) int
		StoredID     func(childComplexity int) int
		URL          func(childComplexity int) int
	}

	ScrapedTag struct {
		Name     func(childComplexity int) int
		StoredID func(childComplexity int) int
	}

	Scraper struct {
		Gallery   func(childComplexity int) int
		ID        func(childComplexity int) int
		Movie     func(childComplexity int) int
		Name      func(childComplexity int) int
		Performer func(childComplexity int) int
		Scene     func(childComplexity int) int
	}

	ScraperSource struct {
		ScraperID        func(childComplexity int) int
		StashBoxEndpoint func(childComplexity int) int
		StashBoxIndex    func(childComplexity int) int
	}

	ScraperSpec struct {
		SupportedScrapes func(childComplexity int) int
		Urls             func(childComplexity int) int
	}

	ShortVersion struct {
		Shorthash func(childComplexity int) int
		URL       func(childComplexity int) int
	}

	StashBox struct {
		APIKey   func(childComplexity int) int
		Endpoint func(childComplexity int) int
		Name     func(childComplexity int) int
	}

	StashBoxFingerprint struct {
		Algorithm func(childComplexity int) int
		Duration  func(childComplexity int) int
		Hash      func(childComplexity int) int
	}

	StashBoxPerformerQueryResult struct {
		Query   func(childComplexity int) int
		Results func(childComplexity int) int
	}

	StashBoxValidationResult struct {
		Status func(childComplexity int) int
		Valid  func(childComplexity int) int
	}

	StashConfig struct {
		ExcludeImage func(childComplexity int) int
		ExcludeVideo func(childComplexity int) int
		Path         func(childComplexity int) int
	}

	StashID struct {
		Endpoint func(childComplexity int) int
		StashID  func(childComplexity int) int
	}

	StatsResultType struct {
		GalleryCount   func(childComplexity int) int
		ImageCount     func(childComplexity int) int
		ImagesSize     func(childComplexity int) int
		MovieCount     func(childComplexity int) int
		PerformerCount func(childComplexity int) int
		SceneCount     func(childComplexity int) int
		ScenesDuration func(childComplexity int) int
		ScenesSize     func(childComplexity int) int
		StudioCount    func(childComplexity int) int
		TagCount       func(childComplexity int) int
	}

	Studio struct {
		Aliases       func(childComplexity int) int
		Checksum      func(childComplexity int) int
		ChildStudios  func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		Details       func(childComplexity int) int
		GalleryCount  func(childComplexity int) int
		ID            func(childComplexity int) int
		IgnoreAutoTag func(childComplexity int) int
		ImageCount    func(childComplexity int) int
		ImagePath     func(childComplexity int) int
		MovieCount    func(childComplexity int) int
		Movies        func(childComplexity int) int
		Name          func(childComplexity int) int
		ParentStudio  func(childComplexity int) int
		Rating        func(childComplexity int) int
		SceneCount    func(childComplexity int) int
		StashIds      func(childComplexity int) int
		URL           func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	Subscription struct {
		JobsSubscribe         func(childComplexity int) int
		LoggingSubscribe      func(childComplexity int) int
		ScanCompleteSubscribe func(childComplexity int) int
	}

	SystemStatus struct {
		AppSchema      func(childComplexity int) int
		ConfigPath     func(childComplexity int) int
		DatabasePath   func(childComplexity int) int
		DatabaseSchema func(childComplexity int) int
		Status         func(childComplexity int) int
	}

	Tag struct {
		Aliases          func(childComplexity int) int
		Children         func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		GalleryCount     func(childComplexity int) int
		ID               func(childComplexity int) int
		IgnoreAutoTag    func(childComplexity int) int
		ImageCount       func(childComplexity int) int
		ImagePath        func(childComplexity int) int
		Name             func(childComplexity int) int
		Parents          func(childComplexity int) int
		PerformerCount   func(childComplexity int) int
		SceneCount       func(childComplexity int) int
		SceneMarkerCount func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
	}

	Version struct {
		BuildTime func(childComplexity int) int
		Hash      func(childComplexity int) int
		Version   func(childComplexity int) int
	}
}

type GalleryResolver interface {
	Path(ctx context.Context, obj *Gallery) (*string, error)
	Title(ctx context.Context, obj *Gallery) (*string, error)
	URL(ctx context.Context, obj *Gallery) (*string, error)
	Date(ctx context.Context, obj *Gallery) (*string, error)
	Details(ctx context.Context, obj *Gallery) (*string, error)
	Rating(ctx context.Context, obj *Gallery) (*int, error)

	CreatedAt(ctx context.Context, obj *Gallery) (*time.Time, error)
	UpdatedAt(ctx context.Context, obj *Gallery) (*time.Time, error)
	FileModTime(ctx context.Context, obj *Gallery) (*time.Time, error)
	Scenes(ctx context.Context, obj *Gallery) ([]*Scene, error)
	Studio(ctx context.Context, obj *Gallery) (*Studio, error)
	ImageCount(ctx context.Context, obj *Gallery) (int, error)
	Tags(ctx context.Context, obj *Gallery) ([]*Tag, error)
	Performers(ctx context.Context, obj *Gallery) ([]*Performer, error)
	Images(ctx context.Context, obj *Gallery) ([]*Image, error)
	Cover(ctx context.Context, obj *Gallery) (*Image, error)
}
type ImageResolver interface {
	Title(ctx context.Context, obj *Image) (*string, error)
	Rating(ctx context.Context, obj *Image) (*int, error)

	CreatedAt(ctx context.Context, obj *Image) (*time.Time, error)
	UpdatedAt(ctx context.Context, obj *Image) (*time.Time, error)
	FileModTime(ctx context.Context, obj *Image) (*time.Time, error)
	File(ctx context.Context, obj *Image) (*ImageFileType, error)
	Paths(ctx context.Context, obj *Image) (*ImagePathsType, error)
	Galleries(ctx context.Context, obj *Image) ([]*Gallery, error)
	Studio(ctx context.Context, obj *Image) (*Studio, error)
	Tags(ctx context.Context, obj *Image) ([]*Tag, error)
	Performers(ctx context.Context, obj *Image) ([]*Performer, error)
}
type MovieResolver interface {
	Name(ctx context.Context, obj *Movie) (string, error)
	Aliases(ctx context.Context, obj *Movie) (*string, error)
	Duration(ctx context.Context, obj *Movie) (*int, error)
	Date(ctx context.Context, obj *Movie) (*string, error)
	Rating(ctx context.Context, obj *Movie) (*int, error)
	Studio(ctx context.Context, obj *Movie) (*Studio, error)
	Director(ctx context.Context, obj *Movie) (*string, error)
	Synopsis(ctx context.Context, obj *Movie) (*string, error)
	URL(ctx context.Context, obj *Movie) (*string, error)
	CreatedAt(ctx context.Context, obj *Movie) (*time.Time, error)
	UpdatedAt(ctx context.Context, obj *Movie) (*time.Time, error)
	FrontImagePath(ctx context.Context, obj *Movie) (*string, error)
	BackImagePath(ctx context.Context, obj *Movie) (*string, error)
	SceneCount(ctx context.Context, obj *Movie) (*int, error)
	Scenes(ctx context.Context, obj *Movie) ([]*Scene, error)
}
type MutationResolver interface {
	Setup(ctx context.Context, input SetupInput) (bool, error)
	Migrate(ctx context.Context, input MigrateInput) (bool, error)
	SceneUpdate(ctx context.Context, input SceneUpdateInput) (*Scene, error)
	BulkSceneUpdate(ctx context.Context, input BulkSceneUpdateInput) ([]*Scene, error)
	SceneDestroy(ctx context.Context, input SceneDestroyInput) (bool, error)
	ScenesDestroy(ctx context.Context, input ScenesDestroyInput) (bool, error)
	ScenesUpdate(ctx context.Context, input []*SceneUpdateInput) ([]*Scene, error)
	SceneIncrementO(ctx context.Context, id string) (int, error)
	SceneDecrementO(ctx context.Context, id string) (int, error)
	SceneResetO(ctx context.Context, id string) (int, error)
	SceneGenerateScreenshot(ctx context.Context, id string, at *float64) (string, error)
	SceneMarkerCreate(ctx context.Context, input SceneMarkerCreateInput) (*SceneMarker, error)
	SceneMarkerUpdate(ctx context.Context, input SceneMarkerUpdateInput) (*SceneMarker, error)
	SceneMarkerDestroy(ctx context.Context, id string) (bool, error)
	ImageUpdate(ctx context.Context, input ImageUpdateInput) (*Image, error)
	BulkImageUpdate(ctx context.Context, input BulkImageUpdateInput) ([]*Image, error)
	ImageDestroy(ctx context.Context, input ImageDestroyInput) (bool, error)
	ImagesDestroy(ctx context.Context, input ImagesDestroyInput) (bool, error)
	ImagesUpdate(ctx context.Context, input []*ImageUpdateInput) ([]*Image, error)
	ImageIncrementO(ctx context.Context, id string) (int, error)
	ImageDecrementO(ctx context.Context, id string) (int, error)
	ImageResetO(ctx context.Context, id string) (int, error)
	GalleryCreate(ctx context.Context, input GalleryCreateInput) (*Gallery, error)
	GalleryUpdate(ctx context.Context, input GalleryUpdateInput) (*Gallery, error)
	BulkGalleryUpdate(ctx context.Context, input BulkGalleryUpdateInput) ([]*Gallery, error)
	GalleryDestroy(ctx context.Context, input GalleryDestroyInput) (bool, error)
	GalleriesUpdate(ctx context.Context, input []*GalleryUpdateInput) ([]*Gallery, error)
	AddGalleryImages(ctx context.Context, input GalleryAddInput) (bool, error)
	RemoveGalleryImages(ctx context.Context, input GalleryRemoveInput) (bool, error)
	PerformerCreate(ctx context.Context, input PerformerCreateInput) (*Performer, error)
	PerformerUpdate(ctx context.Context, input PerformerUpdateInput) (*Performer, error)
	PerformerDestroy(ctx context.Context, input PerformerDestroyInput) (bool, error)
	PerformersDestroy(ctx context.Context, ids []string) (bool, error)
	BulkPerformerUpdate(ctx context.Context, input BulkPerformerUpdateInput) ([]*Performer, error)
	StudioCreate(ctx context.Context, input StudioCreateInput) (*Studio, error)
	StudioUpdate(ctx context.Context, input StudioUpdateInput) (*Studio, error)
	StudioDestroy(ctx context.Context, input StudioDestroyInput) (bool, error)
	StudiosDestroy(ctx context.Context, ids []string) (bool, error)
	MovieCreate(ctx context.Context, input MovieCreateInput) (*Movie, error)
	MovieUpdate(ctx context.Context, input MovieUpdateInput) (*Movie, error)
	MovieDestroy(ctx context.Context, input MovieDestroyInput) (bool, error)
	MoviesDestroy(ctx context.Context, ids []string) (bool, error)
	BulkMovieUpdate(ctx context.Context, input BulkMovieUpdateInput) ([]*Movie, error)
	TagCreate(ctx context.Context, input TagCreateInput) (*Tag, error)
	TagUpdate(ctx context.Context, input TagUpdateInput) (*Tag, error)
	TagDestroy(ctx context.Context, input TagDestroyInput) (bool, error)
	TagsDestroy(ctx context.Context, ids []string) (bool, error)
	TagsMerge(ctx context.Context, input TagsMergeInput) (*Tag, error)
	SaveFilter(ctx context.Context, input SaveFilterInput) (*SavedFilter, error)
	DestroySavedFilter(ctx context.Context, input DestroyFilterInput) (bool, error)
	SetDefaultFilter(ctx context.Context, input SetDefaultFilterInput) (bool, error)
	ConfigureGeneral(ctx context.Context, input ConfigGeneralInput) (*ConfigGeneralResult, error)
	ConfigureInterface(ctx context.Context, input ConfigInterfaceInput) (*ConfigInterfaceResult, error)
	ConfigureDlna(ctx context.Context, input ConfigDLNAInput) (*ConfigDLNAResult, error)
	ConfigureScraping(ctx context.Context, input ConfigScrapingInput) (*ConfigScrapingResult, error)
	ConfigureDefaults(ctx context.Context, input ConfigDefaultSettingsInput) (*ConfigDefaultSettingsResult, error)
	ConfigureUI(ctx context.Context, input map[string]interface{}) (map[string]interface{}, error)
	ConfigureUISetting(ctx context.Context, key string, value interface{}) (map[string]interface{}, error)
	GenerateAPIKey(ctx context.Context, input GenerateAPIKeyInput) (string, error)
	ExportObjects(ctx context.Context, input ExportObjectsInput) (*string, error)
	ImportObjects(ctx context.Context, input ImportObjectsInput) (string, error)
	MetadataImport(ctx context.Context) (string, error)
	MetadataExport(ctx context.Context) (string, error)
	MetadataScan(ctx context.Context, input ScanMetadataInput) (string, error)
	MetadataGenerate(ctx context.Context, input GenerateMetadataInput) (string, error)
	MetadataAutoTag(ctx context.Context, input AutoTagMetadataInput) (string, error)
	MetadataClean(ctx context.Context, input CleanMetadataInput) (string, error)
	MetadataIdentify(ctx context.Context, input IdentifyMetadataInput) (string, error)
	MigrateHashNaming(ctx context.Context) (string, error)
	ReloadScrapers(ctx context.Context) (bool, error)
	RunPluginTask(ctx context.Context, pluginID string, taskName string, args []*PluginArgInput) (string, error)
	ReloadPlugins(ctx context.Context) (bool, error)
	StopJob(ctx context.Context, jobID string) (bool, error)
	StopAllJobs(ctx context.Context) (bool, error)
	SubmitStashBoxFingerprints(ctx context.Context, input StashBoxFingerprintSubmissionInput) (bool, error)
	SubmitStashBoxSceneDraft(ctx context.Context, input StashBoxDraftSubmissionInput) (*string, error)
	SubmitStashBoxPerformerDraft(ctx context.Context, input StashBoxDraftSubmissionInput) (*string, error)
	BackupDatabase(ctx context.Context, input BackupDatabaseInput) (*string, error)
	StashBoxBatchPerformerTag(ctx context.Context, input StashBoxBatchPerformerTagInput) (string, error)
	EnableDlna(ctx context.Context, input EnableDLNAInput) (bool, error)
	DisableDlna(ctx context.Context, input DisableDLNAInput) (bool, error)
	AddTempDlnaip(ctx context.Context, input AddTempDLNAIPInput) (bool, error)
	RemoveTempDlnaip(ctx context.Context, input RemoveTempDLNAIPInput) (bool, error)
}
type PerformerResolver interface {
	Name(ctx context.Context, obj *Performer) (*string, error)
	URL(ctx context.Context, obj *Performer) (*string, error)
	Gender(ctx context.Context, obj *Performer) (*GenderEnum, error)
	Twitter(ctx context.Context, obj *Performer) (*string, error)
	Instagram(ctx context.Context, obj *Performer) (*string, error)
	Birthdate(ctx context.Context, obj *Performer) (*string, error)
	Ethnicity(ctx context.Context, obj *Performer) (*string, error)
	Country(ctx context.Context, obj *Performer) (*string, error)
	EyeColor(ctx context.Context, obj *Performer) (*string, error)
	Height(ctx context.Context, obj *Performer) (*string, error)
	Measurements(ctx context.Context, obj *Performer) (*string, error)
	FakeTits(ctx context.Context, obj *Performer) (*string, error)
	CareerLength(ctx context.Context, obj *Performer) (*string, error)
	Tattoos(ctx context.Context, obj *Performer) (*string, error)
	Piercings(ctx context.Context, obj *Performer) (*string, error)
	Aliases(ctx context.Context, obj *Performer) (*string, error)
	Favorite(ctx context.Context, obj *Performer) (bool, error)
	Tags(ctx context.Context, obj *Performer) ([]*Tag, error)

	ImagePath(ctx context.Context, obj *Performer) (*string, error)
	SceneCount(ctx context.Context, obj *Performer) (*int, error)
	ImageCount(ctx context.Context, obj *Performer) (*int, error)
	GalleryCount(ctx context.Context, obj *Performer) (*int, error)
	Scenes(ctx context.Context, obj *Performer) ([]*Scene, error)
	StashIds(ctx context.Context, obj *Performer) ([]*StashID, error)
	Rating(ctx context.Context, obj *Performer) (*int, error)
	Details(ctx context.Context, obj *Performer) (*string, error)
	DeathDate(ctx context.Context, obj *Performer) (*string, error)
	HairColor(ctx context.Context, obj *Performer) (*string, error)
	Weight(ctx context.Context, obj *Performer) (*int, error)
	CreatedAt(ctx context.Context, obj *Performer) (*time.Time, error)
	UpdatedAt(ctx context.Context, obj *Performer) (*time.Time, error)
	MovieCount(ctx context.Context, obj *Performer) (*int, error)
	Movies(ctx context.Context, obj *Performer) ([]*Movie, error)
}
type QueryResolver interface {
	FindSavedFilter(ctx context.Context, id string) (*SavedFilter, error)
	FindSavedFilters(ctx context.Context, mode *FilterMode) ([]*SavedFilter, error)
	FindDefaultFilter(ctx context.Context, mode FilterMode) (*SavedFilter, error)
	FindScene(ctx context.Context, id *string, checksum *string) (*Scene, error)
	FindSceneByHash(ctx context.Context, input SceneHashInput) (*Scene, error)
	FindScenes(ctx context.Context, sceneFilter *SceneFilterType, sceneIds []int, filter *FindFilterType) (*FindScenesResultType, error)
	FindScenesByPathRegex(ctx context.Context, filter *FindFilterType) (*FindScenesResultType, error)
	FindDuplicateScenes(ctx context.Context, distance *int) ([][]*Scene, error)
	SceneStreams(ctx context.Context, id *string) ([]*SceneStreamEndpoint, error)
	ParseSceneFilenames(ctx context.Context, filter *FindFilterType, config SceneParserInput) (*SceneParserResultType, error)
	FindSceneMarkers(ctx context.Context, sceneMarkerFilter *SceneMarkerFilterType, filter *FindFilterType) (*FindSceneMarkersResultType, error)
	FindImage(ctx context.Context, id *string, checksum *string) (*Image, error)
	FindImages(ctx context.Context, imageFilter *ImageFilterType, imageIds []int, filter *FindFilterType) (*FindImagesResultType, error)
	FindPerformer(ctx context.Context, id string) (*Performer, error)
	FindPerformers(ctx context.Context, performerFilter *PerformerFilterType, filter *FindFilterType) (*FindPerformersResultType, error)
	FindStudio(ctx context.Context, id string) (*Studio, error)
	FindStudios(ctx context.Context, studioFilter *StudioFilterType, filter *FindFilterType) (*FindStudiosResultType, error)
	FindMovie(ctx context.Context, id string) (*Movie, error)
	FindMovies(ctx context.Context, movieFilter *MovieFilterType, filter *FindFilterType) (*FindMoviesResultType, error)
	FindGallery(ctx context.Context, id string) (*Gallery, error)
	FindGalleries(ctx context.Context, galleryFilter *GalleryFilterType, filter *FindFilterType) (*FindGalleriesResultType, error)
	FindTag(ctx context.Context, id string) (*Tag, error)
	FindTags(ctx context.Context, tagFilter *TagFilterType, filter *FindFilterType) (*FindTagsResultType, error)
	MarkerWall(ctx context.Context, q *string) ([]*SceneMarker, error)
	SceneWall(ctx context.Context, q *string) ([]*Scene, error)
	MarkerStrings(ctx context.Context, q *string, sort *string) ([]*MarkerStringsResultType, error)
	Stats(ctx context.Context) (*StatsResultType, error)
	SceneMarkerTags(ctx context.Context, sceneID string) ([]*SceneMarkerTag, error)
	Logs(ctx context.Context) ([]*LogEntry, error)
	ListScrapers(ctx context.Context, types []ScrapeContentType) ([]*Scraper, error)
	ListPerformerScrapers(ctx context.Context) ([]*Scraper, error)
	ListSceneScrapers(ctx context.Context) ([]*Scraper, error)
	ListGalleryScrapers(ctx context.Context) ([]*Scraper, error)
	ListMovieScrapers(ctx context.Context) ([]*Scraper, error)
	ScrapeSingleScene(ctx context.Context, source ScraperSourceInput, input ScrapeSingleSceneInput) ([]*ScrapedScene, error)
	ScrapeMultiScenes(ctx context.Context, source ScraperSourceInput, input ScrapeMultiScenesInput) ([][]*ScrapedScene, error)
	ScrapeSinglePerformer(ctx context.Context, source ScraperSourceInput, input ScrapeSinglePerformerInput) ([]*ScrapedPerformer, error)
	ScrapeMultiPerformers(ctx context.Context, source ScraperSourceInput, input ScrapeMultiPerformersInput) ([][]*ScrapedPerformer, error)
	ScrapeSingleGallery(ctx context.Context, source ScraperSourceInput, input ScrapeSingleGalleryInput) ([]*ScrapedGallery, error)
	ScrapeSingleMovie(ctx context.Context, source ScraperSourceInput, input ScrapeSingleMovieInput) ([]*ScrapedMovie, error)
	ScrapeURL(ctx context.Context, url string, ty ScrapeContentType) (ScrapedContent, error)
	ScrapePerformerURL(ctx context.Context, url string) (*ScrapedPerformer, error)
	ScrapeSceneURL(ctx context.Context, url string) (*ScrapedScene, error)
	ScrapeGalleryURL(ctx context.Context, url string) (*ScrapedGallery, error)
	ScrapeMovieURL(ctx context.Context, url string) (*ScrapedMovie, error)
	ScrapePerformerList(ctx context.Context, scraperID string, query string) ([]*ScrapedPerformer, error)
	ScrapePerformer(ctx context.Context, scraperID string, scrapedPerformer ScrapedPerformerInput) (*ScrapedPerformer, error)
	ScrapeScene(ctx context.Context, scraperID string, scene SceneUpdateInput) (*ScrapedScene, error)
	ScrapeGallery(ctx context.Context, scraperID string, gallery GalleryUpdateInput) (*ScrapedGallery, error)
	ScrapeFreeonesPerformerList(ctx context.Context, query string) ([]string, error)
	Plugins(ctx context.Context) ([]*Plugin, error)
	PluginTasks(ctx context.Context) ([]*PluginTask, error)
	Configuration(ctx context.Context) (*ConfigResult, error)
	Directory(ctx context.Context, path *string, locale *string) (*Directory, error)
	ValidateStashBoxCredentials(ctx context.Context, input StashBoxInput) (*StashBoxValidationResult, error)
	SystemStatus(ctx context.Context) (*SystemStatus, error)
	JobQueue(ctx context.Context) ([]*Job, error)
	FindJob(ctx context.Context, input FindJobInput) (*Job, error)
	DlnaStatus(ctx context.Context) (*DLNAStatus, error)
	AllPerformers(ctx context.Context) ([]*Performer, error)
	AllStudios(ctx context.Context) ([]*Studio, error)
	AllMovies(ctx context.Context) ([]*Movie, error)
	AllTags(ctx context.Context) ([]*Tag, error)
	Version(ctx context.Context) (*Version, error)
	Latestversion(ctx context.Context) (*ShortVersion, error)
}
type SceneResolver interface {
	Checksum(ctx context.Context, obj *Scene) (*string, error)
	Oshash(ctx context.Context, obj *Scene) (*string, error)
	Title(ctx context.Context, obj *Scene) (*string, error)
	Details(ctx context.Context, obj *Scene) (*string, error)
	URL(ctx context.Context, obj *Scene) (*string, error)
	Date(ctx context.Context, obj *Scene) (*string, error)
	Rating(ctx context.Context, obj *Scene) (*int, error)

	Phash(ctx context.Context, obj *Scene) (*string, error)

	InteractiveSpeed(ctx context.Context, obj *Scene) (*int, error)
	Captions(ctx context.Context, obj *Scene) ([]*SceneCaption, error)
	CreatedAt(ctx context.Context, obj *Scene) (*time.Time, error)
	UpdatedAt(ctx context.Context, obj *Scene) (*time.Time, error)
	FileModTime(ctx context.Context, obj *Scene) (*time.Time, error)
	File(ctx context.Context, obj *Scene) (*SceneFileType, error)
	Paths(ctx context.Context, obj *Scene) (*ScenePathsType, error)
	SceneMarkers(ctx context.Context, obj *Scene) ([]*SceneMarker, error)
	Galleries(ctx context.Context, obj *Scene) ([]*Gallery, error)
	Studio(ctx context.Context, obj *Scene) (*Studio, error)
	Movies(ctx context.Context, obj *Scene) ([]*SceneMovie, error)
	Tags(ctx context.Context, obj *Scene) ([]*Tag, error)
	Performers(ctx context.Context, obj *Scene) ([]*Performer, error)
	StashIds(ctx context.Context, obj *Scene) ([]*StashID, error)
	SceneStreams(ctx context.Context, obj *Scene) ([]*SceneStreamEndpoint, error)
}
type SceneMarkerResolver interface {
	Scene(ctx context.Context, obj *SceneMarker) (*Scene, error)

	PrimaryTag(ctx context.Context, obj *SceneMarker) (*Tag, error)
	Tags(ctx context.Context, obj *SceneMarker) ([]*Tag, error)
	CreatedAt(ctx context.Context, obj *SceneMarker) (*time.Time, error)
	UpdatedAt(ctx context.Context, obj *SceneMarker) (*time.Time, error)
	Stream(ctx context.Context, obj *SceneMarker) (string, error)
	Preview(ctx context.Context, obj *SceneMarker) (string, error)
	Screenshot(ctx context.Context, obj *SceneMarker) (string, error)
}
type StudioResolver interface {
	Name(ctx context.Context, obj *Studio) (string, error)
	URL(ctx context.Context, obj *Studio) (*string, error)
	ParentStudio(ctx context.Context, obj *Studio) (*Studio, error)
	ChildStudios(ctx context.Context, obj *Studio) ([]*Studio, error)
	Aliases(ctx context.Context, obj *Studio) ([]string, error)

	ImagePath(ctx context.Context, obj *Studio) (*string, error)
	SceneCount(ctx context.Context, obj *Studio) (*int, error)
	ImageCount(ctx context.Context, obj *Studio) (*int, error)
	GalleryCount(ctx context.Context, obj *Studio) (*int, error)
	StashIds(ctx context.Context, obj *Studio) ([]*StashID, error)
	Rating(ctx context.Context, obj *Studio) (*int, error)
	Details(ctx context.Context, obj *Studio) (*string, error)
	CreatedAt(ctx context.Context, obj *Studio) (*time.Time, error)
	UpdatedAt(ctx context.Context, obj *Studio) (*time.Time, error)
	MovieCount(ctx context.Context, obj *Studio) (*int, error)
	Movies(ctx context.Context, obj *Studio) ([]*Movie, error)
}
type SubscriptionResolver interface {
	JobsSubscribe(ctx context.Context) (<-chan *JobStatusUpdate, error)
	LoggingSubscribe(ctx context.Context) (<-chan []*LogEntry, error)
	ScanCompleteSubscribe(ctx context.Context) (<-chan bool, error)
}
type TagResolver interface {
	Aliases(ctx context.Context, obj *Tag) ([]string, error)

	CreatedAt(ctx context.Context, obj *Tag) (*time.Time, error)
	UpdatedAt(ctx context.Context, obj *Tag) (*time.Time, error)
	ImagePath(ctx context.Context, obj *Tag) (*string, error)
	SceneCount(ctx context.Context, obj *Tag) (*int, error)
	SceneMarkerCount(ctx context.Context, obj *Tag) (*int, error)
	ImageCount(ctx context.Context, obj *Tag) (*int, error)
	GalleryCount(ctx context.Context, obj *Tag) (*int, error)
	PerformerCount(ctx context.Context, obj *Tag) (*int, error)
	Parents(ctx context.Context, obj *Tag) ([]*Tag, error)
	Children(ctx context.Context, obj *Tag) ([]*Tag, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "AutoTagMetadataOptions.performers":
		if e.complexity.AutoTagMetadataOptions.Performers == nil {
			break
		}

		return e.complexity.AutoTagMetadataOptions.Performers(childComplexity), true

	case "AutoTagMetadataOptions.studios":
		if e.complexity.AutoTagMetadataOptions.Studios == nil {
			break
		}

		return e.complexity.AutoTagMetadataOptions.Studios(childComplexity), true

	case "AutoTagMetadataOptions.tags":
		if e.complexity.AutoTagMetadataOptions.Tags == nil {
			break
		}

		return e.complexity.AutoTagMetadataOptions.Tags(childComplexity), true

	case "ConfigDLNAResult.enabled":
		if e.complexity.ConfigDLNAResult.Enabled == nil {
			break
		}

		return e.complexity.ConfigDLNAResult.Enabled(childComplexity), true

	case "ConfigDLNAResult.interfaces":
		if e.complexity.ConfigDLNAResult.Interfaces == nil {
			break
		}

		return e.complexity.ConfigDLNAResult.Interfaces(childComplexity), true

	case "ConfigDLNAResult.serverName":
		if e.complexity.ConfigDLNAResult.ServerName == nil {
			break
		}

		return e.complexity.ConfigDLNAResult.ServerName(childComplexity), true

	case "ConfigDLNAResult.whitelistedIPs":
		if e.complexity.ConfigDLNAResult.WhitelistedIPs == nil {
			break
		}

		return e.complexity.ConfigDLNAResult.WhitelistedIPs(childComplexity), true

	case "ConfigDefaultSettingsResult.autoTag":
		if e.complexity.ConfigDefaultSettingsResult.AutoTag == nil {
			break
		}

		return e.complexity.ConfigDefaultSettingsResult.AutoTag(childComplexity), true

	case "ConfigDefaultSettingsResult.deleteFile":
		if e.complexity.ConfigDefaultSettingsResult.DeleteFile == nil {
			break
		}

		return e.complexity.ConfigDefaultSettingsResult.DeleteFile(childComplexity), true

	case "ConfigDefaultSettingsResult.deleteGenerated":
		if e.complexity.ConfigDefaultSettingsResult.DeleteGenerated == nil {
			break
		}

		return e.complexity.ConfigDefaultSettingsResult.DeleteGenerated(childComplexity), true

	case "ConfigDefaultSettingsResult.generate":
		if e.complexity.ConfigDefaultSettingsResult.Generate == nil {
			break
		}

		return e.complexity.ConfigDefaultSettingsResult.Generate(childComplexity), true

	case "ConfigDefaultSettingsResult.identify":
		if e.complexity.ConfigDefaultSettingsResult.Identify == nil {
			break
		}

		return e.complexity.ConfigDefaultSettingsResult.Identify(childComplexity), true

	case "ConfigDefaultSettingsResult.scan":
		if e.complexity.ConfigDefaultSettingsResult.Scan == nil {
			break
		}

		return e.complexity.ConfigDefaultSettingsResult.Scan(childComplexity), true

	case "ConfigDisableDropdownCreate.performer":
		if e.complexity.ConfigDisableDropdownCreate.Performer == nil {
			break
		}

		return e.complexity.ConfigDisableDropdownCreate.Performer(childComplexity), true

	case "ConfigDisableDropdownCreate.studio":
		if e.complexity.ConfigDisableDropdownCreate.Studio == nil {
			break
		}

		return e.complexity.ConfigDisableDropdownCreate.Studio(childComplexity), true

	case "ConfigDisableDropdownCreate.tag":
		if e.complexity.ConfigDisableDropdownCreate.Tag == nil {
			break
		}

		return e.complexity.ConfigDisableDropdownCreate.Tag(childComplexity), true

	case "ConfigGeneralResult.apiKey":
		if e.complexity.ConfigGeneralResult.APIKey == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.APIKey(childComplexity), true

	case "ConfigGeneralResult.cachePath":
		if e.complexity.ConfigGeneralResult.CachePath == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.CachePath(childComplexity), true

	case "ConfigGeneralResult.calculateMD5":
		if e.complexity.ConfigGeneralResult.CalculateMd5 == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.CalculateMd5(childComplexity), true

	case "ConfigGeneralResult.configFilePath":
		if e.complexity.ConfigGeneralResult.ConfigFilePath == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.ConfigFilePath(childComplexity), true

	case "ConfigGeneralResult.createGalleriesFromFolders":
		if e.complexity.ConfigGeneralResult.CreateGalleriesFromFolders == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.CreateGalleriesFromFolders(childComplexity), true

	case "ConfigGeneralResult.customPerformerImageLocation":
		if e.complexity.ConfigGeneralResult.CustomPerformerImageLocation == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.CustomPerformerImageLocation(childComplexity), true

	case "ConfigGeneralResult.databasePath":
		if e.complexity.ConfigGeneralResult.DatabasePath == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.DatabasePath(childComplexity), true

	case "ConfigGeneralResult.excludes":
		if e.complexity.ConfigGeneralResult.Excludes == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.Excludes(childComplexity), true

	case "ConfigGeneralResult.galleryExtensions":
		if e.complexity.ConfigGeneralResult.GalleryExtensions == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.GalleryExtensions(childComplexity), true

	case "ConfigGeneralResult.generatedPath":
		if e.complexity.ConfigGeneralResult.GeneratedPath == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.GeneratedPath(childComplexity), true

	case "ConfigGeneralResult.imageExcludes":
		if e.complexity.ConfigGeneralResult.ImageExcludes == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.ImageExcludes(childComplexity), true

	case "ConfigGeneralResult.imageExtensions":
		if e.complexity.ConfigGeneralResult.ImageExtensions == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.ImageExtensions(childComplexity), true

	case "ConfigGeneralResult.logAccess":
		if e.complexity.ConfigGeneralResult.LogAccess == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.LogAccess(childComplexity), true

	case "ConfigGeneralResult.logFile":
		if e.complexity.ConfigGeneralResult.LogFile == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.LogFile(childComplexity), true

	case "ConfigGeneralResult.logLevel":
		if e.complexity.ConfigGeneralResult.LogLevel == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.LogLevel(childComplexity), true

	case "ConfigGeneralResult.logOut":
		if e.complexity.ConfigGeneralResult.LogOut == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.LogOut(childComplexity), true

	case "ConfigGeneralResult.maxSessionAge":
		if e.complexity.ConfigGeneralResult.MaxSessionAge == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.MaxSessionAge(childComplexity), true

	case "ConfigGeneralResult.maxStreamingTranscodeSize":
		if e.complexity.ConfigGeneralResult.MaxStreamingTranscodeSize == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.MaxStreamingTranscodeSize(childComplexity), true

	case "ConfigGeneralResult.maxTranscodeSize":
		if e.complexity.ConfigGeneralResult.MaxTranscodeSize == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.MaxTranscodeSize(childComplexity), true

	case "ConfigGeneralResult.metadataPath":
		if e.complexity.ConfigGeneralResult.MetadataPath == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.MetadataPath(childComplexity), true

	case "ConfigGeneralResult.parallelTasks":
		if e.complexity.ConfigGeneralResult.ParallelTasks == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.ParallelTasks(childComplexity), true

	case "ConfigGeneralResult.password":
		if e.complexity.ConfigGeneralResult.Password == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.Password(childComplexity), true

	case "ConfigGeneralResult.previewAudio":
		if e.complexity.ConfigGeneralResult.PreviewAudio == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.PreviewAudio(childComplexity), true

	case "ConfigGeneralResult.previewExcludeEnd":
		if e.complexity.ConfigGeneralResult.PreviewExcludeEnd == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.PreviewExcludeEnd(childComplexity), true

	case "ConfigGeneralResult.previewExcludeStart":
		if e.complexity.ConfigGeneralResult.PreviewExcludeStart == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.PreviewExcludeStart(childComplexity), true

	case "ConfigGeneralResult.previewPreset":
		if e.complexity.ConfigGeneralResult.PreviewPreset == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.PreviewPreset(childComplexity), true

	case "ConfigGeneralResult.previewSegmentDuration":
		if e.complexity.ConfigGeneralResult.PreviewSegmentDuration == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.PreviewSegmentDuration(childComplexity), true

	case "ConfigGeneralResult.previewSegments":
		if e.complexity.ConfigGeneralResult.PreviewSegments == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.PreviewSegments(childComplexity), true

	case "ConfigGeneralResult.pythonPath":
		if e.complexity.ConfigGeneralResult.PythonPath == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.PythonPath(childComplexity), true

	case "ConfigGeneralResult.scraperCDPPath":
		if e.complexity.ConfigGeneralResult.ScraperCDPPath == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.ScraperCDPPath(childComplexity), true

	case "ConfigGeneralResult.scraperCertCheck":
		if e.complexity.ConfigGeneralResult.ScraperCertCheck == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.ScraperCertCheck(childComplexity), true

	case "ConfigGeneralResult.scraperUserAgent":
		if e.complexity.ConfigGeneralResult.ScraperUserAgent == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.ScraperUserAgent(childComplexity), true

	case "ConfigGeneralResult.scrapersPath":
		if e.complexity.ConfigGeneralResult.ScrapersPath == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.ScrapersPath(childComplexity), true

	case "ConfigGeneralResult.stashBoxes":
		if e.complexity.ConfigGeneralResult.StashBoxes == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.StashBoxes(childComplexity), true

	case "ConfigGeneralResult.stashes":
		if e.complexity.ConfigGeneralResult.Stashes == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.Stashes(childComplexity), true

	case "ConfigGeneralResult.trustedProxies":
		if e.complexity.ConfigGeneralResult.TrustedProxies == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.TrustedProxies(childComplexity), true

	case "ConfigGeneralResult.username":
		if e.complexity.ConfigGeneralResult.Username == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.Username(childComplexity), true

	case "ConfigGeneralResult.videoExtensions":
		if e.complexity.ConfigGeneralResult.VideoExtensions == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.VideoExtensions(childComplexity), true

	case "ConfigGeneralResult.videoFileNamingAlgorithm":
		if e.complexity.ConfigGeneralResult.VideoFileNamingAlgorithm == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.VideoFileNamingAlgorithm(childComplexity), true

	case "ConfigGeneralResult.writeImageThumbnails":
		if e.complexity.ConfigGeneralResult.WriteImageThumbnails == nil {
			break
		}

		return e.complexity.ConfigGeneralResult.WriteImageThumbnails(childComplexity), true

	case "ConfigImageLightboxResult.displayMode":
		if e.complexity.ConfigImageLightboxResult.DisplayMode == nil {
			break
		}

		return e.complexity.ConfigImageLightboxResult.DisplayMode(childComplexity), true

	case "ConfigImageLightboxResult.resetZoomOnNav":
		if e.complexity.ConfigImageLightboxResult.ResetZoomOnNav == nil {
			break
		}

		return e.complexity.ConfigImageLightboxResult.ResetZoomOnNav(childComplexity), true

	case "ConfigImageLightboxResult.scaleUp":
		if e.complexity.ConfigImageLightboxResult.ScaleUp == nil {
			break
		}

		return e.complexity.ConfigImageLightboxResult.ScaleUp(childComplexity), true

	case "ConfigImageLightboxResult.scrollAttemptsBeforeChange":
		if e.complexity.ConfigImageLightboxResult.ScrollAttemptsBeforeChange == nil {
			break
		}

		return e.complexity.ConfigImageLightboxResult.ScrollAttemptsBeforeChange(childComplexity), true

	case "ConfigImageLightboxResult.scrollMode":
		if e.complexity.ConfigImageLightboxResult.ScrollMode == nil {
			break
		}

		return e.complexity.ConfigImageLightboxResult.ScrollMode(childComplexity), true

	case "ConfigImageLightboxResult.slideshowDelay":
		if e.complexity.ConfigImageLightboxResult.SlideshowDelay == nil {
			break
		}

		return e.complexity.ConfigImageLightboxResult.SlideshowDelay(childComplexity), true

	case "ConfigInterfaceResult.autostartVideo":
		if e.complexity.ConfigInterfaceResult.AutostartVideo == nil {
			break
		}

		return e.complexity.ConfigInterfaceResult.AutostartVideo(childComplexity), true

	case "ConfigInterfaceResult.autostartVideoOnPlaySelected":
		if e.complexity.ConfigInterfaceResult.AutostartVideoOnPlaySelected == nil {
			break
		}

		return e.complexity.ConfigInterfaceResult.AutostartVideoOnPlaySelected(childComplexity), true

	case "ConfigInterfaceResult.css":
		if e.complexity.ConfigInterfaceResult.CSS == nil {
			break
		}

		return e.complexity.ConfigInterfaceResult.CSS(childComplexity), true

	case "ConfigInterfaceResult.cssEnabled":
		if e.complexity.ConfigInterfaceResult.CSSEnabled == nil {
			break
		}

		return e.complexity.ConfigInterfaceResult.CSSEnabled(childComplexity), true

	case "ConfigInterfaceResult.continuePlaylistDefault":
		if e.complexity.ConfigInterfaceResult.ContinuePlaylistDefault == nil {
			break
		}

		return e.complexity.ConfigInterfaceResult.ContinuePlaylistDefault(childComplexity), true

	case "ConfigInterfaceResult.disableDropdownCreate":
		if e.complexity.ConfigInterfaceResult.DisableDropdownCreate == nil {
			break
		}

		return e.complexity.ConfigInterfaceResult.DisableDropdownCreate(childComplexity), true

	case "ConfigInterfaceResult.disabledDropdownCreate":
		if e.complexity.ConfigInterfaceResult.DisabledDropdownCreate == nil {
			break
		}

		return e.complexity.ConfigInterfaceResult.DisabledDropdownCreate(childComplexity), true

	case "ConfigInterfaceResult.funscriptOffset":
		if e.complexity.ConfigInterfaceResult.FunscriptOffset == nil {
			break
		}

		return e.complexity.ConfigInterfaceResult.FunscriptOffset(childComplexity), true

	case "ConfigInterfaceResult.handyKey":
		if e.complexity.ConfigInterfaceResult.HandyKey == nil {
			break
		}

		return e.complexity.ConfigInterfaceResult.HandyKey(childComplexity), true

	case "ConfigInterfaceResult.imageLightbox":
		if e.complexity.ConfigInterfaceResult.ImageLightbox == nil {
			break
		}

		return e.complexity.ConfigInterfaceResult.ImageLightbox(childComplexity), true

	case "ConfigInterfaceResult.language":
		if e.complexity.ConfigInterfaceResult.Language == nil {
			break
		}

		return e.complexity.ConfigInterfaceResult.Language(childComplexity), true

	case "ConfigInterfaceResult.maximumLoopDuration":
		if e.complexity.ConfigInterfaceResult.MaximumLoopDuration == nil {
			break
		}

		return e.complexity.ConfigInterfaceResult.MaximumLoopDuration(childComplexity), true

	case "ConfigInterfaceResult.menuItems":
		if e.complexity.ConfigInterfaceResult.MenuItems == nil {
			break
		}

		return e.complexity.ConfigInterfaceResult.MenuItems(childComplexity), true

	case "ConfigInterfaceResult.noBrowser":
		if e.complexity.ConfigInterfaceResult.NoBrowser == nil {
			break
		}

		return e.complexity.ConfigInterfaceResult.NoBrowser(childComplexity), true

	case "ConfigInterfaceResult.notificationsEnabled":
		if e.complexity.ConfigInterfaceResult.NotificationsEnabled == nil {
			break
		}

		return e.complexity.ConfigInterfaceResult.NotificationsEnabled(childComplexity), true

	case "ConfigInterfaceResult.showScrubber":
		if e.complexity.ConfigInterfaceResult.ShowScrubber == nil {
			break
		}

		return e.complexity.ConfigInterfaceResult.ShowScrubber(childComplexity), true

	case "ConfigInterfaceResult.showStudioAsText":
		if e.complexity.ConfigInterfaceResult.ShowStudioAsText == nil {
			break
		}

		return e.complexity.ConfigInterfaceResult.ShowStudioAsText(childComplexity), true

	case "ConfigInterfaceResult.slideshowDelay":
		if e.complexity.ConfigInterfaceResult.SlideshowDelay == nil {
			break
		}

		return e.complexity.ConfigInterfaceResult.SlideshowDelay(childComplexity), true

	case "ConfigInterfaceResult.soundOnPreview":
		if e.complexity.ConfigInterfaceResult.SoundOnPreview == nil {
			break
		}

		return e.complexity.ConfigInterfaceResult.SoundOnPreview(childComplexity), true

	case "ConfigInterfaceResult.wallPlayback":
		if e.complexity.ConfigInterfaceResult.WallPlayback == nil {
			break
		}

		return e.complexity.ConfigInterfaceResult.WallPlayback(childComplexity), true

	case "ConfigInterfaceResult.wallShowTitle":
		if e.complexity.ConfigInterfaceResult.WallShowTitle == nil {
			break
		}

		return e.complexity.ConfigInterfaceResult.WallShowTitle(childComplexity), true

	case "ConfigResult.defaults":
		if e.complexity.ConfigResult.Defaults == nil {
			break
		}

		return e.complexity.ConfigResult.Defaults(childComplexity), true

	case "ConfigResult.dlna":
		if e.complexity.ConfigResult.Dlna == nil {
			break
		}

		return e.complexity.ConfigResult.Dlna(childComplexity), true

	case "ConfigResult.general":
		if e.complexity.ConfigResult.General == nil {
			break
		}

		return e.complexity.ConfigResult.General(childComplexity), true

	case "ConfigResult.interface":
		if e.complexity.ConfigResult.Interface == nil {
			break
		}

		return e.complexity.ConfigResult.Interface(childComplexity), true

	case "ConfigResult.scraping":
		if e.complexity.ConfigResult.Scraping == nil {
			break
		}

		return e.complexity.ConfigResult.Scraping(childComplexity), true

	case "ConfigResult.ui":
		if e.complexity.ConfigResult.UI == nil {
			break
		}

		return e.complexity.ConfigResult.UI(childComplexity), true

	case "ConfigScrapingResult.excludeTagPatterns":
		if e.complexity.ConfigScrapingResult.ExcludeTagPatterns == nil {
			break
		}

		return e.complexity.ConfigScrapingResult.ExcludeTagPatterns(childComplexity), true

	case "ConfigScrapingResult.scraperCDPPath":
		if e.complexity.ConfigScrapingResult.ScraperCDPPath == nil {
			break
		}

		return e.complexity.ConfigScrapingResult.ScraperCDPPath(childComplexity), true

	case "ConfigScrapingResult.scraperCertCheck":
		if e.complexity.ConfigScrapingResult.ScraperCertCheck == nil {
			break
		}

		return e.complexity.ConfigScrapingResult.ScraperCertCheck(childComplexity), true

	case "ConfigScrapingResult.scraperUserAgent":
		if e.complexity.ConfigScrapingResult.ScraperUserAgent == nil {
			break
		}

		return e.complexity.ConfigScrapingResult.ScraperUserAgent(childComplexity), true

	case "DLNAIP.ipAddress":
		if e.complexity.DLNAIP.IPAddress == nil {
			break
		}

		return e.complexity.DLNAIP.IPAddress(childComplexity), true

	case "DLNAIP.until":
		if e.complexity.DLNAIP.Until == nil {
			break
		}

		return e.complexity.DLNAIP.Until(childComplexity), true

	case "DLNAStatus.allowedIPAddresses":
		if e.complexity.DLNAStatus.AllowedIPAddresses == nil {
			break
		}

		return e.complexity.DLNAStatus.AllowedIPAddresses(childComplexity), true

	case "DLNAStatus.recentIPAddresses":
		if e.complexity.DLNAStatus.RecentIPAddresses == nil {
			break
		}

		return e.complexity.DLNAStatus.RecentIPAddresses(childComplexity), true

	case "DLNAStatus.running":
		if e.complexity.DLNAStatus.Running == nil {
			break
		}

		return e.complexity.DLNAStatus.Running(childComplexity), true

	case "DLNAStatus.until":
		if e.complexity.DLNAStatus.Until == nil {
			break
		}

		return e.complexity.DLNAStatus.Until(childComplexity), true

	case "Directory.directories":
		if e.complexity.Directory.Directories == nil {
			break
		}

		return e.complexity.Directory.Directories(childComplexity), true

	case "Directory.parent":
		if e.complexity.Directory.Parent == nil {
			break
		}

		return e.complexity.Directory.Parent(childComplexity), true

	case "Directory.path":
		if e.complexity.Directory.Path == nil {
			break
		}

		return e.complexity.Directory.Path(childComplexity), true

	case "FindGalleriesResultType.count":
		if e.complexity.FindGalleriesResultType.Count == nil {
			break
		}

		return e.complexity.FindGalleriesResultType.Count(childComplexity), true

	case "FindGalleriesResultType.galleries":
		if e.complexity.FindGalleriesResultType.Galleries == nil {
			break
		}

		return e.complexity.FindGalleriesResultType.Galleries(childComplexity), true

	case "FindImagesResultType.count":
		if e.complexity.FindImagesResultType.Count == nil {
			break
		}

		return e.complexity.FindImagesResultType.Count(childComplexity), true

	case "FindImagesResultType.filesize":
		if e.complexity.FindImagesResultType.Filesize == nil {
			break
		}

		return e.complexity.FindImagesResultType.Filesize(childComplexity), true

	case "FindImagesResultType.images":
		if e.complexity.FindImagesResultType.Images == nil {
			break
		}

		return e.complexity.FindImagesResultType.Images(childComplexity), true

	case "FindImagesResultType.megapixels":
		if e.complexity.FindImagesResultType.Megapixels == nil {
			break
		}

		return e.complexity.FindImagesResultType.Megapixels(childComplexity), true

	case "FindMoviesResultType.count":
		if e.complexity.FindMoviesResultType.Count == nil {
			break
		}

		return e.complexity.FindMoviesResultType.Count(childComplexity), true

	case "FindMoviesResultType.movies":
		if e.complexity.FindMoviesResultType.Movies == nil {
			break
		}

		return e.complexity.FindMoviesResultType.Movies(childComplexity), true

	case "FindPerformersResultType.count":
		if e.complexity.FindPerformersResultType.Count == nil {
			break
		}

		return e.complexity.FindPerformersResultType.Count(childComplexity), true

	case "FindPerformersResultType.performers":
		if e.complexity.FindPerformersResultType.Performers == nil {
			break
		}

		return e.complexity.FindPerformersResultType.Performers(childComplexity), true

	case "FindSceneMarkersResultType.count":
		if e.complexity.FindSceneMarkersResultType.Count == nil {
			break
		}

		return e.complexity.FindSceneMarkersResultType.Count(childComplexity), true

	case "FindSceneMarkersResultType.scene_markers":
		if e.complexity.FindSceneMarkersResultType.SceneMarkers == nil {
			break
		}

		return e.complexity.FindSceneMarkersResultType.SceneMarkers(childComplexity), true

	case "FindScenesResultType.count":
		if e.complexity.FindScenesResultType.Count == nil {
			break
		}

		return e.complexity.FindScenesResultType.Count(childComplexity), true

	case "FindScenesResultType.duration":
		if e.complexity.FindScenesResultType.Duration == nil {
			break
		}

		return e.complexity.FindScenesResultType.Duration(childComplexity), true

	case "FindScenesResultType.filesize":
		if e.complexity.FindScenesResultType.Filesize == nil {
			break
		}

		return e.complexity.FindScenesResultType.Filesize(childComplexity), true

	case "FindScenesResultType.scenes":
		if e.complexity.FindScenesResultType.Scenes == nil {
			break
		}

		return e.complexity.FindScenesResultType.Scenes(childComplexity), true

	case "FindStudiosResultType.count":
		if e.complexity.FindStudiosResultType.Count == nil {
			break
		}

		return e.complexity.FindStudiosResultType.Count(childComplexity), true

	case "FindStudiosResultType.studios":
		if e.complexity.FindStudiosResultType.Studios == nil {
			break
		}

		return e.complexity.FindStudiosResultType.Studios(childComplexity), true

	case "FindTagsResultType.count":
		if e.complexity.FindTagsResultType.Count == nil {
			break
		}

		return e.complexity.FindTagsResultType.Count(childComplexity), true

	case "FindTagsResultType.tags":
		if e.complexity.FindTagsResultType.Tags == nil {
			break
		}

		return e.complexity.FindTagsResultType.Tags(childComplexity), true

	case "Gallery.checksum":
		if e.complexity.Gallery.Checksum == nil {
			break
		}

		return e.complexity.Gallery.Checksum(childComplexity), true

	case "Gallery.cover":
		if e.complexity.Gallery.Cover == nil {
			break
		}

		return e.complexity.Gallery.Cover(childComplexity), true

	case "Gallery.created_at":
		if e.complexity.Gallery.CreatedAt == nil {
			break
		}

		return e.complexity.Gallery.CreatedAt(childComplexity), true

	case "Gallery.date":
		if e.complexity.Gallery.Date == nil {
			break
		}

		return e.complexity.Gallery.Date(childComplexity), true

	case "Gallery.details":
		if e.complexity.Gallery.Details == nil {
			break
		}

		return e.complexity.Gallery.Details(childComplexity), true

	case "Gallery.file_mod_time":
		if e.complexity.Gallery.FileModTime == nil {
			break
		}

		return e.complexity.Gallery.FileModTime(childComplexity), true

	case "Gallery.id":
		if e.complexity.Gallery.ID == nil {
			break
		}

		return e.complexity.Gallery.ID(childComplexity), true

	case "Gallery.image_count":
		if e.complexity.Gallery.ImageCount == nil {
			break
		}

		return e.complexity.Gallery.ImageCount(childComplexity), true

	case "Gallery.images":
		if e.complexity.Gallery.Images == nil {
			break
		}

		return e.complexity.Gallery.Images(childComplexity), true

	case "Gallery.organized":
		if e.complexity.Gallery.Organized == nil {
			break
		}

		return e.complexity.Gallery.Organized(childComplexity), true

	case "Gallery.path":
		if e.complexity.Gallery.Path == nil {
			break
		}

		return e.complexity.Gallery.Path(childComplexity), true

	case "Gallery.performers":
		if e.complexity.Gallery.Performers == nil {
			break
		}

		return e.complexity.Gallery.Performers(childComplexity), true

	case "Gallery.rating":
		if e.complexity.Gallery.Rating == nil {
			break
		}

		return e.complexity.Gallery.Rating(childComplexity), true

	case "Gallery.scenes":
		if e.complexity.Gallery.Scenes == nil {
			break
		}

		return e.complexity.Gallery.Scenes(childComplexity), true

	case "Gallery.studio":
		if e.complexity.Gallery.Studio == nil {
			break
		}

		return e.complexity.Gallery.Studio(childComplexity), true

	case "Gallery.tags":
		if e.complexity.Gallery.Tags == nil {
			break
		}

		return e.complexity.Gallery.Tags(childComplexity), true

	case "Gallery.title":
		if e.complexity.Gallery.Title == nil {
			break
		}

		return e.complexity.Gallery.Title(childComplexity), true

	case "Gallery.url":
		if e.complexity.Gallery.URL == nil {
			break
		}

		return e.complexity.Gallery.URL(childComplexity), true

	case "Gallery.updated_at":
		if e.complexity.Gallery.UpdatedAt == nil {
			break
		}

		return e.complexity.Gallery.UpdatedAt(childComplexity), true

	case "GalleryFilesType.index":
		if e.complexity.GalleryFilesType.Index == nil {
			break
		}

		return e.complexity.GalleryFilesType.Index(childComplexity), true

	case "GalleryFilesType.name":
		if e.complexity.GalleryFilesType.Name == nil {
			break
		}

		return e.complexity.GalleryFilesType.Name(childComplexity), true

	case "GalleryFilesType.path":
		if e.complexity.GalleryFilesType.Path == nil {
			break
		}

		return e.complexity.GalleryFilesType.Path(childComplexity), true

	case "GenerateMetadataOptions.imagePreviews":
		if e.complexity.GenerateMetadataOptions.ImagePreviews == nil {
			break
		}

		return e.complexity.GenerateMetadataOptions.ImagePreviews(childComplexity), true

	case "GenerateMetadataOptions.interactiveHeatmapsSpeeds":
		if e.complexity.GenerateMetadataOptions.InteractiveHeatmapsSpeeds == nil {
			break
		}

		return e.complexity.GenerateMetadataOptions.InteractiveHeatmapsSpeeds(childComplexity), true

	case "GenerateMetadataOptions.markerImagePreviews":
		if e.complexity.GenerateMetadataOptions.MarkerImagePreviews == nil {
			break
		}

		return e.complexity.GenerateMetadataOptions.MarkerImagePreviews(childComplexity), true

	case "GenerateMetadataOptions.markerScreenshots":
		if e.complexity.GenerateMetadataOptions.MarkerScreenshots == nil {
			break
		}

		return e.complexity.GenerateMetadataOptions.MarkerScreenshots(childComplexity), true

	case "GenerateMetadataOptions.markers":
		if e.complexity.GenerateMetadataOptions.Markers == nil {
			break
		}

		return e.complexity.GenerateMetadataOptions.Markers(childComplexity), true

	case "GenerateMetadataOptions.phashes":
		if e.complexity.GenerateMetadataOptions.Phashes == nil {
			break
		}

		return e.complexity.GenerateMetadataOptions.Phashes(childComplexity), true

	case "GenerateMetadataOptions.previewOptions":
		if e.complexity.GenerateMetadataOptions.PreviewOptions == nil {
			break
		}

		return e.complexity.GenerateMetadataOptions.PreviewOptions(childComplexity), true

	case "GenerateMetadataOptions.previews":
		if e.complexity.GenerateMetadataOptions.Previews == nil {
			break
		}

		return e.complexity.GenerateMetadataOptions.Previews(childComplexity), true

	case "GenerateMetadataOptions.sprites":
		if e.complexity.GenerateMetadataOptions.Sprites == nil {
			break
		}

		return e.complexity.GenerateMetadataOptions.Sprites(childComplexity), true

	case "GenerateMetadataOptions.transcodes":
		if e.complexity.GenerateMetadataOptions.Transcodes == nil {
			break
		}

		return e.complexity.GenerateMetadataOptions.Transcodes(childComplexity), true

	case "GeneratePreviewOptions.previewExcludeEnd":
		if e.complexity.GeneratePreviewOptions.PreviewExcludeEnd == nil {
			break
		}

		return e.complexity.GeneratePreviewOptions.PreviewExcludeEnd(childComplexity), true

	case "GeneratePreviewOptions.previewExcludeStart":
		if e.complexity.GeneratePreviewOptions.PreviewExcludeStart == nil {
			break
		}

		return e.complexity.GeneratePreviewOptions.PreviewExcludeStart(childComplexity), true

	case "GeneratePreviewOptions.previewPreset":
		if e.complexity.GeneratePreviewOptions.PreviewPreset == nil {
			break
		}

		return e.complexity.GeneratePreviewOptions.PreviewPreset(childComplexity), true

	case "GeneratePreviewOptions.previewSegmentDuration":
		if e.complexity.GeneratePreviewOptions.PreviewSegmentDuration == nil {
			break
		}

		return e.complexity.GeneratePreviewOptions.PreviewSegmentDuration(childComplexity), true

	case "GeneratePreviewOptions.previewSegments":
		if e.complexity.GeneratePreviewOptions.PreviewSegments == nil {
			break
		}

		return e.complexity.GeneratePreviewOptions.PreviewSegments(childComplexity), true

	case "IdentifyFieldOptions.createMissing":
		if e.complexity.IdentifyFieldOptions.CreateMissing == nil {
			break
		}

		return e.complexity.IdentifyFieldOptions.CreateMissing(childComplexity), true

	case "IdentifyFieldOptions.field":
		if e.complexity.IdentifyFieldOptions.Field == nil {
			break
		}

		return e.complexity.IdentifyFieldOptions.Field(childComplexity), true

	case "IdentifyFieldOptions.strategy":
		if e.complexity.IdentifyFieldOptions.Strategy == nil {
			break
		}

		return e.complexity.IdentifyFieldOptions.Strategy(childComplexity), true

	case "IdentifyMetadataOptions.fieldOptions":
		if e.complexity.IdentifyMetadataOptions.FieldOptions == nil {
			break
		}

		return e.complexity.IdentifyMetadataOptions.FieldOptions(childComplexity), true

	case "IdentifyMetadataOptions.includeMalePerformers":
		if e.complexity.IdentifyMetadataOptions.IncludeMalePerformers == nil {
			break
		}

		return e.complexity.IdentifyMetadataOptions.IncludeMalePerformers(childComplexity), true

	case "IdentifyMetadataOptions.setCoverImage":
		if e.complexity.IdentifyMetadataOptions.SetCoverImage == nil {
			break
		}

		return e.complexity.IdentifyMetadataOptions.SetCoverImage(childComplexity), true

	case "IdentifyMetadataOptions.setOrganized":
		if e.complexity.IdentifyMetadataOptions.SetOrganized == nil {
			break
		}

		return e.complexity.IdentifyMetadataOptions.SetOrganized(childComplexity), true

	case "IdentifyMetadataTaskOptions.options":
		if e.complexity.IdentifyMetadataTaskOptions.Options == nil {
			break
		}

		return e.complexity.IdentifyMetadataTaskOptions.Options(childComplexity), true

	case "IdentifyMetadataTaskOptions.sources":
		if e.complexity.IdentifyMetadataTaskOptions.Sources == nil {
			break
		}

		return e.complexity.IdentifyMetadataTaskOptions.Sources(childComplexity), true

	case "IdentifySource.options":
		if e.complexity.IdentifySource.Options == nil {
			break
		}

		return e.complexity.IdentifySource.Options(childComplexity), true

	case "IdentifySource.source":
		if e.complexity.IdentifySource.Source == nil {
			break
		}

		return e.complexity.IdentifySource.Source(childComplexity), true

	case "Image.checksum":
		if e.complexity.Image.Checksum == nil {
			break
		}

		return e.complexity.Image.Checksum(childComplexity), true

	case "Image.created_at":
		if e.complexity.Image.CreatedAt == nil {
			break
		}

		return e.complexity.Image.CreatedAt(childComplexity), true

	case "Image.file":
		if e.complexity.Image.File == nil {
			break
		}

		return e.complexity.Image.File(childComplexity), true

	case "Image.file_mod_time":
		if e.complexity.Image.FileModTime == nil {
			break
		}

		return e.complexity.Image.FileModTime(childComplexity), true

	case "Image.galleries":
		if e.complexity.Image.Galleries == nil {
			break
		}

		return e.complexity.Image.Galleries(childComplexity), true

	case "Image.id":
		if e.complexity.Image.ID == nil {
			break
		}

		return e.complexity.Image.ID(childComplexity), true

	case "Image.o_counter":
		if e.complexity.Image.OCounter == nil {
			break
		}

		return e.complexity.Image.OCounter(childComplexity), true

	case "Image.organized":
		if e.complexity.Image.Organized == nil {
			break
		}

		return e.complexity.Image.Organized(childComplexity), true

	case "Image.path":
		if e.complexity.Image.Path == nil {
			break
		}

		return e.complexity.Image.Path(childComplexity), true

	case "Image.paths":
		if e.complexity.Image.Paths == nil {
			break
		}

		return e.complexity.Image.Paths(childComplexity), true

	case "Image.performers":
		if e.complexity.Image.Performers == nil {
			break
		}

		return e.complexity.Image.Performers(childComplexity), true

	case "Image.rating":
		if e.complexity.Image.Rating == nil {
			break
		}

		return e.complexity.Image.Rating(childComplexity), true

	case "Image.studio":
		if e.complexity.Image.Studio == nil {
			break
		}

		return e.complexity.Image.Studio(childComplexity), true

	case "Image.tags":
		if e.complexity.Image.Tags == nil {
			break
		}

		return e.complexity.Image.Tags(childComplexity), true

	case "Image.title":
		if e.complexity.Image.Title == nil {
			break
		}

		return e.complexity.Image.Title(childComplexity), true

	case "Image.updated_at":
		if e.complexity.Image.UpdatedAt == nil {
			break
		}

		return e.complexity.Image.UpdatedAt(childComplexity), true

	case "ImageFileType.height":
		if e.complexity.ImageFileType.Height == nil {
			break
		}

		return e.complexity.ImageFileType.Height(childComplexity), true

	case "ImageFileType.size":
		if e.complexity.ImageFileType.Size == nil {
			break
		}

		return e.complexity.ImageFileType.Size(childComplexity), true

	case "ImageFileType.width":
		if e.complexity.ImageFileType.Width == nil {
			break
		}

		return e.complexity.ImageFileType.Width(childComplexity), true

	case "ImagePathsType.image":
		if e.complexity.ImagePathsType.Image == nil {
			break
		}

		return e.complexity.ImagePathsType.Image(childComplexity), true

	case "ImagePathsType.thumbnail":
		if e.complexity.ImagePathsType.Thumbnail == nil {
			break
		}

		return e.complexity.ImagePathsType.Thumbnail(childComplexity), true

	case "Job.addTime":
		if e.complexity.Job.AddTime == nil {
			break
		}

		return e.complexity.Job.AddTime(childComplexity), true

	case "Job.description":
		if e.complexity.Job.Description == nil {
			break
		}

		return e.complexity.Job.Description(childComplexity), true

	case "Job.endTime":
		if e.complexity.Job.EndTime == nil {
			break
		}

		return e.complexity.Job.EndTime(childComplexity), true

	case "Job.id":
		if e.complexity.Job.ID == nil {
			break
		}

		return e.complexity.Job.ID(childComplexity), true

	case "Job.progress":
		if e.complexity.Job.Progress == nil {
			break
		}

		return e.complexity.Job.Progress(childComplexity), true

	case "Job.startTime":
		if e.complexity.Job.StartTime == nil {
			break
		}

		return e.complexity.Job.StartTime(childComplexity), true

	case "Job.status":
		if e.complexity.Job.Status == nil {
			break
		}

		return e.complexity.Job.Status(childComplexity), true

	case "Job.subTasks":
		if e.complexity.Job.SubTasks == nil {
			break
		}

		return e.complexity.Job.SubTasks(childComplexity), true

	case "JobStatusUpdate.job":
		if e.complexity.JobStatusUpdate.Job == nil {
			break
		}

		return e.complexity.JobStatusUpdate.Job(childComplexity), true

	case "JobStatusUpdate.type":
		if e.complexity.JobStatusUpdate.Type == nil {
			break
		}

		return e.complexity.JobStatusUpdate.Type(childComplexity), true

	case "LogEntry.level":
		if e.complexity.LogEntry.Level == nil {
			break
		}

		return e.complexity.LogEntry.Level(childComplexity), true

	case "LogEntry.message":
		if e.complexity.LogEntry.Message == nil {
			break
		}

		return e.complexity.LogEntry.Message(childComplexity), true

	case "LogEntry.time":
		if e.complexity.LogEntry.Time == nil {
			break
		}

		return e.complexity.LogEntry.Time(childComplexity), true

	case "MarkerStringsResultType.count":
		if e.complexity.MarkerStringsResultType.Count == nil {
			break
		}

		return e.complexity.MarkerStringsResultType.Count(childComplexity), true

	case "MarkerStringsResultType.id":
		if e.complexity.MarkerStringsResultType.ID == nil {
			break
		}

		return e.complexity.MarkerStringsResultType.ID(childComplexity), true

	case "MarkerStringsResultType.title":
		if e.complexity.MarkerStringsResultType.Title == nil {
			break
		}

		return e.complexity.MarkerStringsResultType.Title(childComplexity), true

	case "Movie.aliases":
		if e.complexity.Movie.Aliases == nil {
			break
		}

		return e.complexity.Movie.Aliases(childComplexity), true

	case "Movie.back_image_path":
		if e.complexity.Movie.BackImagePath == nil {
			break
		}

		return e.complexity.Movie.BackImagePath(childComplexity), true

	case "Movie.checksum":
		if e.complexity.Movie.Checksum == nil {
			break
		}

		return e.complexity.Movie.Checksum(childComplexity), true

	case "Movie.created_at":
		if e.complexity.Movie.CreatedAt == nil {
			break
		}

		return e.complexity.Movie.CreatedAt(childComplexity), true

	case "Movie.date":
		if e.complexity.Movie.Date == nil {
			break
		}

		return e.complexity.Movie.Date(childComplexity), true

	case "Movie.director":
		if e.complexity.Movie.Director == nil {
			break
		}

		return e.complexity.Movie.Director(childComplexity), true

	case "Movie.duration":
		if e.complexity.Movie.Duration == nil {
			break
		}

		return e.complexity.Movie.Duration(childComplexity), true

	case "Movie.front_image_path":
		if e.complexity.Movie.FrontImagePath == nil {
			break
		}

		return e.complexity.Movie.FrontImagePath(childComplexity), true

	case "Movie.id":
		if e.complexity.Movie.ID == nil {
			break
		}

		return e.complexity.Movie.ID(childComplexity), true

	case "Movie.name":
		if e.complexity.Movie.Name == nil {
			break
		}

		return e.complexity.Movie.Name(childComplexity), true

	case "Movie.rating":
		if e.complexity.Movie.Rating == nil {
			break
		}

		return e.complexity.Movie.Rating(childComplexity), true

	case "Movie.scene_count":
		if e.complexity.Movie.SceneCount == nil {
			break
		}

		return e.complexity.Movie.SceneCount(childComplexity), true

	case "Movie.scenes":
		if e.complexity.Movie.Scenes == nil {
			break
		}

		return e.complexity.Movie.Scenes(childComplexity), true

	case "Movie.studio":
		if e.complexity.Movie.Studio == nil {
			break
		}

		return e.complexity.Movie.Studio(childComplexity), true

	case "Movie.synopsis":
		if e.complexity.Movie.Synopsis == nil {
			break
		}

		return e.complexity.Movie.Synopsis(childComplexity), true

	case "Movie.url":
		if e.complexity.Movie.URL == nil {
			break
		}

		return e.complexity.Movie.URL(childComplexity), true

	case "Movie.updated_at":
		if e.complexity.Movie.UpdatedAt == nil {
			break
		}

		return e.complexity.Movie.UpdatedAt(childComplexity), true

	case "Mutation.addGalleryImages":
		if e.complexity.Mutation.AddGalleryImages == nil {
			break
		}

		args, err := ec.field_Mutation_addGalleryImages_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddGalleryImages(childComplexity, args["input"].(GalleryAddInput)), true

	case "Mutation.addTempDLNAIP":
		if e.complexity.Mutation.AddTempDlnaip == nil {
			break
		}

		args, err := ec.field_Mutation_addTempDLNAIP_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddTempDlnaip(childComplexity, args["input"].(AddTempDLNAIPInput)), true

	case "Mutation.backupDatabase":
		if e.complexity.Mutation.BackupDatabase == nil {
			break
		}

		args, err := ec.field_Mutation_backupDatabase_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BackupDatabase(childComplexity, args["input"].(BackupDatabaseInput)), true

	case "Mutation.bulkGalleryUpdate":
		if e.complexity.Mutation.BulkGalleryUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_bulkGalleryUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkGalleryUpdate(childComplexity, args["input"].(BulkGalleryUpdateInput)), true

	case "Mutation.bulkImageUpdate":
		if e.complexity.Mutation.BulkImageUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_bulkImageUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkImageUpdate(childComplexity, args["input"].(BulkImageUpdateInput)), true

	case "Mutation.bulkMovieUpdate":
		if e.complexity.Mutation.BulkMovieUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_bulkMovieUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkMovieUpdate(childComplexity, args["input"].(BulkMovieUpdateInput)), true

	case "Mutation.bulkPerformerUpdate":
		if e.complexity.Mutation.BulkPerformerUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_bulkPerformerUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkPerformerUpdate(childComplexity, args["input"].(BulkPerformerUpdateInput)), true

	case "Mutation.bulkSceneUpdate":
		if e.complexity.Mutation.BulkSceneUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_bulkSceneUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkSceneUpdate(childComplexity, args["input"].(BulkSceneUpdateInput)), true

	case "Mutation.configureDefaults":
		if e.complexity.Mutation.ConfigureDefaults == nil {
			break
		}

		args, err := ec.field_Mutation_configureDefaults_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConfigureDefaults(childComplexity, args["input"].(ConfigDefaultSettingsInput)), true

	case "Mutation.configureDLNA":
		if e.complexity.Mutation.ConfigureDlna == nil {
			break
		}

		args, err := ec.field_Mutation_configureDLNA_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConfigureDlna(childComplexity, args["input"].(ConfigDLNAInput)), true

	case "Mutation.configureGeneral":
		if e.complexity.Mutation.ConfigureGeneral == nil {
			break
		}

		args, err := ec.field_Mutation_configureGeneral_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConfigureGeneral(childComplexity, args["input"].(ConfigGeneralInput)), true

	case "Mutation.configureInterface":
		if e.complexity.Mutation.ConfigureInterface == nil {
			break
		}

		args, err := ec.field_Mutation_configureInterface_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConfigureInterface(childComplexity, args["input"].(ConfigInterfaceInput)), true

	case "Mutation.configureScraping":
		if e.complexity.Mutation.ConfigureScraping == nil {
			break
		}

		args, err := ec.field_Mutation_configureScraping_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConfigureScraping(childComplexity, args["input"].(ConfigScrapingInput)), true

	case "Mutation.configureUI":
		if e.complexity.Mutation.ConfigureUI == nil {
			break
		}

		args, err := ec.field_Mutation_configureUI_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConfigureUI(childComplexity, args["input"].(map[string]interface{})), true

	case "Mutation.configureUISetting":
		if e.complexity.Mutation.ConfigureUISetting == nil {
			break
		}

		args, err := ec.field_Mutation_configureUISetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConfigureUISetting(childComplexity, args["key"].(string), args["value"].(interface{})), true

	case "Mutation.destroySavedFilter":
		if e.complexity.Mutation.DestroySavedFilter == nil {
			break
		}

		args, err := ec.field_Mutation_destroySavedFilter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DestroySavedFilter(childComplexity, args["input"].(DestroyFilterInput)), true

	case "Mutation.disableDLNA":
		if e.complexity.Mutation.DisableDlna == nil {
			break
		}

		args, err := ec.field_Mutation_disableDLNA_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DisableDlna(childComplexity, args["input"].(DisableDLNAInput)), true

	case "Mutation.enableDLNA":
		if e.complexity.Mutation.EnableDlna == nil {
			break
		}

		args, err := ec.field_Mutation_enableDLNA_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EnableDlna(childComplexity, args["input"].(EnableDLNAInput)), true

	case "Mutation.exportObjects":
		if e.complexity.Mutation.ExportObjects == nil {
			break
		}

		args, err := ec.field_Mutation_exportObjects_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ExportObjects(childComplexity, args["input"].(ExportObjectsInput)), true

	case "Mutation.galleriesUpdate":
		if e.complexity.Mutation.GalleriesUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_galleriesUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.GalleriesUpdate(childComplexity, args["input"].([]*GalleryUpdateInput)), true

	case "Mutation.galleryCreate":
		if e.complexity.Mutation.GalleryCreate == nil {
			break
		}

		args, err := ec.field_Mutation_galleryCreate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.GalleryCreate(childComplexity, args["input"].(GalleryCreateInput)), true

	case "Mutation.galleryDestroy":
		if e.complexity.Mutation.GalleryDestroy == nil {
			break
		}

		args, err := ec.field_Mutation_galleryDestroy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.GalleryDestroy(childComplexity, args["input"].(GalleryDestroyInput)), true

	case "Mutation.galleryUpdate":
		if e.complexity.Mutation.GalleryUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_galleryUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.GalleryUpdate(childComplexity, args["input"].(GalleryUpdateInput)), true

	case "Mutation.generateAPIKey":
		if e.complexity.Mutation.GenerateAPIKey == nil {
			break
		}

		args, err := ec.field_Mutation_generateAPIKey_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.GenerateAPIKey(childComplexity, args["input"].(GenerateAPIKeyInput)), true

	case "Mutation.imageDecrementO":
		if e.complexity.Mutation.ImageDecrementO == nil {
			break
		}

		args, err := ec.field_Mutation_imageDecrementO_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ImageDecrementO(childComplexity, args["id"].(string)), true

	case "Mutation.imageDestroy":
		if e.complexity.Mutation.ImageDestroy == nil {
			break
		}

		args, err := ec.field_Mutation_imageDestroy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ImageDestroy(childComplexity, args["input"].(ImageDestroyInput)), true

	case "Mutation.imageIncrementO":
		if e.complexity.Mutation.ImageIncrementO == nil {
			break
		}

		args, err := ec.field_Mutation_imageIncrementO_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ImageIncrementO(childComplexity, args["id"].(string)), true

	case "Mutation.imageResetO":
		if e.complexity.Mutation.ImageResetO == nil {
			break
		}

		args, err := ec.field_Mutation_imageResetO_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ImageResetO(childComplexity, args["id"].(string)), true

	case "Mutation.imageUpdate":
		if e.complexity.Mutation.ImageUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_imageUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ImageUpdate(childComplexity, args["input"].(ImageUpdateInput)), true

	case "Mutation.imagesDestroy":
		if e.complexity.Mutation.ImagesDestroy == nil {
			break
		}

		args, err := ec.field_Mutation_imagesDestroy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ImagesDestroy(childComplexity, args["input"].(ImagesDestroyInput)), true

	case "Mutation.imagesUpdate":
		if e.complexity.Mutation.ImagesUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_imagesUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ImagesUpdate(childComplexity, args["input"].([]*ImageUpdateInput)), true

	case "Mutation.importObjects":
		if e.complexity.Mutation.ImportObjects == nil {
			break
		}

		args, err := ec.field_Mutation_importObjects_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ImportObjects(childComplexity, args["input"].(ImportObjectsInput)), true

	case "Mutation.metadataAutoTag":
		if e.complexity.Mutation.MetadataAutoTag == nil {
			break
		}

		args, err := ec.field_Mutation_metadataAutoTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MetadataAutoTag(childComplexity, args["input"].(AutoTagMetadataInput)), true

	case "Mutation.metadataClean":
		if e.complexity.Mutation.MetadataClean == nil {
			break
		}

		args, err := ec.field_Mutation_metadataClean_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MetadataClean(childComplexity, args["input"].(CleanMetadataInput)), true

	case "Mutation.metadataExport":
		if e.complexity.Mutation.MetadataExport == nil {
			break
		}

		return e.complexity.Mutation.MetadataExport(childComplexity), true

	case "Mutation.metadataGenerate":
		if e.complexity.Mutation.MetadataGenerate == nil {
			break
		}

		args, err := ec.field_Mutation_metadataGenerate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MetadataGenerate(childComplexity, args["input"].(GenerateMetadataInput)), true

	case "Mutation.metadataIdentify":
		if e.complexity.Mutation.MetadataIdentify == nil {
			break
		}

		args, err := ec.field_Mutation_metadataIdentify_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MetadataIdentify(childComplexity, args["input"].(IdentifyMetadataInput)), true

	case "Mutation.metadataImport":
		if e.complexity.Mutation.MetadataImport == nil {
			break
		}

		return e.complexity.Mutation.MetadataImport(childComplexity), true

	case "Mutation.metadataScan":
		if e.complexity.Mutation.MetadataScan == nil {
			break
		}

		args, err := ec.field_Mutation_metadataScan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MetadataScan(childComplexity, args["input"].(ScanMetadataInput)), true

	case "Mutation.migrate":
		if e.complexity.Mutation.Migrate == nil {
			break
		}

		args, err := ec.field_Mutation_migrate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Migrate(childComplexity, args["input"].(MigrateInput)), true

	case "Mutation.migrateHashNaming":
		if e.complexity.Mutation.MigrateHashNaming == nil {
			break
		}

		return e.complexity.Mutation.MigrateHashNaming(childComplexity), true

	case "Mutation.movieCreate":
		if e.complexity.Mutation.MovieCreate == nil {
			break
		}

		args, err := ec.field_Mutation_movieCreate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MovieCreate(childComplexity, args["input"].(MovieCreateInput)), true

	case "Mutation.movieDestroy":
		if e.complexity.Mutation.MovieDestroy == nil {
			break
		}

		args, err := ec.field_Mutation_movieDestroy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MovieDestroy(childComplexity, args["input"].(MovieDestroyInput)), true

	case "Mutation.movieUpdate":
		if e.complexity.Mutation.MovieUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_movieUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MovieUpdate(childComplexity, args["input"].(MovieUpdateInput)), true

	case "Mutation.moviesDestroy":
		if e.complexity.Mutation.MoviesDestroy == nil {
			break
		}

		args, err := ec.field_Mutation_moviesDestroy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MoviesDestroy(childComplexity, args["ids"].([]string)), true

	case "Mutation.performerCreate":
		if e.complexity.Mutation.PerformerCreate == nil {
			break
		}

		args, err := ec.field_Mutation_performerCreate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PerformerCreate(childComplexity, args["input"].(PerformerCreateInput)), true

	case "Mutation.performerDestroy":
		if e.complexity.Mutation.PerformerDestroy == nil {
			break
		}

		args, err := ec.field_Mutation_performerDestroy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PerformerDestroy(childComplexity, args["input"].(PerformerDestroyInput)), true

	case "Mutation.performerUpdate":
		if e.complexity.Mutation.PerformerUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_performerUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PerformerUpdate(childComplexity, args["input"].(PerformerUpdateInput)), true

	case "Mutation.performersDestroy":
		if e.complexity.Mutation.PerformersDestroy == nil {
			break
		}

		args, err := ec.field_Mutation_performersDestroy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PerformersDestroy(childComplexity, args["ids"].([]string)), true

	case "Mutation.reloadPlugins":
		if e.complexity.Mutation.ReloadPlugins == nil {
			break
		}

		return e.complexity.Mutation.ReloadPlugins(childComplexity), true

	case "Mutation.reloadScrapers":
		if e.complexity.Mutation.ReloadScrapers == nil {
			break
		}

		return e.complexity.Mutation.ReloadScrapers(childComplexity), true

	case "Mutation.removeGalleryImages":
		if e.complexity.Mutation.RemoveGalleryImages == nil {
			break
		}

		args, err := ec.field_Mutation_removeGalleryImages_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveGalleryImages(childComplexity, args["input"].(GalleryRemoveInput)), true

	case "Mutation.removeTempDLNAIP":
		if e.complexity.Mutation.RemoveTempDlnaip == nil {
			break
		}

		args, err := ec.field_Mutation_removeTempDLNAIP_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveTempDlnaip(childComplexity, args["input"].(RemoveTempDLNAIPInput)), true

	case "Mutation.runPluginTask":
		if e.complexity.Mutation.RunPluginTask == nil {
			break
		}

		args, err := ec.field_Mutation_runPluginTask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RunPluginTask(childComplexity, args["plugin_id"].(string), args["task_name"].(string), args["args"].([]*PluginArgInput)), true

	case "Mutation.saveFilter":
		if e.complexity.Mutation.SaveFilter == nil {
			break
		}

		args, err := ec.field_Mutation_saveFilter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveFilter(childComplexity, args["input"].(SaveFilterInput)), true

	case "Mutation.sceneDecrementO":
		if e.complexity.Mutation.SceneDecrementO == nil {
			break
		}

		args, err := ec.field_Mutation_sceneDecrementO_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SceneDecrementO(childComplexity, args["id"].(string)), true

	case "Mutation.sceneDestroy":
		if e.complexity.Mutation.SceneDestroy == nil {
			break
		}

		args, err := ec.field_Mutation_sceneDestroy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SceneDestroy(childComplexity, args["input"].(SceneDestroyInput)), true

	case "Mutation.sceneGenerateScreenshot":
		if e.complexity.Mutation.SceneGenerateScreenshot == nil {
			break
		}

		args, err := ec.field_Mutation_sceneGenerateScreenshot_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SceneGenerateScreenshot(childComplexity, args["id"].(string), args["at"].(*float64)), true

	case "Mutation.sceneIncrementO":
		if e.complexity.Mutation.SceneIncrementO == nil {
			break
		}

		args, err := ec.field_Mutation_sceneIncrementO_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SceneIncrementO(childComplexity, args["id"].(string)), true

	case "Mutation.sceneMarkerCreate":
		if e.complexity.Mutation.SceneMarkerCreate == nil {
			break
		}

		args, err := ec.field_Mutation_sceneMarkerCreate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SceneMarkerCreate(childComplexity, args["input"].(SceneMarkerCreateInput)), true

	case "Mutation.sceneMarkerDestroy":
		if e.complexity.Mutation.SceneMarkerDestroy == nil {
			break
		}

		args, err := ec.field_Mutation_sceneMarkerDestroy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SceneMarkerDestroy(childComplexity, args["id"].(string)), true

	case "Mutation.sceneMarkerUpdate":
		if e.complexity.Mutation.SceneMarkerUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_sceneMarkerUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SceneMarkerUpdate(childComplexity, args["input"].(SceneMarkerUpdateInput)), true

	case "Mutation.sceneResetO":
		if e.complexity.Mutation.SceneResetO == nil {
			break
		}

		args, err := ec.field_Mutation_sceneResetO_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SceneResetO(childComplexity, args["id"].(string)), true

	case "Mutation.sceneUpdate":
		if e.complexity.Mutation.SceneUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_sceneUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SceneUpdate(childComplexity, args["input"].(SceneUpdateInput)), true

	case "Mutation.scenesDestroy":
		if e.complexity.Mutation.ScenesDestroy == nil {
			break
		}

		args, err := ec.field_Mutation_scenesDestroy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ScenesDestroy(childComplexity, args["input"].(ScenesDestroyInput)), true

	case "Mutation.scenesUpdate":
		if e.complexity.Mutation.ScenesUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_scenesUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ScenesUpdate(childComplexity, args["input"].([]*SceneUpdateInput)), true

	case "Mutation.setDefaultFilter":
		if e.complexity.Mutation.SetDefaultFilter == nil {
			break
		}

		args, err := ec.field_Mutation_setDefaultFilter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetDefaultFilter(childComplexity, args["input"].(SetDefaultFilterInput)), true

	case "Mutation.setup":
		if e.complexity.Mutation.Setup == nil {
			break
		}

		args, err := ec.field_Mutation_setup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Setup(childComplexity, args["input"].(SetupInput)), true

	case "Mutation.stashBoxBatchPerformerTag":
		if e.complexity.Mutation.StashBoxBatchPerformerTag == nil {
			break
		}

		args, err := ec.field_Mutation_stashBoxBatchPerformerTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StashBoxBatchPerformerTag(childComplexity, args["input"].(StashBoxBatchPerformerTagInput)), true

	case "Mutation.stopAllJobs":
		if e.complexity.Mutation.StopAllJobs == nil {
			break
		}

		return e.complexity.Mutation.StopAllJobs(childComplexity), true

	case "Mutation.stopJob":
		if e.complexity.Mutation.StopJob == nil {
			break
		}

		args, err := ec.field_Mutation_stopJob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StopJob(childComplexity, args["job_id"].(string)), true

	case "Mutation.studioCreate":
		if e.complexity.Mutation.StudioCreate == nil {
			break
		}

		args, err := ec.field_Mutation_studioCreate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StudioCreate(childComplexity, args["input"].(StudioCreateInput)), true

	case "Mutation.studioDestroy":
		if e.complexity.Mutation.StudioDestroy == nil {
			break
		}

		args, err := ec.field_Mutation_studioDestroy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StudioDestroy(childComplexity, args["input"].(StudioDestroyInput)), true

	case "Mutation.studioUpdate":
		if e.complexity.Mutation.StudioUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_studioUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StudioUpdate(childComplexity, args["input"].(StudioUpdateInput)), true

	case "Mutation.studiosDestroy":
		if e.complexity.Mutation.StudiosDestroy == nil {
			break
		}

		args, err := ec.field_Mutation_studiosDestroy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StudiosDestroy(childComplexity, args["ids"].([]string)), true

	case "Mutation.submitStashBoxFingerprints":
		if e.complexity.Mutation.SubmitStashBoxFingerprints == nil {
			break
		}

		args, err := ec.field_Mutation_submitStashBoxFingerprints_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SubmitStashBoxFingerprints(childComplexity, args["input"].(StashBoxFingerprintSubmissionInput)), true

	case "Mutation.submitStashBoxPerformerDraft":
		if e.complexity.Mutation.SubmitStashBoxPerformerDraft == nil {
			break
		}

		args, err := ec.field_Mutation_submitStashBoxPerformerDraft_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SubmitStashBoxPerformerDraft(childComplexity, args["input"].(StashBoxDraftSubmissionInput)), true

	case "Mutation.submitStashBoxSceneDraft":
		if e.complexity.Mutation.SubmitStashBoxSceneDraft == nil {
			break
		}

		args, err := ec.field_Mutation_submitStashBoxSceneDraft_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SubmitStashBoxSceneDraft(childComplexity, args["input"].(StashBoxDraftSubmissionInput)), true

	case "Mutation.tagCreate":
		if e.complexity.Mutation.TagCreate == nil {
			break
		}

		args, err := ec.field_Mutation_tagCreate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TagCreate(childComplexity, args["input"].(TagCreateInput)), true

	case "Mutation.tagDestroy":
		if e.complexity.Mutation.TagDestroy == nil {
			break
		}

		args, err := ec.field_Mutation_tagDestroy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TagDestroy(childComplexity, args["input"].(TagDestroyInput)), true

	case "Mutation.tagUpdate":
		if e.complexity.Mutation.TagUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_tagUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TagUpdate(childComplexity, args["input"].(TagUpdateInput)), true

	case "Mutation.tagsDestroy":
		if e.complexity.Mutation.TagsDestroy == nil {
			break
		}

		args, err := ec.field_Mutation_tagsDestroy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TagsDestroy(childComplexity, args["ids"].([]string)), true

	case "Mutation.tagsMerge":
		if e.complexity.Mutation.TagsMerge == nil {
			break
		}

		args, err := ec.field_Mutation_tagsMerge_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TagsMerge(childComplexity, args["input"].(TagsMergeInput)), true

	case "Performer.aliases":
		if e.complexity.Performer.Aliases == nil {
			break
		}

		return e.complexity.Performer.Aliases(childComplexity), true

	case "Performer.birthdate":
		if e.complexity.Performer.Birthdate == nil {
			break
		}

		return e.complexity.Performer.Birthdate(childComplexity), true

	case "Performer.career_length":
		if e.complexity.Performer.CareerLength == nil {
			break
		}

		return e.complexity.Performer.CareerLength(childComplexity), true

	case "Performer.checksum":
		if e.complexity.Performer.Checksum == nil {
			break
		}

		return e.complexity.Performer.Checksum(childComplexity), true

	case "Performer.country":
		if e.complexity.Performer.Country == nil {
			break
		}

		return e.complexity.Performer.Country(childComplexity), true

	case "Performer.created_at":
		if e.complexity.Performer.CreatedAt == nil {
			break
		}

		return e.complexity.Performer.CreatedAt(childComplexity), true

	case "Performer.death_date":
		if e.complexity.Performer.DeathDate == nil {
			break
		}

		return e.complexity.Performer.DeathDate(childComplexity), true

	case "Performer.details":
		if e.complexity.Performer.Details == nil {
			break
		}

		return e.complexity.Performer.Details(childComplexity), true

	case "Performer.ethnicity":
		if e.complexity.Performer.Ethnicity == nil {
			break
		}

		return e.complexity.Performer.Ethnicity(childComplexity), true

	case "Performer.eye_color":
		if e.complexity.Performer.EyeColor == nil {
			break
		}

		return e.complexity.Performer.EyeColor(childComplexity), true

	case "Performer.fake_tits":
		if e.complexity.Performer.FakeTits == nil {
			break
		}

		return e.complexity.Performer.FakeTits(childComplexity), true

	case "Performer.favorite":
		if e.complexity.Performer.Favorite == nil {
			break
		}

		return e.complexity.Performer.Favorite(childComplexity), true

	case "Performer.gallery_count":
		if e.complexity.Performer.GalleryCount == nil {
			break
		}

		return e.complexity.Performer.GalleryCount(childComplexity), true

	case "Performer.gender":
		if e.complexity.Performer.Gender == nil {
			break
		}

		return e.complexity.Performer.Gender(childComplexity), true

	case "Performer.hair_color":
		if e.complexity.Performer.HairColor == nil {
			break
		}

		return e.complexity.Performer.HairColor(childComplexity), true

	case "Performer.height":
		if e.complexity.Performer.Height == nil {
			break
		}

		return e.complexity.Performer.Height(childComplexity), true

	case "Performer.id":
		if e.complexity.Performer.ID == nil {
			break
		}

		return e.complexity.Performer.ID(childComplexity), true

	case "Performer.ignore_auto_tag":
		if e.complexity.Performer.IgnoreAutoTag == nil {
			break
		}

		return e.complexity.Performer.IgnoreAutoTag(childComplexity), true

	case "Performer.image_count":
		if e.complexity.Performer.ImageCount == nil {
			break
		}

		return e.complexity.Performer.ImageCount(childComplexity), true

	case "Performer.image_path":
		if e.complexity.Performer.ImagePath == nil {
			break
		}

		return e.complexity.Performer.ImagePath(childComplexity), true

	case "Performer.instagram":
		if e.complexity.Performer.Instagram == nil {
			break
		}

		return e.complexity.Performer.Instagram(childComplexity), true

	case "Performer.measurements":
		if e.complexity.Performer.Measurements == nil {
			break
		}

		return e.complexity.Performer.Measurements(childComplexity), true

	case "Performer.movie_count":
		if e.complexity.Performer.MovieCount == nil {
			break
		}

		return e.complexity.Performer.MovieCount(childComplexity), true

	case "Performer.movies":
		if e.complexity.Performer.Movies == nil {
			break
		}

		return e.complexity.Performer.Movies(childComplexity), true

	case "Performer.name":
		if e.complexity.Performer.Name == nil {
			break
		}

		return e.complexity.Performer.Name(childComplexity), true

	case "Performer.piercings":
		if e.complexity.Performer.Piercings == nil {
			break
		}

		return e.complexity.Performer.Piercings(childComplexity), true

	case "Performer.rating":
		if e.complexity.Performer.Rating == nil {
			break
		}

		return e.complexity.Performer.Rating(childComplexity), true

	case "Performer.scene_count":
		if e.complexity.Performer.SceneCount == nil {
			break
		}

		return e.complexity.Performer.SceneCount(childComplexity), true

	case "Performer.scenes":
		if e.complexity.Performer.Scenes == nil {
			break
		}

		return e.complexity.Performer.Scenes(childComplexity), true

	case "Performer.stash_ids":
		if e.complexity.Performer.StashIds == nil {
			break
		}

		return e.complexity.Performer.StashIds(childComplexity), true

	case "Performer.tags":
		if e.complexity.Performer.Tags == nil {
			break
		}

		return e.complexity.Performer.Tags(childComplexity), true

	case "Performer.tattoos":
		if e.complexity.Performer.Tattoos == nil {
			break
		}

		return e.complexity.Performer.Tattoos(childComplexity), true

	case "Performer.twitter":
		if e.complexity.Performer.Twitter == nil {
			break
		}

		return e.complexity.Performer.Twitter(childComplexity), true

	case "Performer.url":
		if e.complexity.Performer.URL == nil {
			break
		}

		return e.complexity.Performer.URL(childComplexity), true

	case "Performer.updated_at":
		if e.complexity.Performer.UpdatedAt == nil {
			break
		}

		return e.complexity.Performer.UpdatedAt(childComplexity), true

	case "Performer.weight":
		if e.complexity.Performer.Weight == nil {
			break
		}

		return e.complexity.Performer.Weight(childComplexity), true

	case "Plugin.description":
		if e.complexity.Plugin.Description == nil {
			break
		}

		return e.complexity.Plugin.Description(childComplexity), true

	case "Plugin.hooks":
		if e.complexity.Plugin.Hooks == nil {
			break
		}

		return e.complexity.Plugin.Hooks(childComplexity), true

	case "Plugin.id":
		if e.complexity.Plugin.ID == nil {
			break
		}

		return e.complexity.Plugin.ID(childComplexity), true

	case "Plugin.name":
		if e.complexity.Plugin.Name == nil {
			break
		}

		return e.complexity.Plugin.Name(childComplexity), true

	case "Plugin.tasks":
		if e.complexity.Plugin.Tasks == nil {
			break
		}

		return e.complexity.Plugin.Tasks(childComplexity), true

	case "Plugin.url":
		if e.complexity.Plugin.URL == nil {
			break
		}

		return e.complexity.Plugin.URL(childComplexity), true

	case "Plugin.version":
		if e.complexity.Plugin.Version == nil {
			break
		}

		return e.complexity.Plugin.Version(childComplexity), true

	case "PluginHook.description":
		if e.complexity.PluginHook.Description == nil {
			break
		}

		return e.complexity.PluginHook.Description(childComplexity), true

	case "PluginHook.hooks":
		if e.complexity.PluginHook.Hooks == nil {
			break
		}

		return e.complexity.PluginHook.Hooks(childComplexity), true

	case "PluginHook.name":
		if e.complexity.PluginHook.Name == nil {
			break
		}

		return e.complexity.PluginHook.Name(childComplexity), true

	case "PluginHook.plugin":
		if e.complexity.PluginHook.Plugin == nil {
			break
		}

		return e.complexity.PluginHook.Plugin(childComplexity), true

	case "PluginResult.error":
		if e.complexity.PluginResult.Error == nil {
			break
		}

		return e.complexity.PluginResult.Error(childComplexity), true

	case "PluginResult.result":
		if e.complexity.PluginResult.Result == nil {
			break
		}

		return e.complexity.PluginResult.Result(childComplexity), true

	case "PluginTask.description":
		if e.complexity.PluginTask.Description == nil {
			break
		}

		return e.complexity.PluginTask.Description(childComplexity), true

	case "PluginTask.name":
		if e.complexity.PluginTask.Name == nil {
			break
		}

		return e.complexity.PluginTask.Name(childComplexity), true

	case "PluginTask.plugin":
		if e.complexity.PluginTask.Plugin == nil {
			break
		}

		return e.complexity.PluginTask.Plugin(childComplexity), true

	case "Query.allMovies":
		if e.complexity.Query.AllMovies == nil {
			break
		}

		return e.complexity.Query.AllMovies(childComplexity), true

	case "Query.allPerformers":
		if e.complexity.Query.AllPerformers == nil {
			break
		}

		return e.complexity.Query.AllPerformers(childComplexity), true

	case "Query.allStudios":
		if e.complexity.Query.AllStudios == nil {
			break
		}

		return e.complexity.Query.AllStudios(childComplexity), true

	case "Query.allTags":
		if e.complexity.Query.AllTags == nil {
			break
		}

		return e.complexity.Query.AllTags(childComplexity), true

	case "Query.configuration":
		if e.complexity.Query.Configuration == nil {
			break
		}

		return e.complexity.Query.Configuration(childComplexity), true

	case "Query.directory":
		if e.complexity.Query.Directory == nil {
			break
		}

		args, err := ec.field_Query_directory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Directory(childComplexity, args["path"].(*string), args["locale"].(*string)), true

	case "Query.dlnaStatus":
		if e.complexity.Query.DlnaStatus == nil {
			break
		}

		return e.complexity.Query.DlnaStatus(childComplexity), true

	case "Query.findDefaultFilter":
		if e.complexity.Query.FindDefaultFilter == nil {
			break
		}

		args, err := ec.field_Query_findDefaultFilter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindDefaultFilter(childComplexity, args["mode"].(FilterMode)), true

	case "Query.findDuplicateScenes":
		if e.complexity.Query.FindDuplicateScenes == nil {
			break
		}

		args, err := ec.field_Query_findDuplicateScenes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindDuplicateScenes(childComplexity, args["distance"].(*int)), true

	case "Query.findGalleries":
		if e.complexity.Query.FindGalleries == nil {
			break
		}

		args, err := ec.field_Query_findGalleries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindGalleries(childComplexity, args["gallery_filter"].(*GalleryFilterType), args["filter"].(*FindFilterType)), true

	case "Query.findGallery":
		if e.complexity.Query.FindGallery == nil {
			break
		}

		args, err := ec.field_Query_findGallery_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindGallery(childComplexity, args["id"].(string)), true

	case "Query.findImage":
		if e.complexity.Query.FindImage == nil {
			break
		}

		args, err := ec.field_Query_findImage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindImage(childComplexity, args["id"].(*string), args["checksum"].(*string)), true

	case "Query.findImages":
		if e.complexity.Query.FindImages == nil {
			break
		}

		args, err := ec.field_Query_findImages_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindImages(childComplexity, args["image_filter"].(*ImageFilterType), args["image_ids"].([]int), args["filter"].(*FindFilterType)), true

	case "Query.findJob":
		if e.complexity.Query.FindJob == nil {
			break
		}

		args, err := ec.field_Query_findJob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindJob(childComplexity, args["input"].(FindJobInput)), true

	case "Query.findMovie":
		if e.complexity.Query.FindMovie == nil {
			break
		}

		args, err := ec.field_Query_findMovie_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMovie(childComplexity, args["id"].(string)), true

	case "Query.findMovies":
		if e.complexity.Query.FindMovies == nil {
			break
		}

		args, err := ec.field_Query_findMovies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMovies(childComplexity, args["movie_filter"].(*MovieFilterType), args["filter"].(*FindFilterType)), true

	case "Query.findPerformer":
		if e.complexity.Query.FindPerformer == nil {
			break
		}

		args, err := ec.field_Query_findPerformer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindPerformer(childComplexity, args["id"].(string)), true

	case "Query.findPerformers":
		if e.complexity.Query.FindPerformers == nil {
			break
		}

		args, err := ec.field_Query_findPerformers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindPerformers(childComplexity, args["performer_filter"].(*PerformerFilterType), args["filter"].(*FindFilterType)), true

	case "Query.findSavedFilter":
		if e.complexity.Query.FindSavedFilter == nil {
			break
		}

		args, err := ec.field_Query_findSavedFilter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindSavedFilter(childComplexity, args["id"].(string)), true

	case "Query.findSavedFilters":
		if e.complexity.Query.FindSavedFilters == nil {
			break
		}

		args, err := ec.field_Query_findSavedFilters_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindSavedFilters(childComplexity, args["mode"].(*FilterMode)), true

	case "Query.findScene":
		if e.complexity.Query.FindScene == nil {
			break
		}

		args, err := ec.field_Query_findScene_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindScene(childComplexity, args["id"].(*string), args["checksum"].(*string)), true

	case "Query.findSceneByHash":
		if e.complexity.Query.FindSceneByHash == nil {
			break
		}

		args, err := ec.field_Query_findSceneByHash_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindSceneByHash(childComplexity, args["input"].(SceneHashInput)), true

	case "Query.findSceneMarkers":
		if e.complexity.Query.FindSceneMarkers == nil {
			break
		}

		args, err := ec.field_Query_findSceneMarkers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindSceneMarkers(childComplexity, args["scene_marker_filter"].(*SceneMarkerFilterType), args["filter"].(*FindFilterType)), true

	case "Query.findScenes":
		if e.complexity.Query.FindScenes == nil {
			break
		}

		args, err := ec.field_Query_findScenes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindScenes(childComplexity, args["scene_filter"].(*SceneFilterType), args["scene_ids"].([]int), args["filter"].(*FindFilterType)), true

	case "Query.findScenesByPathRegex":
		if e.complexity.Query.FindScenesByPathRegex == nil {
			break
		}

		args, err := ec.field_Query_findScenesByPathRegex_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindScenesByPathRegex(childComplexity, args["filter"].(*FindFilterType)), true

	case "Query.findStudio":
		if e.complexity.Query.FindStudio == nil {
			break
		}

		args, err := ec.field_Query_findStudio_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindStudio(childComplexity, args["id"].(string)), true

	case "Query.findStudios":
		if e.complexity.Query.FindStudios == nil {
			break
		}

		args, err := ec.field_Query_findStudios_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindStudios(childComplexity, args["studio_filter"].(*StudioFilterType), args["filter"].(*FindFilterType)), true

	case "Query.findTag":
		if e.complexity.Query.FindTag == nil {
			break
		}

		args, err := ec.field_Query_findTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindTag(childComplexity, args["id"].(string)), true

	case "Query.findTags":
		if e.complexity.Query.FindTags == nil {
			break
		}

		args, err := ec.field_Query_findTags_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindTags(childComplexity, args["tag_filter"].(*TagFilterType), args["filter"].(*FindFilterType)), true

	case "Query.jobQueue":
		if e.complexity.Query.JobQueue == nil {
			break
		}

		return e.complexity.Query.JobQueue(childComplexity), true

	case "Query.latestversion":
		if e.complexity.Query.Latestversion == nil {
			break
		}

		return e.complexity.Query.Latestversion(childComplexity), true

	case "Query.listGalleryScrapers":
		if e.complexity.Query.ListGalleryScrapers == nil {
			break
		}

		return e.complexity.Query.ListGalleryScrapers(childComplexity), true

	case "Query.listMovieScrapers":
		if e.complexity.Query.ListMovieScrapers == nil {
			break
		}

		return e.complexity.Query.ListMovieScrapers(childComplexity), true

	case "Query.listPerformerScrapers":
		if e.complexity.Query.ListPerformerScrapers == nil {
			break
		}

		return e.complexity.Query.ListPerformerScrapers(childComplexity), true

	case "Query.listSceneScrapers":
		if e.complexity.Query.ListSceneScrapers == nil {
			break
		}

		return e.complexity.Query.ListSceneScrapers(childComplexity), true

	case "Query.listScrapers":
		if e.complexity.Query.ListScrapers == nil {
			break
		}

		args, err := ec.field_Query_listScrapers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListScrapers(childComplexity, args["types"].([]ScrapeContentType)), true

	case "Query.logs":
		if e.complexity.Query.Logs == nil {
			break
		}

		return e.complexity.Query.Logs(childComplexity), true

	case "Query.markerStrings":
		if e.complexity.Query.MarkerStrings == nil {
			break
		}

		args, err := ec.field_Query_markerStrings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MarkerStrings(childComplexity, args["q"].(*string), args["sort"].(*string)), true

	case "Query.markerWall":
		if e.complexity.Query.MarkerWall == nil {
			break
		}

		args, err := ec.field_Query_markerWall_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MarkerWall(childComplexity, args["q"].(*string)), true

	case "Query.parseSceneFilenames":
		if e.complexity.Query.ParseSceneFilenames == nil {
			break
		}

		args, err := ec.field_Query_parseSceneFilenames_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ParseSceneFilenames(childComplexity, args["filter"].(*FindFilterType), args["config"].(SceneParserInput)), true

	case "Query.pluginTasks":
		if e.complexity.Query.PluginTasks == nil {
			break
		}

		return e.complexity.Query.PluginTasks(childComplexity), true

	case "Query.plugins":
		if e.complexity.Query.Plugins == nil {
			break
		}

		return e.complexity.Query.Plugins(childComplexity), true

	case "Query.sceneMarkerTags":
		if e.complexity.Query.SceneMarkerTags == nil {
			break
		}

		args, err := ec.field_Query_sceneMarkerTags_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SceneMarkerTags(childComplexity, args["scene_id"].(string)), true

	case "Query.sceneStreams":
		if e.complexity.Query.SceneStreams == nil {
			break
		}

		args, err := ec.field_Query_sceneStreams_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SceneStreams(childComplexity, args["id"].(*string)), true

	case "Query.sceneWall":
		if e.complexity.Query.SceneWall == nil {
			break
		}

		args, err := ec.field_Query_sceneWall_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SceneWall(childComplexity, args["q"].(*string)), true

	case "Query.scrapeFreeonesPerformerList":
		if e.complexity.Query.ScrapeFreeonesPerformerList == nil {
			break
		}

		args, err := ec.field_Query_scrapeFreeonesPerformerList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ScrapeFreeonesPerformerList(childComplexity, args["query"].(string)), true

	case "Query.scrapeGallery":
		if e.complexity.Query.ScrapeGallery == nil {
			break
		}

		args, err := ec.field_Query_scrapeGallery_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ScrapeGallery(childComplexity, args["scraper_id"].(string), args["gallery"].(GalleryUpdateInput)), true

	case "Query.scrapeGalleryURL":
		if e.complexity.Query.ScrapeGalleryURL == nil {
			break
		}

		args, err := ec.field_Query_scrapeGalleryURL_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ScrapeGalleryURL(childComplexity, args["url"].(string)), true

	case "Query.scrapeMovieURL":
		if e.complexity.Query.ScrapeMovieURL == nil {
			break
		}

		args, err := ec.field_Query_scrapeMovieURL_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ScrapeMovieURL(childComplexity, args["url"].(string)), true

	case "Query.scrapeMultiPerformers":
		if e.complexity.Query.ScrapeMultiPerformers == nil {
			break
		}

		args, err := ec.field_Query_scrapeMultiPerformers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ScrapeMultiPerformers(childComplexity, args["source"].(ScraperSourceInput), args["input"].(ScrapeMultiPerformersInput)), true

	case "Query.scrapeMultiScenes":
		if e.complexity.Query.ScrapeMultiScenes == nil {
			break
		}

		args, err := ec.field_Query_scrapeMultiScenes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ScrapeMultiScenes(childComplexity, args["source"].(ScraperSourceInput), args["input"].(ScrapeMultiScenesInput)), true

	case "Query.scrapePerformer":
		if e.complexity.Query.ScrapePerformer == nil {
			break
		}

		args, err := ec.field_Query_scrapePerformer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ScrapePerformer(childComplexity, args["scraper_id"].(string), args["scraped_performer"].(ScrapedPerformerInput)), true

	case "Query.scrapePerformerList":
		if e.complexity.Query.ScrapePerformerList == nil {
			break
		}

		args, err := ec.field_Query_scrapePerformerList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ScrapePerformerList(childComplexity, args["scraper_id"].(string), args["query"].(string)), true

	case "Query.scrapePerformerURL":
		if e.complexity.Query.ScrapePerformerURL == nil {
			break
		}

		args, err := ec.field_Query_scrapePerformerURL_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ScrapePerformerURL(childComplexity, args["url"].(string)), true

	case "Query.scrapeScene":
		if e.complexity.Query.ScrapeScene == nil {
			break
		}

		args, err := ec.field_Query_scrapeScene_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ScrapeScene(childComplexity, args["scraper_id"].(string), args["scene"].(SceneUpdateInput)), true

	case "Query.scrapeSceneURL":
		if e.complexity.Query.ScrapeSceneURL == nil {
			break
		}

		args, err := ec.field_Query_scrapeSceneURL_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ScrapeSceneURL(childComplexity, args["url"].(string)), true

	case "Query.scrapeSingleGallery":
		if e.complexity.Query.ScrapeSingleGallery == nil {
			break
		}

		args, err := ec.field_Query_scrapeSingleGallery_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ScrapeSingleGallery(childComplexity, args["source"].(ScraperSourceInput), args["input"].(ScrapeSingleGalleryInput)), true

	case "Query.scrapeSingleMovie":
		if e.complexity.Query.ScrapeSingleMovie == nil {
			break
		}

		args, err := ec.field_Query_scrapeSingleMovie_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ScrapeSingleMovie(childComplexity, args["source"].(ScraperSourceInput), args["input"].(ScrapeSingleMovieInput)), true

	case "Query.scrapeSinglePerformer":
		if e.complexity.Query.ScrapeSinglePerformer == nil {
			break
		}

		args, err := ec.field_Query_scrapeSinglePerformer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ScrapeSinglePerformer(childComplexity, args["source"].(ScraperSourceInput), args["input"].(ScrapeSinglePerformerInput)), true

	case "Query.scrapeSingleScene":
		if e.complexity.Query.ScrapeSingleScene == nil {
			break
		}

		args, err := ec.field_Query_scrapeSingleScene_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ScrapeSingleScene(childComplexity, args["source"].(ScraperSourceInput), args["input"].(ScrapeSingleSceneInput)), true

	case "Query.scrapeURL":
		if e.complexity.Query.ScrapeURL == nil {
			break
		}

		args, err := ec.field_Query_scrapeURL_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ScrapeURL(childComplexity, args["url"].(string), args["ty"].(ScrapeContentType)), true

	case "Query.stats":
		if e.complexity.Query.Stats == nil {
			break
		}

		return e.complexity.Query.Stats(childComplexity), true

	case "Query.systemStatus":
		if e.complexity.Query.SystemStatus == nil {
			break
		}

		return e.complexity.Query.SystemStatus(childComplexity), true

	case "Query.validateStashBoxCredentials":
		if e.complexity.Query.ValidateStashBoxCredentials == nil {
			break
		}

		args, err := ec.field_Query_validateStashBoxCredentials_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ValidateStashBoxCredentials(childComplexity, args["input"].(StashBoxInput)), true

	case "Query.version":
		if e.complexity.Query.Version == nil {
			break
		}

		return e.complexity.Query.Version(childComplexity), true

	case "SavedFilter.filter":
		if e.complexity.SavedFilter.Filter == nil {
			break
		}

		return e.complexity.SavedFilter.Filter(childComplexity), true

	case "SavedFilter.id":
		if e.complexity.SavedFilter.ID == nil {
			break
		}

		return e.complexity.SavedFilter.ID(childComplexity), true

	case "SavedFilter.mode":
		if e.complexity.SavedFilter.Mode == nil {
			break
		}

		return e.complexity.SavedFilter.Mode(childComplexity), true

	case "SavedFilter.name":
		if e.complexity.SavedFilter.Name == nil {
			break
		}

		return e.complexity.SavedFilter.Name(childComplexity), true

	case "ScanMetadataOptions.scanGenerateImagePreviews":
		if e.complexity.ScanMetadataOptions.ScanGenerateImagePreviews == nil {
			break
		}

		return e.complexity.ScanMetadataOptions.ScanGenerateImagePreviews(childComplexity), true

	case "ScanMetadataOptions.scanGeneratePhashes":
		if e.complexity.ScanMetadataOptions.ScanGeneratePhashes == nil {
			break
		}

		return e.complexity.ScanMetadataOptions.ScanGeneratePhashes(childComplexity), true

	case "ScanMetadataOptions.scanGeneratePreviews":
		if e.complexity.ScanMetadataOptions.ScanGeneratePreviews == nil {
			break
		}

		return e.complexity.ScanMetadataOptions.ScanGeneratePreviews(childComplexity), true

	case "ScanMetadataOptions.scanGenerateSprites":
		if e.complexity.ScanMetadataOptions.ScanGenerateSprites == nil {
			break
		}

		return e.complexity.ScanMetadataOptions.ScanGenerateSprites(childComplexity), true

	case "ScanMetadataOptions.scanGenerateThumbnails":
		if e.complexity.ScanMetadataOptions.ScanGenerateThumbnails == nil {
			break
		}

		return e.complexity.ScanMetadataOptions.ScanGenerateThumbnails(childComplexity), true

	case "ScanMetadataOptions.stripFileExtension":
		if e.complexity.ScanMetadataOptions.StripFileExtension == nil {
			break
		}

		return e.complexity.ScanMetadataOptions.StripFileExtension(childComplexity), true

	case "ScanMetadataOptions.useFileMetadata":
		if e.complexity.ScanMetadataOptions.UseFileMetadata == nil {
			break
		}

		return e.complexity.ScanMetadataOptions.UseFileMetadata(childComplexity), true

	case "Scene.captions":
		if e.complexity.Scene.Captions == nil {
			break
		}

		return e.complexity.Scene.Captions(childComplexity), true

	case "Scene.checksum":
		if e.complexity.Scene.Checksum == nil {
			break
		}

		return e.complexity.Scene.Checksum(childComplexity), true

	case "Scene.created_at":
		if e.complexity.Scene.CreatedAt == nil {
			break
		}

		return e.complexity.Scene.CreatedAt(childComplexity), true

	case "Scene.date":
		if e.complexity.Scene.Date == nil {
			break
		}

		return e.complexity.Scene.Date(childComplexity), true

	case "Scene.details":
		if e.complexity.Scene.Details == nil {
			break
		}

		return e.complexity.Scene.Details(childComplexity), true

	case "Scene.file":
		if e.complexity.Scene.File == nil {
			break
		}

		return e.complexity.Scene.File(childComplexity), true

	case "Scene.file_mod_time":
		if e.complexity.Scene.FileModTime == nil {
			break
		}

		return e.complexity.Scene.FileModTime(childComplexity), true

	case "Scene.galleries":
		if e.complexity.Scene.Galleries == nil {
			break
		}

		return e.complexity.Scene.Galleries(childComplexity), true

	case "Scene.id":
		if e.complexity.Scene.ID == nil {
			break
		}

		return e.complexity.Scene.ID(childComplexity), true

	case "Scene.interactive":
		if e.complexity.Scene.Interactive == nil {
			break
		}

		return e.complexity.Scene.Interactive(childComplexity), true

	case "Scene.interactive_speed":
		if e.complexity.Scene.InteractiveSpeed == nil {
			break
		}

		return e.complexity.Scene.InteractiveSpeed(childComplexity), true

	case "Scene.movies":
		if e.complexity.Scene.Movies == nil {
			break
		}

		return e.complexity.Scene.Movies(childComplexity), true

	case "Scene.o_counter":
		if e.complexity.Scene.OCounter == nil {
			break
		}

		return e.complexity.Scene.OCounter(childComplexity), true

	case "Scene.organized":
		if e.complexity.Scene.Organized == nil {
			break
		}

		return e.complexity.Scene.Organized(childComplexity), true

	case "Scene.oshash":
		if e.complexity.Scene.Oshash == nil {
			break
		}

		return e.complexity.Scene.Oshash(childComplexity), true

	case "Scene.path":
		if e.complexity.Scene.Path == nil {
			break
		}

		return e.complexity.Scene.Path(childComplexity), true

	case "Scene.paths":
		if e.complexity.Scene.Paths == nil {
			break
		}

		return e.complexity.Scene.Paths(childComplexity), true

	case "Scene.performers":
		if e.complexity.Scene.Performers == nil {
			break
		}

		return e.complexity.Scene.Performers(childComplexity), true

	case "Scene.phash":
		if e.complexity.Scene.Phash == nil {
			break
		}

		return e.complexity.Scene.Phash(childComplexity), true

	case "Scene.rating":
		if e.complexity.Scene.Rating == nil {
			break
		}

		return e.complexity.Scene.Rating(childComplexity), true

	case "Scene.scene_markers":
		if e.complexity.Scene.SceneMarkers == nil {
			break
		}

		return e.complexity.Scene.SceneMarkers(childComplexity), true

	case "Scene.sceneStreams":
		if e.complexity.Scene.SceneStreams == nil {
			break
		}

		return e.complexity.Scene.SceneStreams(childComplexity), true

	case "Scene.stash_ids":
		if e.complexity.Scene.StashIds == nil {
			break
		}

		return e.complexity.Scene.StashIds(childComplexity), true

	case "Scene.studio":
		if e.complexity.Scene.Studio == nil {
			break
		}

		return e.complexity.Scene.Studio(childComplexity), true

	case "Scene.tags":
		if e.complexity.Scene.Tags == nil {
			break
		}

		return e.complexity.Scene.Tags(childComplexity), true

	case "Scene.title":
		if e.complexity.Scene.Title == nil {
			break
		}

		return e.complexity.Scene.Title(childComplexity), true

	case "Scene.url":
		if e.complexity.Scene.URL == nil {
			break
		}

		return e.complexity.Scene.URL(childComplexity), true

	case "Scene.updated_at":
		if e.complexity.Scene.UpdatedAt == nil {
			break
		}

		return e.complexity.Scene.UpdatedAt(childComplexity), true

	case "SceneCaption.caption_type":
		if e.complexity.SceneCaption.CaptionType == nil {
			break
		}

		return e.complexity.SceneCaption.CaptionType(childComplexity), true

	case "SceneCaption.language_code":
		if e.complexity.SceneCaption.LanguageCode == nil {
			break
		}

		return e.complexity.SceneCaption.LanguageCode(childComplexity), true

	case "SceneFileType.audio_codec":
		if e.complexity.SceneFileType.AudioCodec == nil {
			break
		}

		return e.complexity.SceneFileType.AudioCodec(childComplexity), true

	case "SceneFileType.bitrate":
		if e.complexity.SceneFileType.Bitrate == nil {
			break
		}

		return e.complexity.SceneFileType.Bitrate(childComplexity), true

	case "SceneFileType.duration":
		if e.complexity.SceneFileType.Duration == nil {
			break
		}

		return e.complexity.SceneFileType.Duration(childComplexity), true

	case "SceneFileType.framerate":
		if e.complexity.SceneFileType.Framerate == nil {
			break
		}

		return e.complexity.SceneFileType.Framerate(childComplexity), true

	case "SceneFileType.height":
		if e.complexity.SceneFileType.Height == nil {
			break
		}

		return e.complexity.SceneFileType.Height(childComplexity), true

	case "SceneFileType.size":
		if e.complexity.SceneFileType.Size == nil {
			break
		}

		return e.complexity.SceneFileType.Size(childComplexity), true

	case "SceneFileType.video_codec":
		if e.complexity.SceneFileType.VideoCodec == nil {
			break
		}

		return e.complexity.SceneFileType.VideoCodec(childComplexity), true

	case "SceneFileType.width":
		if e.complexity.SceneFileType.Width == nil {
			break
		}

		return e.complexity.SceneFileType.Width(childComplexity), true

	case "SceneMarker.created_at":
		if e.complexity.SceneMarker.CreatedAt == nil {
			break
		}

		return e.complexity.SceneMarker.CreatedAt(childComplexity), true

	case "SceneMarker.id":
		if e.complexity.SceneMarker.ID == nil {
			break
		}

		return e.complexity.SceneMarker.ID(childComplexity), true

	case "SceneMarker.preview":
		if e.complexity.SceneMarker.Preview == nil {
			break
		}

		return e.complexity.SceneMarker.Preview(childComplexity), true

	case "SceneMarker.primary_tag":
		if e.complexity.SceneMarker.PrimaryTag == nil {
			break
		}

		return e.complexity.SceneMarker.PrimaryTag(childComplexity), true

	case "SceneMarker.scene":
		if e.complexity.SceneMarker.Scene == nil {
			break
		}

		return e.complexity.SceneMarker.Scene(childComplexity), true

	case "SceneMarker.screenshot":
		if e.complexity.SceneMarker.Screenshot == nil {
			break
		}

		return e.complexity.SceneMarker.Screenshot(childComplexity), true

	case "SceneMarker.seconds":
		if e.complexity.SceneMarker.Seconds == nil {
			break
		}

		return e.complexity.SceneMarker.Seconds(childComplexity), true

	case "SceneMarker.stream":
		if e.complexity.SceneMarker.Stream == nil {
			break
		}

		return e.complexity.SceneMarker.Stream(childComplexity), true

	case "SceneMarker.tags":
		if e.complexity.SceneMarker.Tags == nil {
			break
		}

		return e.complexity.SceneMarker.Tags(childComplexity), true

	case "SceneMarker.title":
		if e.complexity.SceneMarker.Title == nil {
			break
		}

		return e.complexity.SceneMarker.Title(childComplexity), true

	case "SceneMarker.updated_at":
		if e.complexity.SceneMarker.UpdatedAt == nil {
			break
		}

		return e.complexity.SceneMarker.UpdatedAt(childComplexity), true

	case "SceneMarkerTag.scene_markers":
		if e.complexity.SceneMarkerTag.SceneMarkers == nil {
			break
		}

		return e.complexity.SceneMarkerTag.SceneMarkers(childComplexity), true

	case "SceneMarkerTag.tag":
		if e.complexity.SceneMarkerTag.Tag == nil {
			break
		}

		return e.complexity.SceneMarkerTag.Tag(childComplexity), true

	case "SceneMovie.movie":
		if e.complexity.SceneMovie.Movie == nil {
			break
		}

		return e.complexity.SceneMovie.Movie(childComplexity), true

	case "SceneMovie.scene_index":
		if e.complexity.SceneMovie.SceneIndex == nil {
			break
		}

		return e.complexity.SceneMovie.SceneIndex(childComplexity), true

	case "SceneMovieID.movie_id":
		if e.complexity.SceneMovieID.MovieID == nil {
			break
		}

		return e.complexity.SceneMovieID.MovieID(childComplexity), true

	case "SceneMovieID.scene_index":
		if e.complexity.SceneMovieID.SceneIndex == nil {
			break
		}

		return e.complexity.SceneMovieID.SceneIndex(childComplexity), true

	case "SceneParserResult.date":
		if e.complexity.SceneParserResult.Date == nil {
			break
		}

		return e.complexity.SceneParserResult.Date(childComplexity), true

	case "SceneParserResult.details":
		if e.complexity.SceneParserResult.Details == nil {
			break
		}

		return e.complexity.SceneParserResult.Details(childComplexity), true

	case "SceneParserResult.gallery_ids":
		if e.complexity.SceneParserResult.GalleryIds == nil {
			break
		}

		return e.complexity.SceneParserResult.GalleryIds(childComplexity), true

	case "SceneParserResult.movies":
		if e.complexity.SceneParserResult.Movies == nil {
			break
		}

		return e.complexity.SceneParserResult.Movies(childComplexity), true

	case "SceneParserResult.performer_ids":
		if e.complexity.SceneParserResult.PerformerIds == nil {
			break
		}

		return e.complexity.SceneParserResult.PerformerIds(childComplexity), true

	case "SceneParserResult.rating":
		if e.complexity.SceneParserResult.Rating == nil {
			break
		}

		return e.complexity.SceneParserResult.Rating(childComplexity), true

	case "SceneParserResult.scene":
		if e.complexity.SceneParserResult.Scene == nil {
			break
		}

		return e.complexity.SceneParserResult.Scene(childComplexity), true

	case "SceneParserResult.studio_id":
		if e.complexity.SceneParserResult.StudioID == nil {
			break
		}

		return e.complexity.SceneParserResult.StudioID(childComplexity), true

	case "SceneParserResult.tag_ids":
		if e.complexity.SceneParserResult.TagIds == nil {
			break
		}

		return e.complexity.SceneParserResult.TagIds(childComplexity), true

	case "SceneParserResult.title":
		if e.complexity.SceneParserResult.Title == nil {
			break
		}

		return e.complexity.SceneParserResult.Title(childComplexity), true

	case "SceneParserResult.url":
		if e.complexity.SceneParserResult.URL == nil {
			break
		}

		return e.complexity.SceneParserResult.URL(childComplexity), true

	case "SceneParserResultType.count":
		if e.complexity.SceneParserResultType.Count == nil {
			break
		}

		return e.complexity.SceneParserResultType.Count(childComplexity), true

	case "SceneParserResultType.results":
		if e.complexity.SceneParserResultType.Results == nil {
			break
		}

		return e.complexity.SceneParserResultType.Results(childComplexity), true

	case "ScenePathsType.caption":
		if e.complexity.ScenePathsType.Caption == nil {
			break
		}

		return e.complexity.ScenePathsType.Caption(childComplexity), true

	case "ScenePathsType.chapters_vtt":
		if e.complexity.ScenePathsType.ChaptersVtt == nil {
			break
		}

		return e.complexity.ScenePathsType.ChaptersVtt(childComplexity), true

	case "ScenePathsType.funscript":
		if e.complexity.ScenePathsType.Funscript == nil {
			break
		}

		return e.complexity.ScenePathsType.Funscript(childComplexity), true

	case "ScenePathsType.interactive_heatmap":
		if e.complexity.ScenePathsType.InteractiveHeatmap == nil {
			break
		}

		return e.complexity.ScenePathsType.InteractiveHeatmap(childComplexity), true

	case "ScenePathsType.preview":
		if e.complexity.ScenePathsType.Preview == nil {
			break
		}

		return e.complexity.ScenePathsType.Preview(childComplexity), true

	case "ScenePathsType.screenshot":
		if e.complexity.ScenePathsType.Screenshot == nil {
			break
		}

		return e.complexity.ScenePathsType.Screenshot(childComplexity), true

	case "ScenePathsType.sprite":
		if e.complexity.ScenePathsType.Sprite == nil {
			break
		}

		return e.complexity.ScenePathsType.Sprite(childComplexity), true

	case "ScenePathsType.stream":
		if e.complexity.ScenePathsType.Stream == nil {
			break
		}

		return e.complexity.ScenePathsType.Stream(childComplexity), true

	case "ScenePathsType.vtt":
		if e.complexity.ScenePathsType.Vtt == nil {
			break
		}

		return e.complexity.ScenePathsType.Vtt(childComplexity), true

	case "ScenePathsType.webp":
		if e.complexity.ScenePathsType.Webp == nil {
			break
		}

		return e.complexity.ScenePathsType.Webp(childComplexity), true

	case "SceneStreamEndpoint.label":
		if e.complexity.SceneStreamEndpoint.Label == nil {
			break
		}

		return e.complexity.SceneStreamEndpoint.Label(childComplexity), true

	case "SceneStreamEndpoint.mime_type":
		if e.complexity.SceneStreamEndpoint.MimeType == nil {
			break
		}

		return e.complexity.SceneStreamEndpoint.MimeType(childComplexity), true

	case "SceneStreamEndpoint.url":
		if e.complexity.SceneStreamEndpoint.URL == nil {
			break
		}

		return e.complexity.SceneStreamEndpoint.URL(childComplexity), true

	case "ScrapedGallery.date":
		if e.complexity.ScrapedGallery.Date == nil {
			break
		}

		return e.complexity.ScrapedGallery.Date(childComplexity), true

	case "ScrapedGallery.details":
		if e.complexity.ScrapedGallery.Details == nil {
			break
		}

		return e.complexity.ScrapedGallery.Details(childComplexity), true

	case "ScrapedGallery.performers":
		if e.complexity.ScrapedGallery.Performers == nil {
			break
		}

		return e.complexity.ScrapedGallery.Performers(childComplexity), true

	case "ScrapedGallery.studio":
		if e.complexity.ScrapedGallery.Studio == nil {
			break
		}

		return e.complexity.ScrapedGallery.Studio(childComplexity), true

	case "ScrapedGallery.tags":
		if e.complexity.ScrapedGallery.Tags == nil {
			break
		}

		return e.complexity.ScrapedGallery.Tags(childComplexity), true

	case "ScrapedGallery.title":
		if e.complexity.ScrapedGallery.Title == nil {
			break
		}

		return e.complexity.ScrapedGallery.Title(childComplexity), true

	case "ScrapedGallery.url":
		if e.complexity.ScrapedGallery.URL == nil {
			break
		}

		return e.complexity.ScrapedGallery.URL(childComplexity), true

	case "ScrapedMovie.aliases":
		if e.complexity.ScrapedMovie.Aliases == nil {
			break
		}

		return e.complexity.ScrapedMovie.Aliases(childComplexity), true

	case "ScrapedMovie.back_image":
		if e.complexity.ScrapedMovie.BackImage == nil {
			break
		}

		return e.complexity.ScrapedMovie.BackImage(childComplexity), true

	case "ScrapedMovie.date":
		if e.complexity.ScrapedMovie.Date == nil {
			break
		}

		return e.complexity.ScrapedMovie.Date(childComplexity), true

	case "ScrapedMovie.director":
		if e.complexity.ScrapedMovie.Director == nil {
			break
		}

		return e.complexity.ScrapedMovie.Director(childComplexity), true

	case "ScrapedMovie.duration":
		if e.complexity.ScrapedMovie.Duration == nil {
			break
		}

		return e.complexity.ScrapedMovie.Duration(childComplexity), true

	case "ScrapedMovie.front_image":
		if e.complexity.ScrapedMovie.FrontImage == nil {
			break
		}

		return e.complexity.ScrapedMovie.FrontImage(childComplexity), true

	case "ScrapedMovie.name":
		if e.complexity.ScrapedMovie.Name == nil {
			break
		}

		return e.complexity.ScrapedMovie.Name(childComplexity), true

	case "ScrapedMovie.rating":
		if e.complexity.ScrapedMovie.Rating == nil {
			break
		}

		return e.complexity.ScrapedMovie.Rating(childComplexity), true

	case "ScrapedMovie.stored_id":
		if e.complexity.ScrapedMovie.StoredID == nil {
			break
		}

		return e.complexity.ScrapedMovie.StoredID(childComplexity), true

	case "ScrapedMovie.studio":
		if e.complexity.ScrapedMovie.Studio == nil {
			break
		}

		return e.complexity.ScrapedMovie.Studio(childComplexity), true

	case "ScrapedMovie.synopsis":
		if e.complexity.ScrapedMovie.Synopsis == nil {
			break
		}

		return e.complexity.ScrapedMovie.Synopsis(childComplexity), true

	case "ScrapedMovie.url":
		if e.complexity.ScrapedMovie.URL == nil {
			break
		}

		return e.complexity.ScrapedMovie.URL(childComplexity), true

	case "ScrapedPerformer.aliases":
		if e.complexity.ScrapedPerformer.Aliases == nil {
			break
		}

		return e.complexity.ScrapedPerformer.Aliases(childComplexity), true

	case "ScrapedPerformer.birthdate":
		if e.complexity.ScrapedPerformer.Birthdate == nil {
			break
		}

		return e.complexity.ScrapedPerformer.Birthdate(childComplexity), true

	case "ScrapedPerformer.career_length":
		if e.complexity.ScrapedPerformer.CareerLength == nil {
			break
		}

		return e.complexity.ScrapedPerformer.CareerLength(childComplexity), true

	case "ScrapedPerformer.country":
		if e.complexity.ScrapedPerformer.Country == nil {
			break
		}

		return e.complexity.ScrapedPerformer.Country(childComplexity), true

	case "ScrapedPerformer.death_date":
		if e.complexity.ScrapedPerformer.DeathDate == nil {
			break
		}

		return e.complexity.ScrapedPerformer.DeathDate(childComplexity), true

	case "ScrapedPerformer.details":
		if e.complexity.ScrapedPerformer.Details == nil {
			break
		}

		return e.complexity.ScrapedPerformer.Details(childComplexity), true

	case "ScrapedPerformer.ethnicity":
		if e.complexity.ScrapedPerformer.Ethnicity == nil {
			break
		}

		return e.complexity.ScrapedPerformer.Ethnicity(childComplexity), true

	case "ScrapedPerformer.eye_color":
		if e.complexity.ScrapedPerformer.EyeColor == nil {
			break
		}

		return e.complexity.ScrapedPerformer.EyeColor(childComplexity), true

	case "ScrapedPerformer.fake_tits":
		if e.complexity.ScrapedPerformer.FakeTits == nil {
			break
		}

		return e.complexity.ScrapedPerformer.FakeTits(childComplexity), true

	case "ScrapedPerformer.gender":
		if e.complexity.ScrapedPerformer.Gender == nil {
			break
		}

		return e.complexity.ScrapedPerformer.Gender(childComplexity), true

	case "ScrapedPerformer.hair_color":
		if e.complexity.ScrapedPerformer.HairColor == nil {
			break
		}

		return e.complexity.ScrapedPerformer.HairColor(childComplexity), true

	case "ScrapedPerformer.height":
		if e.complexity.ScrapedPerformer.Height == nil {
			break
		}

		return e.complexity.ScrapedPerformer.Height(childComplexity), true

	case "ScrapedPerformer.image":
		if e.complexity.ScrapedPerformer.Image == nil {
			break
		}

		return e.complexity.ScrapedPerformer.Image(childComplexity), true

	case "ScrapedPerformer.images":
		if e.complexity.ScrapedPerformer.Images == nil {
			break
		}

		return e.complexity.ScrapedPerformer.Images(childComplexity), true

	case "ScrapedPerformer.instagram":
		if e.complexity.ScrapedPerformer.Instagram == nil {
			break
		}

		return e.complexity.ScrapedPerformer.Instagram(childComplexity), true

	case "ScrapedPerformer.measurements":
		if e.complexity.ScrapedPerformer.Measurements == nil {
			break
		}

		return e.complexity.ScrapedPerformer.Measurements(childComplexity), true

	case "ScrapedPerformer.name":
		if e.complexity.ScrapedPerformer.Name == nil {
			break
		}

		return e.complexity.ScrapedPerformer.Name(childComplexity), true

	case "ScrapedPerformer.piercings":
		if e.complexity.ScrapedPerformer.Piercings == nil {
			break
		}

		return e.complexity.ScrapedPerformer.Piercings(childComplexity), true

	case "ScrapedPerformer.remote_site_id":
		if e.complexity.ScrapedPerformer.RemoteSiteID == nil {
			break
		}

		return e.complexity.ScrapedPerformer.RemoteSiteID(childComplexity), true

	case "ScrapedPerformer.stored_id":
		if e.complexity.ScrapedPerformer.StoredID == nil {
			break
		}

		return e.complexity.ScrapedPerformer.StoredID(childComplexity), true

	case "ScrapedPerformer.tags":
		if e.complexity.ScrapedPerformer.Tags == nil {
			break
		}

		return e.complexity.ScrapedPerformer.Tags(childComplexity), true

	case "ScrapedPerformer.tattoos":
		if e.complexity.ScrapedPerformer.Tattoos == nil {
			break
		}

		return e.complexity.ScrapedPerformer.Tattoos(childComplexity), true

	case "ScrapedPerformer.twitter":
		if e.complexity.ScrapedPerformer.Twitter == nil {
			break
		}

		return e.complexity.ScrapedPerformer.Twitter(childComplexity), true

	case "ScrapedPerformer.url":
		if e.complexity.ScrapedPerformer.URL == nil {
			break
		}

		return e.complexity.ScrapedPerformer.URL(childComplexity), true

	case "ScrapedPerformer.weight":
		if e.complexity.ScrapedPerformer.Weight == nil {
			break
		}

		return e.complexity.ScrapedPerformer.Weight(childComplexity), true

	case "ScrapedScene.date":
		if e.complexity.ScrapedScene.Date == nil {
			break
		}

		return e.complexity.ScrapedScene.Date(childComplexity), true

	case "ScrapedScene.details":
		if e.complexity.ScrapedScene.Details == nil {
			break
		}

		return e.complexity.ScrapedScene.Details(childComplexity), true

	case "ScrapedScene.duration":
		if e.complexity.ScrapedScene.Duration == nil {
			break
		}

		return e.complexity.ScrapedScene.Duration(childComplexity), true

	case "ScrapedScene.file":
		if e.complexity.ScrapedScene.File == nil {
			break
		}

		return e.complexity.ScrapedScene.File(childComplexity), true

	case "ScrapedScene.fingerprints":
		if e.complexity.ScrapedScene.Fingerprints == nil {
			break
		}

		return e.complexity.ScrapedScene.Fingerprints(childComplexity), true

	case "ScrapedScene.image":
		if e.complexity.ScrapedScene.Image == nil {
			break
		}

		return e.complexity.ScrapedScene.Image(childComplexity), true

	case "ScrapedScene.movies":
		if e.complexity.ScrapedScene.Movies == nil {
			break
		}

		return e.complexity.ScrapedScene.Movies(childComplexity), true

	case "ScrapedScene.performers":
		if e.complexity.ScrapedScene.Performers == nil {
			break
		}

		return e.complexity.ScrapedScene.Performers(childComplexity), true

	case "ScrapedScene.remote_site_id":
		if e.complexity.ScrapedScene.RemoteSiteID == nil {
			break
		}

		return e.complexity.ScrapedScene.RemoteSiteID(childComplexity), true

	case "ScrapedScene.studio":
		if e.complexity.ScrapedScene.Studio == nil {
			break
		}

		return e.complexity.ScrapedScene.Studio(childComplexity), true

	case "ScrapedScene.tags":
		if e.complexity.ScrapedScene.Tags == nil {
			break
		}

		return e.complexity.ScrapedScene.Tags(childComplexity), true

	case "ScrapedScene.title":
		if e.complexity.ScrapedScene.Title == nil {
			break
		}

		return e.complexity.ScrapedScene.Title(childComplexity), true

	case "ScrapedScene.url":
		if e.complexity.ScrapedScene.URL == nil {
			break
		}

		return e.complexity.ScrapedScene.URL(childComplexity), true

	case "ScrapedStudio.image":
		if e.complexity.ScrapedStudio.Image == nil {
			break
		}

		return e.complexity.ScrapedStudio.Image(childComplexity), true

	case "ScrapedStudio.name":
		if e.complexity.ScrapedStudio.Name == nil {
			break
		}

		return e.complexity.ScrapedStudio.Name(childComplexity), true

	case "ScrapedStudio.remote_site_id":
		if e.complexity.ScrapedStudio.RemoteSiteID == nil {
			break
		}

		return e.complexity.ScrapedStudio.RemoteSiteID(childComplexity), true

	case "ScrapedStudio.stored_id":
		if e.complexity.ScrapedStudio.StoredID == nil {
			break
		}

		return e.complexity.ScrapedStudio.StoredID(childComplexity), true

	case "ScrapedStudio.url":
		if e.complexity.ScrapedStudio.URL == nil {
			break
		}

		return e.complexity.ScrapedStudio.URL(childComplexity), true

	case "ScrapedTag.name":
		if e.complexity.ScrapedTag.Name == nil {
			break
		}

		return e.complexity.ScrapedTag.Name(childComplexity), true

	case "ScrapedTag.stored_id":
		if e.complexity.ScrapedTag.StoredID == nil {
			break
		}

		return e.complexity.ScrapedTag.StoredID(childComplexity), true

	case "Scraper.gallery":
		if e.complexity.Scraper.Gallery == nil {
			break
		}

		return e.complexity.Scraper.Gallery(childComplexity), true

	case "Scraper.id":
		if e.complexity.Scraper.ID == nil {
			break
		}

		return e.complexity.Scraper.ID(childComplexity), true

	case "Scraper.movie":
		if e.complexity.Scraper.Movie == nil {
			break
		}

		return e.complexity.Scraper.Movie(childComplexity), true

	case "Scraper.name":
		if e.complexity.Scraper.Name == nil {
			break
		}

		return e.complexity.Scraper.Name(childComplexity), true

	case "Scraper.performer":
		if e.complexity.Scraper.Performer == nil {
			break
		}

		return e.complexity.Scraper.Performer(childComplexity), true

	case "Scraper.scene":
		if e.complexity.Scraper.Scene == nil {
			break
		}

		return e.complexity.Scraper.Scene(childComplexity), true

	case "ScraperSource.scraper_id":
		if e.complexity.ScraperSource.ScraperID == nil {
			break
		}

		return e.complexity.ScraperSource.ScraperID(childComplexity), true

	case "ScraperSource.stash_box_endpoint":
		if e.complexity.ScraperSource.StashBoxEndpoint == nil {
			break
		}

		return e.complexity.ScraperSource.StashBoxEndpoint(childComplexity), true

	case "ScraperSource.stash_box_index":
		if e.complexity.ScraperSource.StashBoxIndex == nil {
			break
		}

		return e.complexity.ScraperSource.StashBoxIndex(childComplexity), true

	case "ScraperSpec.supported_scrapes":
		if e.complexity.ScraperSpec.SupportedScrapes == nil {
			break
		}

		return e.complexity.ScraperSpec.SupportedScrapes(childComplexity), true

	case "ScraperSpec.urls":
		if e.complexity.ScraperSpec.Urls == nil {
			break
		}

		return e.complexity.ScraperSpec.Urls(childComplexity), true

	case "ShortVersion.shorthash":
		if e.complexity.ShortVersion.Shorthash == nil {
			break
		}

		return e.complexity.ShortVersion.Shorthash(childComplexity), true

	case "ShortVersion.url":
		if e.complexity.ShortVersion.URL == nil {
			break
		}

		return e.complexity.ShortVersion.URL(childComplexity), true

	case "StashBox.api_key":
		if e.complexity.StashBox.APIKey == nil {
			break
		}

		return e.complexity.StashBox.APIKey(childComplexity), true

	case "StashBox.endpoint":
		if e.complexity.StashBox.Endpoint == nil {
			break
		}

		return e.complexity.StashBox.Endpoint(childComplexity), true

	case "StashBox.name":
		if e.complexity.StashBox.Name == nil {
			break
		}

		return e.complexity.StashBox.Name(childComplexity), true

	case "StashBoxFingerprint.algorithm":
		if e.complexity.StashBoxFingerprint.Algorithm == nil {
			break
		}

		return e.complexity.StashBoxFingerprint.Algorithm(childComplexity), true

	case "StashBoxFingerprint.duration":
		if e.complexity.StashBoxFingerprint.Duration == nil {
			break
		}

		return e.complexity.StashBoxFingerprint.Duration(childComplexity), true

	case "StashBoxFingerprint.hash":
		if e.complexity.StashBoxFingerprint.Hash == nil {
			break
		}

		return e.complexity.StashBoxFingerprint.Hash(childComplexity), true

	case "StashBoxPerformerQueryResult.query":
		if e.complexity.StashBoxPerformerQueryResult.Query == nil {
			break
		}

		return e.complexity.StashBoxPerformerQueryResult.Query(childComplexity), true

	case "StashBoxPerformerQueryResult.results":
		if e.complexity.StashBoxPerformerQueryResult.Results == nil {
			break
		}

		return e.complexity.StashBoxPerformerQueryResult.Results(childComplexity), true

	case "StashBoxValidationResult.status":
		if e.complexity.StashBoxValidationResult.Status == nil {
			break
		}

		return e.complexity.StashBoxValidationResult.Status(childComplexity), true

	case "StashBoxValidationResult.valid":
		if e.complexity.StashBoxValidationResult.Valid == nil {
			break
		}

		return e.complexity.StashBoxValidationResult.Valid(childComplexity), true

	case "StashConfig.excludeImage":
		if e.complexity.StashConfig.ExcludeImage == nil {
			break
		}

		return e.complexity.StashConfig.ExcludeImage(childComplexity), true

	case "StashConfig.excludeVideo":
		if e.complexity.StashConfig.ExcludeVideo == nil {
			break
		}

		return e.complexity.StashConfig.ExcludeVideo(childComplexity), true

	case "StashConfig.path":
		if e.complexity.StashConfig.Path == nil {
			break
		}

		return e.complexity.StashConfig.Path(childComplexity), true

	case "StashID.endpoint":
		if e.complexity.StashID.Endpoint == nil {
			break
		}

		return e.complexity.StashID.Endpoint(childComplexity), true

	case "StashID.stash_id":
		if e.complexity.StashID.StashID == nil {
			break
		}

		return e.complexity.StashID.StashID(childComplexity), true

	case "StatsResultType.gallery_count":
		if e.complexity.StatsResultType.GalleryCount == nil {
			break
		}

		return e.complexity.StatsResultType.GalleryCount(childComplexity), true

	case "StatsResultType.image_count":
		if e.complexity.StatsResultType.ImageCount == nil {
			break
		}

		return e.complexity.StatsResultType.ImageCount(childComplexity), true

	case "StatsResultType.images_size":
		if e.complexity.StatsResultType.ImagesSize == nil {
			break
		}

		return e.complexity.StatsResultType.ImagesSize(childComplexity), true

	case "StatsResultType.movie_count":
		if e.complexity.StatsResultType.MovieCount == nil {
			break
		}

		return e.complexity.StatsResultType.MovieCount(childComplexity), true

	case "StatsResultType.performer_count":
		if e.complexity.StatsResultType.PerformerCount == nil {
			break
		}

		return e.complexity.StatsResultType.PerformerCount(childComplexity), true

	case "StatsResultType.scene_count":
		if e.complexity.StatsResultType.SceneCount == nil {
			break
		}

		return e.complexity.StatsResultType.SceneCount(childComplexity), true

	case "StatsResultType.scenes_duration":
		if e.complexity.StatsResultType.ScenesDuration == nil {
			break
		}

		return e.complexity.StatsResultType.ScenesDuration(childComplexity), true

	case "StatsResultType.scenes_size":
		if e.complexity.StatsResultType.ScenesSize == nil {
			break
		}

		return e.complexity.StatsResultType.ScenesSize(childComplexity), true

	case "StatsResultType.studio_count":
		if e.complexity.StatsResultType.StudioCount == nil {
			break
		}

		return e.complexity.StatsResultType.StudioCount(childComplexity), true

	case "StatsResultType.tag_count":
		if e.complexity.StatsResultType.TagCount == nil {
			break
		}

		return e.complexity.StatsResultType.TagCount(childComplexity), true

	case "Studio.aliases":
		if e.complexity.Studio.Aliases == nil {
			break
		}

		return e.complexity.Studio.Aliases(childComplexity), true

	case "Studio.checksum":
		if e.complexity.Studio.Checksum == nil {
			break
		}

		return e.complexity.Studio.Checksum(childComplexity), true

	case "Studio.child_studios":
		if e.complexity.Studio.ChildStudios == nil {
			break
		}

		return e.complexity.Studio.ChildStudios(childComplexity), true

	case "Studio.created_at":
		if e.complexity.Studio.CreatedAt == nil {
			break
		}

		return e.complexity.Studio.CreatedAt(childComplexity), true

	case "Studio.details":
		if e.complexity.Studio.Details == nil {
			break
		}

		return e.complexity.Studio.Details(childComplexity), true

	case "Studio.gallery_count":
		if e.complexity.Studio.GalleryCount == nil {
			break
		}

		return e.complexity.Studio.GalleryCount(childComplexity), true

	case "Studio.id":
		if e.complexity.Studio.ID == nil {
			break
		}

		return e.complexity.Studio.ID(childComplexity), true

	case "Studio.ignore_auto_tag":
		if e.complexity.Studio.IgnoreAutoTag == nil {
			break
		}

		return e.complexity.Studio.IgnoreAutoTag(childComplexity), true

	case "Studio.image_count":
		if e.complexity.Studio.ImageCount == nil {
			break
		}

		return e.complexity.Studio.ImageCount(childComplexity), true

	case "Studio.image_path":
		if e.complexity.Studio.ImagePath == nil {
			break
		}

		return e.complexity.Studio.ImagePath(childComplexity), true

	case "Studio.movie_count":
		if e.complexity.Studio.MovieCount == nil {
			break
		}

		return e.complexity.Studio.MovieCount(childComplexity), true

	case "Studio.movies":
		if e.complexity.Studio.Movies == nil {
			break
		}

		return e.complexity.Studio.Movies(childComplexity), true

	case "Studio.name":
		if e.complexity.Studio.Name == nil {
			break
		}

		return e.complexity.Studio.Name(childComplexity), true

	case "Studio.parent_studio":
		if e.complexity.Studio.ParentStudio == nil {
			break
		}

		return e.complexity.Studio.ParentStudio(childComplexity), true

	case "Studio.rating":
		if e.complexity.Studio.Rating == nil {
			break
		}

		return e.complexity.Studio.Rating(childComplexity), true

	case "Studio.scene_count":
		if e.complexity.Studio.SceneCount == nil {
			break
		}

		return e.complexity.Studio.SceneCount(childComplexity), true

	case "Studio.stash_ids":
		if e.complexity.Studio.StashIds == nil {
			break
		}

		return e.complexity.Studio.StashIds(childComplexity), true

	case "Studio.url":
		if e.complexity.Studio.URL == nil {
			break
		}

		return e.complexity.Studio.URL(childComplexity), true

	case "Studio.updated_at":
		if e.complexity.Studio.UpdatedAt == nil {
			break
		}

		return e.complexity.Studio.UpdatedAt(childComplexity), true

	case "Subscription.jobsSubscribe":
		if e.complexity.Subscription.JobsSubscribe == nil {
			break
		}

		return e.complexity.Subscription.JobsSubscribe(childComplexity), true

	case "Subscription.loggingSubscribe":
		if e.complexity.Subscription.LoggingSubscribe == nil {
			break
		}

		return e.complexity.Subscription.LoggingSubscribe(childComplexity), true

	case "Subscription.scanCompleteSubscribe":
		if e.complexity.Subscription.ScanCompleteSubscribe == nil {
			break
		}

		return e.complexity.Subscription.ScanCompleteSubscribe(childComplexity), true

	case "SystemStatus.appSchema":
		if e.complexity.SystemStatus.AppSchema == nil {
			break
		}

		return e.complexity.SystemStatus.AppSchema(childComplexity), true

	case "SystemStatus.configPath":
		if e.complexity.SystemStatus.ConfigPath == nil {
			break
		}

		return e.complexity.SystemStatus.ConfigPath(childComplexity), true

	case "SystemStatus.databasePath":
		if e.complexity.SystemStatus.DatabasePath == nil {
			break
		}

		return e.complexity.SystemStatus.DatabasePath(childComplexity), true

	case "SystemStatus.databaseSchema":
		if e.complexity.SystemStatus.DatabaseSchema == nil {
			break
		}

		return e.complexity.SystemStatus.DatabaseSchema(childComplexity), true

	case "SystemStatus.status":
		if e.complexity.SystemStatus.Status == nil {
			break
		}

		return e.complexity.SystemStatus.Status(childComplexity), true

	case "Tag.aliases":
		if e.complexity.Tag.Aliases == nil {
			break
		}

		return e.complexity.Tag.Aliases(childComplexity), true

	case "Tag.children":
		if e.complexity.Tag.Children == nil {
			break
		}

		return e.complexity.Tag.Children(childComplexity), true

	case "Tag.created_at":
		if e.complexity.Tag.CreatedAt == nil {
			break
		}

		return e.complexity.Tag.CreatedAt(childComplexity), true

	case "Tag.gallery_count":
		if e.complexity.Tag.GalleryCount == nil {
			break
		}

		return e.complexity.Tag.GalleryCount(childComplexity), true

	case "Tag.id":
		if e.complexity.Tag.ID == nil {
			break
		}

		return e.complexity.Tag.ID(childComplexity), true

	case "Tag.ignore_auto_tag":
		if e.complexity.Tag.IgnoreAutoTag == nil {
			break
		}

		return e.complexity.Tag.IgnoreAutoTag(childComplexity), true

	case "Tag.image_count":
		if e.complexity.Tag.ImageCount == nil {
			break
		}

		return e.complexity.Tag.ImageCount(childComplexity), true

	case "Tag.image_path":
		if e.complexity.Tag.ImagePath == nil {
			break
		}

		return e.complexity.Tag.ImagePath(childComplexity), true

	case "Tag.name":
		if e.complexity.Tag.Name == nil {
			break
		}

		return e.complexity.Tag.Name(childComplexity), true

	case "Tag.parents":
		if e.complexity.Tag.Parents == nil {
			break
		}

		return e.complexity.Tag.Parents(childComplexity), true

	case "Tag.performer_count":
		if e.complexity.Tag.PerformerCount == nil {
			break
		}

		return e.complexity.Tag.PerformerCount(childComplexity), true

	case "Tag.scene_count":
		if e.complexity.Tag.SceneCount == nil {
			break
		}

		return e.complexity.Tag.SceneCount(childComplexity), true

	case "Tag.scene_marker_count":
		if e.complexity.Tag.SceneMarkerCount == nil {
			break
		}

		return e.complexity.Tag.SceneMarkerCount(childComplexity), true

	case "Tag.updated_at":
		if e.complexity.Tag.UpdatedAt == nil {
			break
		}

		return e.complexity.Tag.UpdatedAt(childComplexity), true

	case "Version.build_time":
		if e.complexity.Version.BuildTime == nil {
			break
		}

		return e.complexity.Version.BuildTime(childComplexity), true

	case "Version.hash":
		if e.complexity.Version.Hash == nil {
			break
		}

		return e.complexity.Version.Hash(childComplexity), true

	case "Version.version":
		if e.complexity.Version.Version == nil {
			break
		}

		return e.complexity.Version.Version(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Subscription:
		next := ec._Subscription(ctx, rc.Operation.SelectionSet)

		var buf bytes.Buffer
		return func(ctx context.Context) *graphql.Response {
			buf.Reset()
			data := next()

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graphql/schema/types/config.graphql", Input: `input SetupInput {
  """Empty to indicate $HOME/.stash/config.yml default"""
  configLocation: String!
  stashes: [StashConfigInput!]!
  """Empty to indicate default"""
  databaseFile: String!
  """Empty to indicate default"""
  generatedLocation: String!
}

enum StreamingResolutionEnum {
  "240p", LOW
  "480p", STANDARD
  "720p", STANDARD_HD
  "1080p", FULL_HD
  "4k", FOUR_K
  "Original", ORIGINAL
}

enum PreviewPreset {
  "X264_ULTRAFAST", ultrafast
  "X264_VERYFAST", veryfast
  "X264_FAST", fast
  "X264_MEDIUM", medium
  "X264_SLOW", slow
  "X264_SLOWER", slower
  "X264_VERYSLOW", veryslow
}

enum HashAlgorithm {
  MD5
  "oshash", OSHASH
}

input ConfigGeneralInput {
  """Array of file paths to content"""
  stashes: [StashConfigInput!]
  """Path to the SQLite database"""
  databasePath: String
  """Path to generated files"""
  generatedPath: String
  """Path to import/export files"""
  metadataPath: String
  """Path to scrapers"""
  scrapersPath: String
  """Path to cache"""
  cachePath: String
  """Whether to calculate MD5 checksums for scene video files"""
  calculateMD5: Boolean
  """Hash algorithm to use for generated file naming"""
  videoFileNamingAlgorithm: HashAlgorithm
  """Number of parallel tasks to start during scan/generate"""
  parallelTasks: Int
  """Include audio stream in previews"""
  previewAudio: Boolean
  """Number of segments in a preview file"""
  previewSegments: Int
  """Preview segment duration, in seconds"""
  previewSegmentDuration: Float
  """Duration of start of video to exclude when generating previews"""
  previewExcludeStart: String
  """Duration of end of video to exclude when generating previews"""
  previewExcludeEnd: String
  """Preset when generating preview"""
  previewPreset: PreviewPreset
  """Max generated transcode size"""
  maxTranscodeSize: StreamingResolutionEnum
  """Max streaming transcode size"""
  maxStreamingTranscodeSize: StreamingResolutionEnum
  """Write image thumbnails to disk when generating on the fly"""
  writeImageThumbnails: Boolean
  """Username"""
  username: String
  """Password"""
  password: String
  """Maximum session cookie age"""
  maxSessionAge: Int
  """Comma separated list of proxies to allow traffic from"""
  trustedProxies: [String!] @deprecated(reason: "no longer supported")
  """Name of the log file"""
  logFile: String
  """Whether to also output to stderr"""
  logOut: Boolean
  """Minimum log level"""
  logLevel: String
  """Whether to log http access"""
  logAccess: Boolean
  """True if galleries should be created from folders with images"""
  createGalleriesFromFolders: Boolean
  """Array of video file extensions"""
  videoExtensions: [String!]
  """Array of image file extensions"""
  imageExtensions: [String!]
  """Array of gallery zip file extensions"""
  galleryExtensions: [String!]
  """Array of file regexp to exclude from Video Scans"""
  excludes: [String!]
  """Array of file regexp to exclude from Image Scans"""
  imageExcludes: [String!]
  """Custom Performer Image Location"""
  customPerformerImageLocation: String
  """Scraper user agent string"""
  scraperUserAgent: String @deprecated(reason: "use mutation ConfigureScraping(input: ConfigScrapingInput) instead")
  """Scraper CDP path. Path to chrome executable or remote address"""
  scraperCDPPath: String @deprecated(reason: "use mutation ConfigureScraping(input: ConfigScrapingInput) instead")
  """Whether the scraper should check for invalid certificates"""
  scraperCertCheck: Boolean @deprecated(reason: "use mutation ConfigureScraping(input: ConfigScrapingInput) instead")
  """Stash-box instances used for tagging"""
  stashBoxes: [StashBoxInput!]
  """Python path - resolved using path if unset"""
  pythonPath: String
}

type ConfigGeneralResult {
  """Array of file paths to content"""
  stashes: [StashConfig!]!
  """Path to the SQLite database"""
  databasePath: String!
  """Path to generated files"""
  generatedPath: String!
  """Path to import/export files"""
  metadataPath: String!
  """Path to the config file used"""
  configFilePath: String!
  """Path to scrapers"""
  scrapersPath: String!
  """Path to cache"""
  cachePath: String!
  """Whether to calculate MD5 checksums for scene video files"""
  calculateMD5: Boolean!
  """Hash algorithm to use for generated file naming"""
  videoFileNamingAlgorithm: HashAlgorithm!
  """Number of parallel tasks to start during scan/generate"""
  parallelTasks: Int!
  """Include audio stream in previews"""
  previewAudio: Boolean!
  """Number of segments in a preview file"""
  previewSegments: Int!
  """Preview segment duration, in seconds"""
  previewSegmentDuration: Float!
  """Duration of start of video to exclude when generating previews"""
  previewExcludeStart: String!
  """Duration of end of video to exclude when generating previews"""
  previewExcludeEnd: String!
  """Preset when generating preview"""
  previewPreset: PreviewPreset!
  """Max generated transcode size"""
  maxTranscodeSize: StreamingResolutionEnum
  """Max streaming transcode size"""
  maxStreamingTranscodeSize: StreamingResolutionEnum
  """Write image thumbnails to disk when generating on the fly"""
  writeImageThumbnails: Boolean!
  """API Key"""
  apiKey: String!
  """Username"""
  username: String!
  """Password"""
  password: String!
  """Maximum session cookie age"""
  maxSessionAge: Int!
  """Comma separated list of proxies to allow traffic from"""
  trustedProxies: [String!] @deprecated(reason: "no longer supported")
  """Name of the log file"""
  logFile: String
  """Whether to also output to stderr"""
  logOut: Boolean!
  """Minimum log level"""
  logLevel: String!
  """Whether to log http access"""
  logAccess: Boolean!
  """Array of video file extensions"""
  videoExtensions: [String!]!
  """Array of image file extensions"""
  imageExtensions: [String!]!
  """Array of gallery zip file extensions"""
  galleryExtensions: [String!]!
  """True if galleries should be created from folders with images"""
  createGalleriesFromFolders: Boolean!
  """Array of file regexp to exclude from Video Scans"""
  excludes: [String!]!
  """Array of file regexp to exclude from Image Scans"""
  imageExcludes: [String!]!
  """Custom Performer Image Location"""
  customPerformerImageLocation: String
  """Scraper user agent string"""
  scraperUserAgent: String @deprecated(reason: "use ConfigResult.scraping instead")
  """Scraper CDP path. Path to chrome executable or remote address"""
  scraperCDPPath: String @deprecated(reason: "use ConfigResult.scraping instead")
  """Whether the scraper should check for invalid certificates"""
  scraperCertCheck: Boolean! @deprecated(reason: "use ConfigResult.scraping instead")
  """Stash-box instances used for tagging"""
  stashBoxes: [StashBox!]!
  """Python path - resolved using path if unset"""
  pythonPath: String!
}

input ConfigDisableDropdownCreateInput {
  performer: Boolean
  tag: Boolean
  studio: Boolean
}

enum ImageLightboxDisplayMode {
  ORIGINAL
  FIT_XY
  FIT_X
}

enum ImageLightboxScrollMode {
  ZOOM
  PAN_Y
}

input ConfigImageLightboxInput {
  slideshowDelay: Int
  displayMode: ImageLightboxDisplayMode
  scaleUp: Boolean
  resetZoomOnNav: Boolean
  scrollMode: ImageLightboxScrollMode
  scrollAttemptsBeforeChange: Int
}

type ConfigImageLightboxResult {
  slideshowDelay: Int
  displayMode: ImageLightboxDisplayMode
  scaleUp: Boolean
  resetZoomOnNav: Boolean
  scrollMode: ImageLightboxScrollMode
  scrollAttemptsBeforeChange: Int!
}

input ConfigInterfaceInput {
  """Ordered list of items that should be shown in the menu"""
  menuItems: [String!]

  """Enable sound on mouseover previews"""
  soundOnPreview: Boolean
  
  """Show title and tags in wall view"""
  wallShowTitle: Boolean
  """Wall playback type"""
  wallPlayback: String

  """Show scene scrubber by default"""
  showScrubber: Boolean
  
  """Maximum duration (in seconds) in which a scene video will loop in the scene player"""
  maximumLoopDuration: Int
  """If true, video will autostart on load in the scene player"""
  autostartVideo: Boolean
  """If true, video will autostart when loading from play random or play selected"""
  autostartVideoOnPlaySelected: Boolean
  """If true, next scene in playlist will be played at video end by default"""
  continuePlaylistDefault: Boolean
  
  """If true, studio overlays will be shown as text instead of logo images"""
  showStudioAsText: Boolean
  
  """Custom CSS"""
  css: String
  cssEnabled: Boolean
  
  """Interface language"""
  language: String

  """Slideshow Delay"""
  slideshowDelay: Int @deprecated(reason: "Use imageLightbox.slideshowDelay")
  
  imageLightbox: ConfigImageLightboxInput
  
  """Set to true to disable creating new objects via the dropdown menus"""
  disableDropdownCreate: ConfigDisableDropdownCreateInput
  
  """Handy Connection Key"""
  handyKey: String
  """Funscript Time Offset"""
  funscriptOffset: Int
  """True if we should not auto-open a browser window on startup"""
  noBrowser: Boolean
  """True if we should send notifications to the desktop"""
  notificationsEnabled: Boolean
}

type ConfigDisableDropdownCreate {
  performer: Boolean!
  tag: Boolean!
  studio: Boolean!
}

type ConfigInterfaceResult {
  """Ordered list of items that should be shown in the menu"""
  menuItems: [String!]

  """Enable sound on mouseover previews"""
  soundOnPreview: Boolean

  """Show title and tags in wall view"""
  wallShowTitle: Boolean
  """Wall playback type"""
  wallPlayback: String

  """Show scene scrubber by default"""
  showScrubber: Boolean

  """Maximum duration (in seconds) in which a scene video will loop in the scene player"""
  maximumLoopDuration: Int
  """True if we should not auto-open a browser window on startup"""
  noBrowser: Boolean
  """True if we should send desktop notifications"""
  notificationsEnabled: Boolean
  """If true, video will autostart on load in the scene player"""
  autostartVideo: Boolean
  """If true, video will autostart when loading from play random or play selected"""
  autostartVideoOnPlaySelected: Boolean
  """If true, next scene in playlist will be played at video end by default"""
  continuePlaylistDefault: Boolean

  """If true, studio overlays will be shown as text instead of logo images"""
  showStudioAsText: Boolean

  """Custom CSS"""
  css: String
  cssEnabled: Boolean

  """Interface language"""
  language: String

  """Slideshow Delay"""
  slideshowDelay: Int @deprecated(reason: "Use imageLightbox.slideshowDelay")

  imageLightbox: ConfigImageLightboxResult!

  """Fields are true if creating via dropdown menus are disabled"""
  disableDropdownCreate: ConfigDisableDropdownCreate!
  disabledDropdownCreate: ConfigDisableDropdownCreate! @deprecated(reason: "Use disableDropdownCreate")

  """Handy Connection Key"""
  handyKey: String
  """Funscript Time Offset"""
  funscriptOffset: Int
}

input ConfigDLNAInput {
  serverName: String
  """True if DLNA service should be enabled by default"""
  enabled: Boolean
  """List of IPs whitelisted for DLNA service"""
  whitelistedIPs: [String!]
  """List of interfaces to run DLNA on. Empty for all"""
  interfaces: [String!]
}

type ConfigDLNAResult {
  serverName: String!
  """True if DLNA service should be enabled by default"""
  enabled: Boolean!
  """List of IPs whitelisted for DLNA service"""
  whitelistedIPs: [String!]!
  """List of interfaces to run DLNA on. Empty for all"""
  interfaces: [String!]!
}

input ConfigScrapingInput {
  """Scraper user agent string"""
  scraperUserAgent: String
  """Scraper CDP path. Path to chrome executable or remote address"""
  scraperCDPPath: String
  """Whether the scraper should check for invalid certificates"""
  scraperCertCheck: Boolean
  """Tags blacklist during scraping"""
  excludeTagPatterns: [String!]
}

type ConfigScrapingResult {
  """Scraper user agent string"""
  scraperUserAgent: String
  """Scraper CDP path. Path to chrome executable or remote address"""
  scraperCDPPath: String
  """Whether the scraper should check for invalid certificates"""
  scraperCertCheck: Boolean!
  """Tags blacklist during scraping"""
  excludeTagPatterns: [String!]!
}

type ConfigDefaultSettingsResult {
  scan: ScanMetadataOptions
  identify: IdentifyMetadataTaskOptions
  autoTag: AutoTagMetadataOptions
  generate: GenerateMetadataOptions
  
  """If true, delete file checkbox will be checked by default"""
  deleteFile: Boolean
  """If true, delete generated supporting files checkbox will be checked by default"""
  deleteGenerated: Boolean
}

input ConfigDefaultSettingsInput {
  scan: ScanMetadataInput
  identify: IdentifyMetadataInput
  autoTag: AutoTagMetadataInput
  generate: GenerateMetadataInput

  """If true, delete file checkbox will be checked by default"""
  deleteFile: Boolean
  """If true, delete generated files checkbox will be checked by default"""
  deleteGenerated: Boolean
}

"""All configuration settings"""
type ConfigResult {
  general: ConfigGeneralResult!
  interface: ConfigInterfaceResult!
  dlna: ConfigDLNAResult!
  scraping: ConfigScrapingResult!
  defaults: ConfigDefaultSettingsResult!
  ui: Map!
}

"""Directory structure of a path"""
type Directory {
    path: String!
    parent: String
    directories: [String!]!
}

"""Stash configuration details"""
input StashConfigInput {
  path: String!
  excludeVideo: Boolean!
  excludeImage: Boolean!
}

type StashConfig {
  path: String!
  excludeVideo: Boolean!
  excludeImage: Boolean!
}

input GenerateAPIKeyInput {
  clear: Boolean
}

type StashBoxValidationResult {
  valid: Boolean!
  status: String!
}
`, BuiltIn: false},
	{Name: "graphql/schema/types/dlna.graphql", Input: `

type DLNAIP {
    ipAddress: String!
    """Time until IP will be no longer allowed/disallowed"""
    until: Time
}

type DLNAStatus {
    running: Boolean!
    """If not currently running, time until it will be started. If running, time until it will be stopped"""
    until: Time
    recentIPAddresses: [String!]!
    allowedIPAddresses: [DLNAIP!]!
}

input EnableDLNAInput {
    """Duration to enable, in minutes. 0 or null for indefinite."""
    duration: Int
}
 
input DisableDLNAInput {
    """Duration to enable, in minutes. 0 or null for indefinite."""
    duration: Int
}

input AddTempDLNAIPInput {
    address: String!
    """Duration to enable, in minutes. 0 or null for indefinite."""
    duration: Int
}

input RemoveTempDLNAIPInput {
    address: String!
}`, BuiltIn: false},
	{Name: "graphql/schema/types/filters.graphql", Input: `enum SortDirectionEnum {
  ASC
  DESC
}

input FindFilterType {
  q: String
  page: Int
  """use per_page = -1 to indicate all results. Defaults to 25."""
  per_page: Int
  sort: String
  direction: SortDirectionEnum
}

enum ResolutionEnum {
  "144p", VERY_LOW
  "240p", LOW
  "360p", R360P
  "480p", STANDARD
  "540p", WEB_HD
  "720p", STANDARD_HD
  "1080p", FULL_HD
  "1440p", QUAD_HD
  "1920p", VR_HD
  "4k", FOUR_K
  "5k", FIVE_K
  "6k", SIX_K
  "8k", EIGHT_K
}

input ResolutionCriterionInput {
  value: ResolutionEnum!
  modifier: CriterionModifier!
}

input PHashDuplicationCriterionInput {
  duplicated: Boolean
  """Currently unimplemented"""
  distance: Int
}

input PerformerFilterType {
  AND: PerformerFilterType
  OR: PerformerFilterType
  NOT: PerformerFilterType

  name: StringCriterionInput
  details: StringCriterionInput

  """Filter by favorite"""
  filter_favorites: Boolean
  """Filter by birth year"""
  birth_year: IntCriterionInput
  """Filter by age"""
  age: IntCriterionInput
  """Filter by ethnicity"""
  ethnicity: StringCriterionInput
  """Filter by country"""
  country: StringCriterionInput
  """Filter by eye color"""
  eye_color: StringCriterionInput
  """Filter by height"""
  height: StringCriterionInput
  """Filter by measurements"""
  measurements: StringCriterionInput
  """Filter by fake tits value"""
  fake_tits: StringCriterionInput
  """Filter by career length"""
  career_length: StringCriterionInput
  """Filter by tattoos"""
  tattoos: StringCriterionInput
  """Filter by piercings"""
  piercings: StringCriterionInput
  """Filter by aliases"""
  aliases: StringCriterionInput
  """Filter by gender"""
  gender: GenderCriterionInput
  """Filter to only include performers missing this property"""
  is_missing: String
  """Filter to only include performers with these tags"""
  tags: HierarchicalMultiCriterionInput
  """Filter by tag count"""
  tag_count: IntCriterionInput
  """Filter by scene count"""
  scene_count: IntCriterionInput
  """Filter by image count"""
  image_count: IntCriterionInput
  """Filter by gallery count"""
  gallery_count: IntCriterionInput
  """Filter by StashID"""
  stash_id: StringCriterionInput
  """Filter by rating"""
  rating: IntCriterionInput
  """Filter by url"""
  url: StringCriterionInput
  """Filter by hair color"""
  hair_color: StringCriterionInput
  """Filter by weight"""
  weight: IntCriterionInput
  """Filter by death year"""
  death_year: IntCriterionInput
  """Filter by studios where performer appears in scene/image/gallery"""
  studios: HierarchicalMultiCriterionInput
  """Filter by autotag ignore value"""
  ignore_auto_tag: Boolean
}

input SceneMarkerFilterType {
  """Filter to only include scene markers with this tag"""
  tag_id: ID @deprecated(reason: "use tags filter instead")
  """Filter to only include scene markers with these tags"""
  tags: HierarchicalMultiCriterionInput
  """Filter to only include scene markers attached to a scene with these tags"""
  scene_tags: HierarchicalMultiCriterionInput
  """Filter to only include scene markers with these performers"""
  performers: MultiCriterionInput
}

input SceneFilterType {
  AND: SceneFilterType
  OR: SceneFilterType
  NOT: SceneFilterType

  title: StringCriterionInput
  details: StringCriterionInput

  """Filter by file oshash"""
  oshash: StringCriterionInput
  """Filter by file checksum"""
  checksum: StringCriterionInput
  """Filter by file phash"""
  phash: StringCriterionInput
  """Filter by path"""
  path: StringCriterionInput
  """Filter by rating"""
  rating: IntCriterionInput
  """Filter by organized"""
  organized: Boolean
  """Filter by o-counter"""
  o_counter: IntCriterionInput
  """Filter Scenes that have an exact phash match available"""
  duplicated: PHashDuplicationCriterionInput
  """Filter by resolution"""
  resolution: ResolutionCriterionInput
  """Filter by duration (in seconds)"""
  duration: IntCriterionInput
  """Filter to only include scenes which have markers. ` + "`" + `true` + "`" + ` or ` + "`" + `false` + "`" + `"""
  has_markers: String
  """Filter to only include scenes missing this property"""
  is_missing: String
  """Filter to only include scenes with this studio"""
  studios: HierarchicalMultiCriterionInput
  """Filter to only include scenes with this movie"""
  movies: MultiCriterionInput
  """Filter to only include scenes with these tags"""
  tags: HierarchicalMultiCriterionInput
  """Filter by tag count"""
  tag_count: IntCriterionInput
  """Filter to only include scenes with performers with these tags"""
  performer_tags: HierarchicalMultiCriterionInput
  """Filter scenes that have performers that have been favorited"""
  performer_favorite: Boolean
  """Filter scenes by performer age at time of scene"""
  performer_age: IntCriterionInput
  """Filter to only include scenes with these performers"""
  performers: MultiCriterionInput
  """Filter by performer count"""
  performer_count: IntCriterionInput
  """Filter by StashID"""
  stash_id: StringCriterionInput
  """Filter by url"""
  url: StringCriterionInput
  """Filter by interactive"""
  interactive: Boolean
  """Filter by InteractiveSpeed"""
  interactive_speed: IntCriterionInput
  """Filter by captions"""
  captions: StringCriterionInput
}

input MovieFilterType {

  name: StringCriterionInput
  director: StringCriterionInput
  synopsis: StringCriterionInput

  """Filter by duration (in seconds)"""
  duration: IntCriterionInput
  """Filter by rating"""
  rating: IntCriterionInput
  """Filter to only include movies with this studio"""
  studios: HierarchicalMultiCriterionInput
  """Filter to only include movies missing this property"""
  is_missing: String
  """Filter by url"""
  url: StringCriterionInput
  """Filter to only include movies where performer appears in a scene"""
  performers: MultiCriterionInput
}

input StudioFilterType {
  AND: StudioFilterType
  OR: StudioFilterType
  NOT: StudioFilterType

  name: StringCriterionInput
  details: StringCriterionInput
  """Filter to only include studios with this parent studio"""
  parents: MultiCriterionInput
  """Filter by StashID"""
  stash_id: StringCriterionInput
  """Filter to only include studios missing this property"""
  is_missing: String
  """Filter by rating"""
  rating: IntCriterionInput
  """Filter by scene count"""
  scene_count: IntCriterionInput
  """Filter by image count"""
  image_count: IntCriterionInput
  """Filter by gallery count"""
  gallery_count: IntCriterionInput
  """Filter by url"""
  url: StringCriterionInput
  """Filter by studio aliases"""
  aliases: StringCriterionInput
  """Filter by autotag ignore value"""
  ignore_auto_tag: Boolean
}

input GalleryFilterType {
  AND: GalleryFilterType
  OR: GalleryFilterType
  NOT: GalleryFilterType

  title: StringCriterionInput
  details: StringCriterionInput

  """Filter by file checksum"""
  checksum: StringCriterionInput
  """Filter by path"""
  path: StringCriterionInput
  """Filter to only include galleries missing this property"""
  is_missing: String
  """Filter to include/exclude galleries that were created from zip"""
  is_zip: Boolean
  """Filter by rating"""
  rating: IntCriterionInput
  """Filter by organized"""
  organized: Boolean
  """Filter by average image resolution"""
  average_resolution: ResolutionCriterionInput
  """Filter to only include galleries with this studio"""
  studios: HierarchicalMultiCriterionInput
  """Filter to only include galleries with these tags"""
  tags: HierarchicalMultiCriterionInput
  """Filter by tag count"""
  tag_count: IntCriterionInput
  """Filter to only include galleries with performers with these tags"""
  performer_tags: HierarchicalMultiCriterionInput
  """Filter to only include galleries with these performers"""
  performers: MultiCriterionInput
  """Filter by performer count"""
  performer_count: IntCriterionInput
  """Filter galleries that have performers that have been favorited"""
  performer_favorite: Boolean
  """Filter galleries by performer age at time of gallery"""
  performer_age: IntCriterionInput
  """Filter by number of images in this gallery"""
  image_count: IntCriterionInput
  """Filter by url"""
  url: StringCriterionInput
}

input TagFilterType {
  AND: TagFilterType
  OR: TagFilterType
  NOT: TagFilterType

  """Filter by tag name"""
  name: StringCriterionInput

  """Filter by tag aliases"""
  aliases: StringCriterionInput

  """Filter to only include tags missing this property"""
  is_missing: String

  """Filter by number of scenes with this tag"""
  scene_count: IntCriterionInput

  """Filter by number of images with this tag"""
  image_count: IntCriterionInput

  """Filter by number of galleries with this tag"""
  gallery_count: IntCriterionInput

  """Filter by number of performers with this tag"""
  performer_count: IntCriterionInput

  """Filter by number of markers with this tag"""
  marker_count: IntCriterionInput

  """Filter by parent tags"""
  parents: HierarchicalMultiCriterionInput

  """Filter by child tags"""
  children: HierarchicalMultiCriterionInput

  """Filter by number of parent tags the tag has"""
  parent_count: IntCriterionInput

  """Filter by number f child tags the tag has"""
  child_count: IntCriterionInput

  """Filter by autotag ignore value"""
  ignore_auto_tag: Boolean
}

input ImageFilterType {
  AND: ImageFilterType
  OR: ImageFilterType
  NOT: ImageFilterType

  title: StringCriterionInput

  """Filter by file checksum"""
  checksum: StringCriterionInput
  """Filter by path"""
  path: StringCriterionInput
  """Filter by rating"""
  rating: IntCriterionInput
  """Filter by organized"""
  organized: Boolean
  """Filter by o-counter"""
  o_counter: IntCriterionInput
  """Filter by resolution"""
  resolution: ResolutionCriterionInput
  """Filter to only include images missing this property"""
  is_missing: String
  """Filter to only include images with this studio"""
  studios: HierarchicalMultiCriterionInput
  """Filter to only include images with these tags"""
  tags: HierarchicalMultiCriterionInput
  """Filter by tag count"""
  tag_count: IntCriterionInput
  """Filter to only include images with performers with these tags"""
  performer_tags: HierarchicalMultiCriterionInput
  """Filter to only include images with these performers"""
  performers: MultiCriterionInput
  """Filter by performer count"""
  performer_count: IntCriterionInput
  """Filter images that have performers that have been favorited"""
  performer_favorite: Boolean
  """Filter to only include images with these galleries"""
  galleries: MultiCriterionInput
}

enum CriterionModifier {
  """="""
  EQUALS,
  """!="""
  NOT_EQUALS,
  """>"""
  GREATER_THAN,
  """<"""
  LESS_THAN,
  """IS NULL"""
  IS_NULL,
  """IS NOT NULL"""
  NOT_NULL,
  """INCLUDES ALL"""
  INCLUDES_ALL,
  INCLUDES,
  EXCLUDES,
  """MATCHES REGEX"""
  MATCHES_REGEX,
  """NOT MATCHES REGEX"""
  NOT_MATCHES_REGEX,
  """>= AND <="""
  BETWEEN,
  """< OR >"""
  NOT_BETWEEN,
}

input StringCriterionInput {
  value: String!
  modifier: CriterionModifier!
}

input IntCriterionInput {
  value: Int!
  value2: Int
  modifier: CriterionModifier!
}

input MultiCriterionInput {
  value: [ID!]
  modifier: CriterionModifier!
}

input GenderCriterionInput {
  value: GenderEnum
  modifier: CriterionModifier!
}

input HierarchicalMultiCriterionInput {
  value: [ID!]
  modifier: CriterionModifier!
  depth: Int
}

enum FilterMode {
  SCENES,
  PERFORMERS,
  STUDIOS,
  GALLERIES,
  SCENE_MARKERS,
  MOVIES,
  TAGS,
  IMAGES,
}

type SavedFilter {
  id: ID!
  mode: FilterMode!
  name: String!
  """JSON-encoded filter string"""
  filter: String!
}

input SaveFilterInput {
  """provide ID to overwrite existing filter"""
  id: ID
  mode: FilterMode!
  name: String!
  """JSON-encoded filter string"""
  filter: String!
}

input DestroyFilterInput {
  id: ID!
}

input SetDefaultFilterInput {
  mode: FilterMode!
  """JSON-encoded filter string - null to clear"""
  filter: String
}
`, BuiltIn: false},
	{Name: "graphql/schema/types/gallery.graphql", Input: `"""Gallery type"""
type Gallery {
  id: ID!
  checksum: String!
  path: String
  title: String
  url: String
  date: String
  details: String
  rating: Int
  organized: Boolean!
  created_at: Time!
  updated_at: Time!
  file_mod_time: Time

  scenes: [Scene!]!
  studio: Studio
  image_count: Int!
  tags: [Tag!]!
  performers: [Performer!]!

  """The images in the gallery"""
  images: [Image!]! # Resolver
  cover: Image
}

type GalleryFilesType {
  index: Int!
  name: String
  path: String
}

input GalleryCreateInput {
  title: String!
  url: String
  date: String
  details: String
  rating: Int
  organized: Boolean
  scene_ids: [ID!]
  studio_id: ID
  tag_ids: [ID!]
  performer_ids: [ID!]
}

input GalleryUpdateInput {
  clientMutationId: String
  id: ID!
  title: String
  url: String
  date: String
  details: String
  rating: Int
  organized: Boolean
  scene_ids: [ID!]
  studio_id: ID
  tag_ids: [ID!]
  performer_ids: [ID!]
}

input BulkGalleryUpdateInput {
  clientMutationId: String
  ids: [ID!]
  url: String
  date: String
  details: String
  rating: Int
  organized: Boolean
  scene_ids: BulkUpdateIds
  studio_id: ID
  tag_ids: BulkUpdateIds
  performer_ids: BulkUpdateIds
}

input GalleryDestroyInput {
  ids: [ID!]!
  """
  If true, then the zip file will be deleted if the gallery is zip-file-based. 
  If gallery is folder-based, then any files not associated with other
  galleries will be deleted, along with the folder, if it is not empty.
  """
  delete_file: Boolean
  delete_generated: Boolean
}

type FindGalleriesResultType {
  count: Int!
  galleries: [Gallery!]!
}

input GalleryAddInput {
  gallery_id: ID!
  image_ids: [ID!]!
}

input GalleryRemoveInput {
  gallery_id: ID!
  image_ids: [ID!]!
}
`, BuiltIn: false},
	{Name: "graphql/schema/types/image.graphql", Input: `type Image {
  id: ID!
  checksum: String
  title: String
  rating: Int
  o_counter: Int
  organized: Boolean!
  path: String!
  created_at: Time!
  updated_at: Time!
  file_mod_time: Time

  file: ImageFileType! # Resolver
  paths: ImagePathsType! # Resolver

  galleries: [Gallery!]!
  studio: Studio
  tags: [Tag!]!
  performers: [Performer!]!
}

type ImageFileType {
  size: Int
  width: Int
  height: Int
}

type ImagePathsType {
  thumbnail: String # Resolver
  image: String # Resolver
}

input ImageUpdateInput {
  clientMutationId: String
  id: ID!
  title: String
  rating: Int
  organized: Boolean
  
  studio_id: ID
  performer_ids: [ID!]
  tag_ids: [ID!]
  gallery_ids: [ID!]
}

input BulkImageUpdateInput {
  clientMutationId: String
  ids: [ID!]
  title: String
  rating: Int
  organized: Boolean
  
  studio_id: ID
  performer_ids: BulkUpdateIds
  tag_ids: BulkUpdateIds
  gallery_ids: BulkUpdateIds
}

input ImageDestroyInput {
  id: ID!
  delete_file: Boolean
  delete_generated: Boolean
}

input ImagesDestroyInput {
  ids: [ID!]!
  delete_file: Boolean
  delete_generated: Boolean
}

type FindImagesResultType {
  count: Int!
  """Total megapixels of the images"""
  megapixels: Float!
  """Total file size in bytes"""
  filesize: Float!
  images: [Image!]!
}`, BuiltIn: false},
	{Name: "graphql/schema/types/job.graphql", Input: `enum JobStatus {
  READY
  RUNNING
  FINISHED
  STOPPING
  CANCELLED
}

type Job {
  id: ID!
  status: JobStatus!
  subTasks: [String!]
  description: String!
  progress: Float
  startTime: Time
  endTime: Time
  addTime: Time!
}

input FindJobInput {
  id: ID!
}

enum JobStatusUpdateType {
  ADD
  REMOVE
  UPDATE
}

type JobStatusUpdate {
  type: JobStatusUpdateType!
  job: Job!
}
`, BuiltIn: false},
	{Name: "graphql/schema/types/logging.graphql", Input: `"""Log entries"""
scalar Time

enum LogLevel {
    Trace
    Debug
    Info
    Progress
    Warning
    Error
}

type LogEntry {
  time: Time!
  level: LogLevel!
  message: String!
}`, BuiltIn: false},
	{Name: "graphql/schema/types/metadata.graphql", Input: `scalar Upload

input GenerateMetadataInput {
  sprites: Boolean
  previews: Boolean
  imagePreviews: Boolean
  previewOptions: GeneratePreviewOptionsInput
  markers: Boolean
  markerImagePreviews: Boolean
  markerScreenshots: Boolean
  transcodes: Boolean
  """Generate transcodes even if not required"""
  forceTranscodes: Boolean
  phashes: Boolean
  interactiveHeatmapsSpeeds: Boolean

  """scene ids to generate for"""
  sceneIDs: [ID!]
  """marker ids to generate for"""
  markerIDs: [ID!]

  """overwrite existing media"""
  overwrite: Boolean
}

input GeneratePreviewOptionsInput {
  """Number of segments in a preview file"""
  previewSegments: Int
  """Preview segment duration, in seconds"""
  previewSegmentDuration: Float
  """Duration of start of video to exclude when generating previews"""
  previewExcludeStart: String
  """Duration of end of video to exclude when generating previews"""
  previewExcludeEnd: String
  """Preset when generating preview"""
  previewPreset: PreviewPreset
}

type GenerateMetadataOptions {
  sprites: Boolean
  previews: Boolean
  imagePreviews: Boolean
  previewOptions: GeneratePreviewOptions
  markers: Boolean
  markerImagePreviews: Boolean
  markerScreenshots: Boolean
  transcodes: Boolean
  phashes: Boolean
  interactiveHeatmapsSpeeds: Boolean
}

type GeneratePreviewOptions {
  """Number of segments in a preview file"""
  previewSegments: Int
  """Preview segment duration, in seconds"""
  previewSegmentDuration: Float
  """Duration of start of video to exclude when generating previews"""
  previewExcludeStart: String
  """Duration of end of video to exclude when generating previews"""
  previewExcludeEnd: String
  """Preset when generating preview"""
  previewPreset: PreviewPreset
}

"Filter options for meta data scannning"
input ScanMetaDataFilterInput {
  "If set, files with a modification time before this time point are ignored by the scan"
  minModTime: Timestamp
}

input ScanMetadataInput {
  paths: [String!]

  """Set name, date, details from metadata (if present)"""
  useFileMetadata: Boolean
  """Strip file extension from title"""
  stripFileExtension: Boolean
  """Generate previews during scan"""
  scanGeneratePreviews: Boolean
  """Generate image previews during scan"""
  scanGenerateImagePreviews: Boolean
  """Generate sprites during scan"""
  scanGenerateSprites: Boolean
  """Generate phashes during scan"""
  scanGeneratePhashes: Boolean
  """Generate image thumbnails during scan"""
  scanGenerateThumbnails: Boolean

  "Filter options for the scan"
  filter: ScanMetaDataFilterInput
}

type ScanMetadataOptions {
  """Set name, date, details from metadata (if present)"""
  useFileMetadata: Boolean!
  """Strip file extension from title"""
  stripFileExtension: Boolean!
  """Generate previews during scan"""
  scanGeneratePreviews: Boolean!
  """Generate image previews during scan"""
  scanGenerateImagePreviews: Boolean!
  """Generate sprites during scan"""
  scanGenerateSprites: Boolean!
  """Generate phashes during scan"""
  scanGeneratePhashes: Boolean!
  """Generate image thumbnails during scan"""
  scanGenerateThumbnails: Boolean!
}

input CleanMetadataInput {
  paths: [String!]
  
  """Do a dry run. Don't delete any files"""
  dryRun: Boolean!
}

input AutoTagMetadataInput {
  """Paths to tag, null for all files"""
  paths: [String!]
  """IDs of performers to tag files with, or "*" for all"""
  performers: [String!]
  """IDs of studios to tag files with, or "*" for all"""
  studios: [String!]
  """IDs of tags to tag files with, or "*" for all"""
  tags: [String!]
}

type AutoTagMetadataOptions {
  """IDs of performers to tag files with, or "*" for all"""
  performers: [String!]
  """IDs of studios to tag files with, or "*" for all"""
  studios: [String!]
  """IDs of tags to tag files with, or "*" for all"""
  tags: [String!]
}

enum IdentifyFieldStrategy {
  """Never sets the field value"""
  IGNORE
  """
  For multi-value fields, merge with existing.
  For single-value fields, ignore if already set
  """
  MERGE
  """Always replaces the value if a value is found.
  For multi-value fields, any existing values are removed and replaced with the
  scraped values.
  """
  OVERWRITE
}

input IdentifyFieldOptionsInput {
  field: String!
  strategy: IdentifyFieldStrategy!
  """creates missing objects if needed - only applicable for performers, tags and studios"""
  createMissing: Boolean
}

input IdentifyMetadataOptionsInput {
  """any fields missing from here are defaulted to MERGE and createMissing false"""
  fieldOptions: [IdentifyFieldOptionsInput!]
  """defaults to true if not provided"""
  setCoverImage: Boolean
  setOrganized: Boolean
  """defaults to true if not provided"""
  includeMalePerformers: Boolean
}

input IdentifySourceInput {
  source: ScraperSourceInput!
  """Options defined for a source override the defaults"""
  options: IdentifyMetadataOptionsInput
}

input IdentifyMetadataInput {
  """An ordered list of sources to identify items with. Only the first source that finds a match is used."""
  sources: [IdentifySourceInput!]!
  """Options defined here override the configured defaults"""
  options: IdentifyMetadataOptionsInput

  """scene ids to identify"""
  sceneIDs: [ID!]

  """paths of scenes to identify - ignored if scene ids are set"""
  paths: [String!]
}

# types for default options
type IdentifyFieldOptions {
  field: String!
  strategy: IdentifyFieldStrategy!
  """creates missing objects if needed - only applicable for performers, tags and studios"""
  createMissing: Boolean
}

type IdentifyMetadataOptions {
  """any fields missing from here are defaulted to MERGE and createMissing false"""
  fieldOptions: [IdentifyFieldOptions!]
  """defaults to true if not provided"""
  setCoverImage: Boolean
  setOrganized: Boolean
  """defaults to true if not provided"""
  includeMalePerformers: Boolean
}

type IdentifySource {
  source: ScraperSource!
  """Options defined for a source override the defaults"""
  options: IdentifyMetadataOptions
}

type IdentifyMetadataTaskOptions {
  """An ordered list of sources to identify items with. Only the first source that finds a match is used."""
  sources: [IdentifySource!]!
  """Options defined here override the configured defaults"""
  options: IdentifyMetadataOptions
}

input ExportObjectTypeInput {
  ids: [String!]
  all: Boolean
}

input ExportObjectsInput {
  scenes: ExportObjectTypeInput
  images: ExportObjectTypeInput
  studios: ExportObjectTypeInput
  performers: ExportObjectTypeInput
  tags: ExportObjectTypeInput
  movies: ExportObjectTypeInput
  galleries: ExportObjectTypeInput
  includeDependencies: Boolean
}

enum ImportDuplicateEnum {
  IGNORE
  OVERWRITE
  FAIL
}

enum ImportMissingRefEnum {
  IGNORE
  FAIL
  CREATE
}

input ImportObjectsInput {
  file: Upload!
  duplicateBehaviour: ImportDuplicateEnum!
  missingRefBehaviour: ImportMissingRefEnum!
}

input BackupDatabaseInput {
  download: Boolean
}

enum SystemStatusEnum {
  SETUP
  NEEDS_MIGRATION
  OK
}

type SystemStatus {
  databaseSchema: Int
  databasePath: String
  configPath: String
  appSchema: Int!
  status: SystemStatusEnum!
}

input MigrateInput {
  backupPath: String!
}
`, BuiltIn: false},
	{Name: "graphql/schema/types/movie.graphql", Input: `type Movie {
  id: ID!
  checksum: String!
  name: String!
  aliases: String
  """Duration in seconds"""
  duration: Int
  date: String
  rating: Int
  studio: Studio
  director: String
  synopsis: String
  url: String
  created_at: Time!
  updated_at: Time!

  front_image_path: String # Resolver
  back_image_path: String # Resolver
  scene_count: Int # Resolver
  scenes: [Scene!]!
}

input MovieCreateInput {
  name: String!
  aliases: String
  """Duration in seconds"""
  duration: Int
  date: String
  rating: Int
  studio_id: ID
  director: String
  synopsis: String
  url: String
  """This should be a URL or a base64 encoded data URL"""
  front_image: String
  """This should be a URL or a base64 encoded data URL"""
  back_image: String
}

input MovieUpdateInput {
  id: ID!
  name: String
  aliases: String
  duration: Int
  date: String
  rating: Int
  studio_id: ID
  director: String
  synopsis: String
  url: String
  """This should be a URL or a base64 encoded data URL"""
  front_image: String
  """This should be a URL or a base64 encoded data URL"""
  back_image: String
}

input BulkMovieUpdateInput {
  clientMutationId: String
  ids: [ID!]
  rating: Int
  studio_id: ID
  director: String
}

input MovieDestroyInput {
  id: ID!
}

type FindMoviesResultType {
  count: Int!
  movies: [Movie!]!
}
`, BuiltIn: false},
	{Name: "graphql/schema/types/performer.graphql", Input: `enum GenderEnum {
  MALE
  FEMALE
  TRANSGENDER_MALE
  TRANSGENDER_FEMALE
  INTERSEX
  NON_BINARY
}

type Performer {
  id: ID!
  checksum: String!
  name: String
  url: String
  gender: GenderEnum
  twitter: String
  instagram: String
  birthdate: String
  ethnicity: String
  country: String
  eye_color: String
  height: String
  measurements: String
  fake_tits: String
  career_length: String
  tattoos: String
  piercings: String
  aliases: String
  favorite: Boolean!
  tags: [Tag!]!
  ignore_auto_tag: Boolean!

  image_path: String # Resolver
  scene_count: Int # Resolver
  image_count: Int # Resolver
  gallery_count: Int # Resolver
  scenes: [Scene!]!
  stash_ids: [StashID!]!
  rating: Int
  details: String
  death_date: String
  hair_color: String
  weight: Int
  created_at: Time!
  updated_at: Time!
  movie_count: Int
  movies: [Movie!]!
}

input PerformerCreateInput {
  name: String!
  url: String
  gender: GenderEnum
  birthdate: String
  ethnicity: String
  country: String
  eye_color: String
  height: String
  measurements: String
  fake_tits: String
  career_length: String
  tattoos: String
  piercings: String
  aliases: String
  twitter: String
  instagram: String
  favorite: Boolean
  tag_ids: [ID!]
  """This should be a URL or a base64 encoded data URL"""
  image: String
  stash_ids: [StashIDInput!]
  rating: Int
  details: String
  death_date: String
  hair_color: String
  weight: Int
  ignore_auto_tag: Boolean
}

input PerformerUpdateInput {
  id: ID!
  name: String
  url: String
  gender: GenderEnum
  birthdate: String
  ethnicity: String
  country: String
  eye_color: String
  height: String
  measurements: String
  fake_tits: String
  career_length: String
  tattoos: String
  piercings: String
  aliases: String
  twitter: String
  instagram: String
  favorite: Boolean
  tag_ids: [ID!]
  """This should be a URL or a base64 encoded data URL"""
  image: String
  stash_ids: [StashIDInput!]
  rating: Int
  details: String
  death_date: String
  hair_color: String
  weight: Int
  ignore_auto_tag: Boolean
}

input BulkPerformerUpdateInput {
  clientMutationId: String
  ids: [ID!]
  url: String
  gender: GenderEnum
  birthdate: String
  ethnicity: String
  country: String
  eye_color: String
  height: String
  measurements: String
  fake_tits: String
  career_length: String
  tattoos: String
  piercings: String
  aliases: String
  twitter: String
  instagram: String
  favorite: Boolean
  tag_ids: BulkUpdateIds
  rating: Int
  details: String
  death_date: String
  hair_color: String
  weight: Int
  ignore_auto_tag: Boolean
}

input PerformerDestroyInput {
  id: ID!
}

type FindPerformersResultType {
  count: Int!
  performers: [Performer!]!
}
`, BuiltIn: false},
	{Name: "graphql/schema/types/plugin.graphql", Input: `
type Plugin {
    id: ID!
    name: String!
    description: String
    url: String
    version: String

    tasks: [PluginTask!]
    hooks: [PluginHook!]
}

type PluginTask {
    name: String!
    description: String
    plugin: Plugin!
}

type PluginHook {
    name: String!
    description: String
    hooks: [String!]
    plugin: Plugin!
}

type PluginResult {
    error: String
    result: String
}

input PluginArgInput {
    key: String!
    value: PluginValueInput
}

input PluginValueInput {
    str: String
    i: Int
    b: Boolean
    f: Float
    o: [PluginArgInput!]
    a: [PluginValueInput!]
}
`, BuiltIn: false},
	{Name: "graphql/schema/types/scalars.graphql", Input: `
"""
Timestamp is a point in time. It is always output as RFC3339-compatible time points.
It can be input as a RFC3339 string, or as "<4h" for "4 hours in the past" or ">5m"
for "5 minutes in the future"
"""
scalar Timestamp

# generic JSON object
scalar Map

scalar Any`, BuiltIn: false},
	{Name: "graphql/schema/types/scene-marker-tag.graphql", Input: `type SceneMarkerTag {
  tag: Tag!
  scene_markers: [SceneMarker!]!
}`, BuiltIn: false},
	{Name: "graphql/schema/types/scene-marker.graphql", Input: `type SceneMarker {
  id: ID!
  scene: Scene!
  title: String!
  seconds: Float!
  primary_tag: Tag!
  tags: [Tag!]!
  created_at: Time!
  updated_at: Time!

  """The path to stream this marker"""
  stream: String! # Resolver
  """The path to the preview image for this marker"""
  preview: String! # Resolver
  """The path to the screenshot image for this marker"""
  screenshot: String! # Resolver
}

input SceneMarkerCreateInput {
  title: String!
  seconds: Float!
  scene_id: ID!
  primary_tag_id: ID!
  tag_ids: [ID!]
}

input SceneMarkerUpdateInput {
  id: ID!
  title: String!
  seconds: Float!
  scene_id: ID!
  primary_tag_id: ID!
  tag_ids: [ID!]
}

type FindSceneMarkersResultType {
  count: Int!
  scene_markers: [SceneMarker!]!
}

type MarkerStringsResultType {
  count: Int!
  id: ID!
  title: String!
}`, BuiltIn: false},
	{Name: "graphql/schema/types/scene.graphql", Input: `type SceneFileType {
  size: String
  duration: Float
  video_codec: String
  audio_codec: String
  width: Int
  height: Int
  framerate: Float
  bitrate: Int
}

type ScenePathsType {
  screenshot: String # Resolver
  preview: String # Resolver
  stream: String # Resolver
  webp: String # Resolver
  vtt: String # Resolver
  chapters_vtt: String # Resolver
  sprite: String # Resolver
  funscript: String # Resolver
  interactive_heatmap: String # Resolver
  caption: String # Resolver
}

type SceneMovie {
  movie: Movie!
  scene_index: Int
}

type SceneCaption {
  language_code: String!
  caption_type: String!
}

type Scene {
  id: ID!
  checksum: String
  oshash: String
  title: String
  details: String
  url: String
  date: String
  rating: Int
  organized: Boolean!
  o_counter: Int
  path: String!
  phash: String
  interactive: Boolean!
  interactive_speed: Int
  captions: [SceneCaption!]
  created_at: Time!
  updated_at: Time!
  file_mod_time: Time

  file: SceneFileType! # Resolver
  paths: ScenePathsType! # Resolver

  scene_markers: [SceneMarker!]!
  galleries: [Gallery!]!
  studio: Studio
  movies: [SceneMovie!]!
  tags: [Tag!]!
  performers: [Performer!]!
  stash_ids: [StashID!]!

  """Return valid stream paths"""
  sceneStreams: [SceneStreamEndpoint!]!
}

input SceneMovieInput {
  movie_id: ID!
  scene_index: Int
}

input SceneUpdateInput {
  clientMutationId: String
  id: ID!
  title: String
  details: String
  url: String
  date: String
  rating: Int
  organized: Boolean
  studio_id: ID
  gallery_ids: [ID!]
  performer_ids: [ID!]
  movies: [SceneMovieInput!]
  tag_ids: [ID!]
  """This should be a URL or a base64 encoded data URL"""
  cover_image: String
  stash_ids: [StashIDInput!]
}

enum BulkUpdateIdMode {
  SET
  ADD
  REMOVE
}

input BulkUpdateIds {
  ids: [ID!]
  mode: BulkUpdateIdMode!
}

input BulkSceneUpdateInput {
  clientMutationId: String
  ids: [ID!]
  title: String
  details: String
  url: String
  date: String
  rating: Int
  organized: Boolean
  studio_id: ID
  gallery_ids: BulkUpdateIds
  performer_ids: BulkUpdateIds
  tag_ids: BulkUpdateIds
  movie_ids:  BulkUpdateIds
}

input SceneDestroyInput {
  id: ID!
  delete_file: Boolean
  delete_generated: Boolean
}

input ScenesDestroyInput {
  ids: [ID!]!
  delete_file: Boolean
  delete_generated: Boolean
}

type FindScenesResultType {
  count: Int!
  """Total duration in seconds"""
  duration: Float!
  """Total file size in bytes"""
  filesize: Float!
  scenes: [Scene!]!
}

input SceneParserInput {
  ignoreWords: [String!],
  whitespaceCharacters: String,
  capitalizeTitle: Boolean,
  ignoreOrganized: Boolean
}

type SceneMovieID {
  movie_id: ID!
  scene_index: String
}

type SceneParserResult {
  scene: Scene!
  title: String
  details: String
  url: String
  date: String
  rating: Int
  studio_id: ID
  gallery_ids: [ID!]
  performer_ids: [ID!]
  movies: [SceneMovieID!]
  tag_ids: [ID!]
}

type SceneParserResultType {
  count: Int!
  results: [SceneParserResult!]!
}

input SceneHashInput {
  checksum: String
  oshash: String
}

type SceneStreamEndpoint {
  url: String!
  mime_type: String
  label: String
}
`, BuiltIn: false},
	{Name: "graphql/schema/types/scraped-movie.graphql", Input: `"""A movie from a scraping operation..."""
type ScrapedMovie {
  stored_id: ID
  name: String
  aliases: String
  duration: String
  date: String
  rating: String
  director: String
  url: String
  synopsis: String
  studio: ScrapedStudio

  """This should be a base64 encoded data URL"""
  front_image: String
  """This should be a base64 encoded data URL"""
  back_image: String
}

input ScrapedMovieInput {
  name: String
  aliases: String
  duration: String
  date: String
  rating: String
  director: String
  url: String
  synopsis: String
}
`, BuiltIn: false},
	{Name: "graphql/schema/types/scraped-performer.graphql", Input: `"""A performer from a scraping operation..."""
type ScrapedPerformer {
  """Set if performer matched"""
  stored_id: ID
  name: String
  gender: String
  url: String
  twitter: String
  instagram: String
  birthdate: String
  ethnicity: String
  country: String
  eye_color: String
  height: String
  measurements: String
  fake_tits: String
  career_length: String
  tattoos: String
  piercings: String
  aliases: String
  tags: [ScrapedTag!]

  """This should be a base64 encoded data URL"""
  image: String @deprecated(reason: "use images instead")
  images: [String!]
  details: String
  death_date: String
  hair_color: String
  weight: String
  remote_site_id: String
}

input ScrapedPerformerInput {
  """Set if performer matched"""
  stored_id: ID
  name: String
  gender: String
  url: String
  twitter: String
  instagram: String
  birthdate: String
  ethnicity: String
  country: String
  eye_color: String
  height: String
  measurements: String
  fake_tits: String
  career_length: String
  tattoos: String
  piercings: String
  aliases: String

  # not including tags for the input
  # not including image for the input
  details: String
  death_date: String
  hair_color: String
  weight: String
  remote_site_id: String
}`, BuiltIn: false},
	{Name: "graphql/schema/types/scraper.graphql", Input: `enum ScrapeType {
  """From text query"""
  NAME
  """From existing object"""
  FRAGMENT
  """From URL"""
  URL
}

"Type of the content a scraper generates"
enum ScrapeContentType {
  GALLERY
  MOVIE
  PERFORMER
  SCENE
}

"Scraped Content is the forming union over the different scrapers"
union ScrapedContent = ScrapedStudio
                     | ScrapedTag
                     | ScrapedScene
                     | ScrapedGallery
                     | ScrapedMovie
                     | ScrapedPerformer

type ScraperSpec {
    """URLs matching these can be scraped with"""
    urls: [String!]
    supported_scrapes: [ScrapeType!]!
}

type Scraper {
    id: ID!
    name: String!
    """Details for performer scraper"""
    performer: ScraperSpec
    """Details for scene scraper"""
    scene: ScraperSpec
    """Details for gallery scraper"""
    gallery: ScraperSpec
    """Details for movie scraper"""
    movie: ScraperSpec
}


type ScrapedStudio {
  """Set if studio matched"""
  stored_id: ID
  name: String!
  url: String
  image: String

  remote_site_id: String
}

type ScrapedTag {
  """Set if tag matched"""
  stored_id: ID
  name: String!
}

type ScrapedScene {
  title: String
  details: String
  url: String
  date: String

  """This should be a base64 encoded data URL"""
  image: String

  file: SceneFileType # Resolver

  studio: ScrapedStudio
  tags: [ScrapedTag!]
  performers: [ScrapedPerformer!]
  movies: [ScrapedMovie!]

  remote_site_id: String
  duration: Int
  fingerprints: [StashBoxFingerprint!]
}

input ScrapedSceneInput {
  title: String
  details: String
  url: String
  date: String

  # no image, file, duration or relationships

  remote_site_id: String
}

type ScrapedGallery {
  title: String
  details: String
  url: String
  date: String

  studio: ScrapedStudio
  tags: [ScrapedTag!]
  performers: [ScrapedPerformer!]
}

input ScrapedGalleryInput {
  title: String
  details: String
  url: String
  date: String

  # no studio, tags or performers
}

input ScraperSourceInput {
  """Index of the configured stash-box instance to use. Should be unset if scraper_id is set"""
  stash_box_index: Int @deprecated(reason: "use stash_box_endpoint")
  """Stash-box endpoint"""
  stash_box_endpoint: String
  """Scraper ID to scrape with. Should be unset if stash_box_index is set"""
  scraper_id: ID
}

type ScraperSource {
  """Index of the configured stash-box instance to use. Should be unset if scraper_id is set"""
  stash_box_index: Int @deprecated(reason: "use stash_box_endpoint")
  """Stash-box endpoint"""
  stash_box_endpoint: String
  """Scraper ID to scrape with. Should be unset if stash_box_index is set"""
  scraper_id: ID
}

input ScrapeSingleSceneInput {
  """Instructs to query by string"""
  query: String
  """Instructs to query by scene fingerprints"""
  scene_id: ID
  """Instructs to query by scene fragment"""
  scene_input: ScrapedSceneInput
}

input ScrapeMultiScenesInput {
  """Instructs to query by scene fingerprints"""
  scene_ids: [ID!]
}

input ScrapeSinglePerformerInput {
  """Instructs to query by string"""
  query: String
  """Instructs to query by performer id"""
  performer_id: ID
  """Instructs to query by performer fragment"""
  performer_input: ScrapedPerformerInput
}

input ScrapeMultiPerformersInput {
  """Instructs to query by scene fingerprints"""
  performer_ids: [ID!]
}

input ScrapeSingleGalleryInput {
  """Instructs to query by string"""
  query: String
  """Instructs to query by gallery id"""
  gallery_id: ID
  """Instructs to query by gallery fragment"""
  gallery_input: ScrapedGalleryInput
}

input ScrapeSingleMovieInput {
  """Instructs to query by string"""
  query: String
  """Instructs to query by movie id"""
  movie_id: ID
  """Instructs to query by gallery fragment"""
  movie_input: ScrapedMovieInput
}

input StashBoxSceneQueryInput {
  """Index of the configured stash-box instance to use"""
  stash_box_index: Int!
  """Instructs query by scene fingerprints"""
  scene_ids: [ID!]
  """Query by query string"""
  q: String
}

input StashBoxPerformerQueryInput {
  """Index of the configured stash-box instance to use"""
  stash_box_index: Int!
  """Instructs query by scene fingerprints"""
  performer_ids: [ID!]
  """Query by query string"""
  q: String
}

type StashBoxPerformerQueryResult {
  query: String!
  results: [ScrapedPerformer!]!
}

type StashBoxFingerprint {
  algorithm: String!
  hash: String!
  duration: Int!
}

"""If neither performer_ids nor performer_names are set, tag all performers"""
input StashBoxBatchPerformerTagInput {
  "Stash endpoint to use for the performer tagging"
  endpoint: Int!
  "Fields to exclude when executing the performer tagging"
  exclude_fields: [String!]
  "Refresh performers already tagged by StashBox if true. Only tag performers with no StashBox tagging if false"
  refresh: Boolean!
  "If set, only tag these performer ids"
  performer_ids: [ID!]
  "If set, only tag these performer names"
  performer_names: [String!]
}
`, BuiltIn: false},
	{Name: "graphql/schema/types/stash-box.graphql", Input: `type StashBox {
    endpoint: String!
    api_key: String!
    name: String!
}

input StashBoxInput {
    endpoint: String!
    api_key: String!
    name: String!
}

type StashID {
  endpoint: String!
  stash_id: String!
}

input StashIDInput {
  endpoint: String!
  stash_id: String!
}

input StashBoxFingerprintSubmissionInput {
  scene_ids: [String!]!
  stash_box_index: Int!
}

input StashBoxDraftSubmissionInput {
  id: String!
  stash_box_index: Int!
}
`, BuiltIn: false},
	{Name: "graphql/schema/types/stats.graphql", Input: `type StatsResultType {
  scene_count: Int!
  scenes_size: Float!
  scenes_duration: Float!
  image_count: Int!
  images_size: Float!
  gallery_count: Int!
  performer_count: Int!
  studio_count: Int!
  movie_count: Int!
  tag_count: Int!
}
`, BuiltIn: false},
	{Name: "graphql/schema/types/studio.graphql", Input: `type Studio {
  id: ID!
  checksum: String!
  name: String!
  url: String
  parent_studio: Studio
  child_studios: [Studio!]!
  aliases: [String!]!
  ignore_auto_tag: Boolean!

  image_path: String # Resolver
  scene_count: Int # Resolver
  image_count: Int # Resolver
  gallery_count: Int # Resolver
  stash_ids: [StashID!]!
  rating: Int
  details: String
  created_at: Time!
  updated_at: Time!
  movie_count: Int
  movies: [Movie!]!
}

input StudioCreateInput {
  name: String!
  url: String
  parent_id: ID
  """This should be a URL or a base64 encoded data URL"""
  image: String
  stash_ids: [StashIDInput!]
  rating: Int
  details: String
  aliases: [String!]
  ignore_auto_tag: Boolean
}

input StudioUpdateInput {
  id: ID!
  name: String
  url: String
  parent_id: ID,
  """This should be a URL or a base64 encoded data URL"""
  image: String
  stash_ids: [StashIDInput!]
  rating: Int
  details: String
  aliases: [String!]
  ignore_auto_tag: Boolean
}

input StudioDestroyInput {
  id: ID!
}

type FindStudiosResultType {
  count: Int!
  studios: [Studio!]!
}
`, BuiltIn: false},
	{Name: "graphql/schema/types/tag.graphql", Input: `type Tag {
  id: ID!
  name: String!
  aliases: [String!]!
  ignore_auto_tag: Boolean!
  created_at: Time!
  updated_at: Time!

  image_path: String # Resolver
  scene_count: Int # Resolver
  scene_marker_count: Int # Resolver
  image_count: Int # Resolver
  gallery_count: Int # Resolver
  performer_count: Int

  parents: [Tag!]!
  children: [Tag!]!
}

input TagCreateInput {
  name: String!
  aliases: [String!]
  ignore_auto_tag: Boolean

  """This should be a URL or a base64 encoded data URL"""
  image: String

  parent_ids: [ID!]
  child_ids: [ID!]
}

input TagUpdateInput {
  id: ID!
  name: String
  aliases: [String!]
  ignore_auto_tag: Boolean

  """This should be a URL or a base64 encoded data URL"""
  image: String

  parent_ids: [ID!]
  child_ids: [ID!]
}

input TagDestroyInput {
  id: ID!
}

type FindTagsResultType {
  count: Int!
  tags: [Tag!]!
}

input TagsMergeInput {
  source: [ID!]!
  destination: ID!
}
`, BuiltIn: false},
	{Name: "graphql/schema/types/version.graphql", Input: `type Version {
  version: String
  hash: String!
  build_time: String!
}

type ShortVersion {
  shorthash: String!
  url: String!
}
`, BuiltIn: false},
	{Name: "graphql/schema/schema.graphql", Input: `"""The query root for this schema"""
type Query {
  # Filters
  findSavedFilter(id: ID!): SavedFilter
  findSavedFilters(mode: FilterMode): [SavedFilter!]!
  findDefaultFilter(mode: FilterMode!): SavedFilter

  """Find a scene by ID or Checksum"""
  findScene(id: ID, checksum: String): Scene
  findSceneByHash(input: SceneHashInput!): Scene

  """A function which queries Scene objects"""
  findScenes(scene_filter: SceneFilterType, scene_ids: [Int!], filter: FindFilterType): FindScenesResultType!

  findScenesByPathRegex(filter: FindFilterType): FindScenesResultType!

  """ Returns any groups of scenes that are perceptual duplicates within the queried distance """
  findDuplicateScenes(distance: Int): [[Scene!]!]!

  """Return valid stream paths"""
  sceneStreams(id: ID): [SceneStreamEndpoint!]!

  parseSceneFilenames(filter: FindFilterType, config: SceneParserInput!): SceneParserResultType!

  """A function which queries SceneMarker objects"""
  findSceneMarkers(scene_marker_filter: SceneMarkerFilterType filter: FindFilterType): FindSceneMarkersResultType!

  findImage(id: ID, checksum: String): Image

  """A function which queries Scene objects"""
  findImages(image_filter: ImageFilterType, image_ids: [Int!], filter: FindFilterType): FindImagesResultType!

  """Find a performer by ID"""
  findPerformer(id: ID!): Performer
  """A function which queries Performer objects"""
  findPerformers(performer_filter: PerformerFilterType, filter: FindFilterType): FindPerformersResultType!

  """Find a studio by ID"""
  findStudio(id: ID!): Studio
  """A function which queries Studio objects"""
  findStudios(studio_filter: StudioFilterType, filter: FindFilterType): FindStudiosResultType!

   """Find a movie by ID"""
  findMovie(id: ID!): Movie
  """A function which queries Movie objects"""
  findMovies(movie_filter: MovieFilterType, filter: FindFilterType): FindMoviesResultType!

  findGallery(id: ID!): Gallery
  findGalleries(gallery_filter: GalleryFilterType, filter: FindFilterType): FindGalleriesResultType!

  findTag(id: ID!): Tag
  findTags(tag_filter: TagFilterType, filter: FindFilterType): FindTagsResultType!

  """Retrieve random scene markers for the wall"""
  markerWall(q: String): [SceneMarker!]!
  """Retrieve random scenes for the wall"""
  sceneWall(q: String): [Scene!]!

  """Get marker strings"""
  markerStrings(q: String, sort: String): [MarkerStringsResultType]!
  """Get stats"""
  stats: StatsResultType!
  """Organize scene markers by tag for a given scene ID"""
  sceneMarkerTags(scene_id: ID!): [SceneMarkerTag!]!

  logs: [LogEntry!]!

  # Scrapers

  """List available scrapers"""
  listScrapers(types: [ScrapeContentType!]!): [Scraper!]!
  listPerformerScrapers: [Scraper!]! @deprecated(reason: "Use listScrapers(types: [PERFORMER])")
  listSceneScrapers: [Scraper!]! @deprecated(reason: "Use listScrapers(types: [SCENE])")
  listGalleryScrapers: [Scraper!]! @deprecated(reason: "Use listScrapers(types: [GALLERY])")
  listMovieScrapers: [Scraper!]! @deprecated(reason: "Use listScrapers(types: [MOVIE])")


  """Scrape for a single scene"""
  scrapeSingleScene(source: ScraperSourceInput!, input: ScrapeSingleSceneInput!): [ScrapedScene!]!
  """Scrape for multiple scenes"""
  scrapeMultiScenes(source: ScraperSourceInput!, input: ScrapeMultiScenesInput!): [[ScrapedScene!]!]!

  """Scrape for a single performer"""
  scrapeSinglePerformer(source: ScraperSourceInput!, input: ScrapeSinglePerformerInput!): [ScrapedPerformer!]!
  """Scrape for multiple performers"""
  scrapeMultiPerformers(source: ScraperSourceInput!, input: ScrapeMultiPerformersInput!): [[ScrapedPerformer!]!]!

  """Scrape for a single gallery"""
  scrapeSingleGallery(source: ScraperSourceInput!, input: ScrapeSingleGalleryInput!): [ScrapedGallery!]!

  """Scrape for a single movie"""
  scrapeSingleMovie(source: ScraperSourceInput!, input: ScrapeSingleMovieInput!): [ScrapedMovie!]!

  "Scrapes content based on a URL"
  scrapeURL(url: String!, ty: ScrapeContentType!): ScrapedContent

  """Scrapes a complete performer record based on a URL"""
  scrapePerformerURL(url: String!): ScrapedPerformer
  """Scrapes a complete performer record based on a URL"""
  scrapeSceneURL(url: String!): ScrapedScene
  """Scrapes a complete gallery record based on a URL"""
  scrapeGalleryURL(url: String!): ScrapedGallery
  """Scrapes a complete movie record based on a URL"""
  scrapeMovieURL(url: String!): ScrapedMovie

  """Scrape a list of performers based on name"""
  scrapePerformerList(scraper_id: ID!, query: String!): [ScrapedPerformer!]! @deprecated(reason: "use scrapeSinglePerformer")
  """Scrapes a complete performer record based on a scrapePerformerList result"""
  scrapePerformer(scraper_id: ID!, scraped_performer: ScrapedPerformerInput!): ScrapedPerformer @deprecated(reason: "use scrapeSinglePerformer")
  """Scrapes a complete scene record based on an existing scene"""
  scrapeScene(scraper_id: ID!, scene: SceneUpdateInput!): ScrapedScene @deprecated(reason: "use scrapeSingleScene")
  """Scrapes a complete gallery record based on an existing gallery"""
  scrapeGallery(scraper_id: ID!, gallery: GalleryUpdateInput!): ScrapedGallery @deprecated(reason: "use scrapeSingleGallery")

  """Scrape a list of performers from a query"""
  scrapeFreeonesPerformerList(query: String!): [String!]! @deprecated(reason: "use scrapeSinglePerformer with scraper_id = builtin_freeones")

  # Plugins
  """List loaded plugins"""
  plugins: [Plugin!]
  """List available plugin operations"""
  pluginTasks: [PluginTask!]

  # Config
  """Returns the current, complete configuration"""
  configuration: ConfigResult!
  """Returns an array of paths for the given path"""
  directory(
    "The directory path to list"
    path: String,
    "Desired collation locale. Determines the order of the directory result. eg. 'en-US', 'pt-BR', ..."
    locale: String = "en"
  ): Directory!
  validateStashBoxCredentials(input: StashBoxInput!): StashBoxValidationResult!

  # System status
  systemStatus: SystemStatus!

  # Job status
  jobQueue: [Job!]
  findJob(input: FindJobInput!): Job

  dlnaStatus: DLNAStatus!

  # Get everything

  allPerformers: [Performer!]!
  allStudios: [Studio!]!
  allMovies: [Movie!]!
  allTags: [Tag!]!

  # Get everything with minimal metadata

  # Version
  version: Version!

  # LatestVersion
  latestversion: ShortVersion!
}

type Mutation {
  setup(input: SetupInput!): Boolean!
  migrate(input: MigrateInput!): Boolean!

  sceneUpdate(input: SceneUpdateInput!): Scene
  bulkSceneUpdate(input: BulkSceneUpdateInput!): [Scene!]
  sceneDestroy(input: SceneDestroyInput!): Boolean!
  scenesDestroy(input: ScenesDestroyInput!): Boolean!
  scenesUpdate(input: [SceneUpdateInput!]!): [Scene]

  """Increments the o-counter for a scene. Returns the new value"""
  sceneIncrementO(id: ID!): Int!
  """Decrements the o-counter for a scene. Returns the new value"""
  sceneDecrementO(id: ID!): Int!
  """Resets the o-counter for a scene to 0. Returns the new value"""
  sceneResetO(id: ID!): Int!

  """Generates screenshot at specified time in seconds. Leave empty to generate default screenshot"""
  sceneGenerateScreenshot(id: ID!, at: Float): String!

  sceneMarkerCreate(input: SceneMarkerCreateInput!): SceneMarker
  sceneMarkerUpdate(input: SceneMarkerUpdateInput!): SceneMarker
  sceneMarkerDestroy(id: ID!): Boolean!

  imageUpdate(input: ImageUpdateInput!): Image
  bulkImageUpdate(input: BulkImageUpdateInput!): [Image!]
  imageDestroy(input: ImageDestroyInput!): Boolean!
  imagesDestroy(input: ImagesDestroyInput!): Boolean!
  imagesUpdate(input: [ImageUpdateInput!]!): [Image]

  """Increments the o-counter for an image. Returns the new value"""
  imageIncrementO(id: ID!): Int!
  """Decrements the o-counter for an image. Returns the new value"""
  imageDecrementO(id: ID!): Int!
  """Resets the o-counter for a image to 0. Returns the new value"""
  imageResetO(id: ID!): Int!

  galleryCreate(input: GalleryCreateInput!): Gallery
  galleryUpdate(input: GalleryUpdateInput!): Gallery
  bulkGalleryUpdate(input: BulkGalleryUpdateInput!): [Gallery!]
  galleryDestroy(input: GalleryDestroyInput!): Boolean!
  galleriesUpdate(input: [GalleryUpdateInput!]!): [Gallery]

  addGalleryImages(input: GalleryAddInput!): Boolean!
  removeGalleryImages(input: GalleryRemoveInput!): Boolean!

  performerCreate(input: PerformerCreateInput!): Performer
  performerUpdate(input: PerformerUpdateInput!): Performer
  performerDestroy(input: PerformerDestroyInput!): Boolean!
  performersDestroy(ids: [ID!]!): Boolean!
  bulkPerformerUpdate(input: BulkPerformerUpdateInput!): [Performer!]

  studioCreate(input: StudioCreateInput!): Studio
  studioUpdate(input: StudioUpdateInput!): Studio
  studioDestroy(input: StudioDestroyInput!): Boolean!
  studiosDestroy(ids: [ID!]!): Boolean!

  movieCreate(input: MovieCreateInput!): Movie
  movieUpdate(input: MovieUpdateInput!): Movie
  movieDestroy(input: MovieDestroyInput!): Boolean!
  moviesDestroy(ids: [ID!]!): Boolean!
  bulkMovieUpdate(input: BulkMovieUpdateInput!): [Movie!]

  tagCreate(input: TagCreateInput!): Tag
  tagUpdate(input: TagUpdateInput!): Tag
  tagDestroy(input: TagDestroyInput!): Boolean!
  tagsDestroy(ids: [ID!]!): Boolean!
  tagsMerge(input: TagsMergeInput!): Tag

  # Saved filters
  saveFilter(input: SaveFilterInput!): SavedFilter!
  destroySavedFilter(input: DestroyFilterInput!): Boolean!
  setDefaultFilter(input: SetDefaultFilterInput!): Boolean!

  """Change general configuration options"""
  configureGeneral(input: ConfigGeneralInput!): ConfigGeneralResult!
  configureInterface(input: ConfigInterfaceInput!): ConfigInterfaceResult!
  configureDLNA(input: ConfigDLNAInput!): ConfigDLNAResult!
  configureScraping(input: ConfigScrapingInput!): ConfigScrapingResult!
  configureDefaults(input: ConfigDefaultSettingsInput!): ConfigDefaultSettingsResult!

  # overwrites the entire UI configuration
  configureUI(input: Map!): Map!
  # sets a single UI key value
  configureUISetting(key: String!, value: Any): Map!

  """Generate and set (or clear) API key"""
  generateAPIKey(input: GenerateAPIKeyInput!): String!

  """Returns a link to download the result"""
  exportObjects(input: ExportObjectsInput!): String

  """Performs an incremental import. Returns the job ID"""
  importObjects(input: ImportObjectsInput!): ID!

  """Start an full import. Completely wipes the database and imports from the metadata directory. Returns the job ID"""
  metadataImport: ID!
  """Start a full export. Outputs to the metadata directory. Returns the job ID"""
  metadataExport: ID!
  """Start a scan. Returns the job ID"""
  metadataScan(input: ScanMetadataInput!): ID!
  """Start generating content. Returns the job ID"""
  metadataGenerate(input: GenerateMetadataInput!): ID!
  """Start auto-tagging. Returns the job ID"""
  metadataAutoTag(input: AutoTagMetadataInput!): ID!
  """Clean metadata. Returns the job ID"""
  metadataClean(input: CleanMetadataInput!): ID!
  """Identifies scenes using scrapers. Returns the job ID"""
  metadataIdentify(input: IdentifyMetadataInput!): ID!
  """Migrate generated files for the current hash naming"""
  migrateHashNaming: ID!

  """Reload scrapers"""
  reloadScrapers: Boolean!

  """Run plugin task. Returns the job ID"""
  runPluginTask(plugin_id: ID!, task_name: String!, args: [PluginArgInput!]): ID!
  reloadPlugins: Boolean!

  stopJob(job_id: ID!): Boolean!
  stopAllJobs: Boolean!

  """Submit fingerprints to stash-box instance"""
  submitStashBoxFingerprints(input: StashBoxFingerprintSubmissionInput!): Boolean!

  """Submit scene as draft to stash-box instance"""
  submitStashBoxSceneDraft(input: StashBoxDraftSubmissionInput!): ID
  """Submit performer as draft to stash-box instance"""
  submitStashBoxPerformerDraft(input: StashBoxDraftSubmissionInput!): ID

  """Backup the database. Optionally returns a link to download the database file"""
  backupDatabase(input: BackupDatabaseInput!): String

  """Run batch performer tag task. Returns the job ID."""
  stashBoxBatchPerformerTag(input: StashBoxBatchPerformerTagInput!): String!

  """Enables DLNA for an optional duration. Has no effect if DLNA is enabled by default"""
  enableDLNA(input: EnableDLNAInput!): Boolean!
  """Disables DLNA for an optional duration. Has no effect if DLNA is disabled by default"""
  disableDLNA(input: DisableDLNAInput!): Boolean!
  """Enables an IP address for DLNA for an optional duration"""
  addTempDLNAIP(input: AddTempDLNAIPInput!): Boolean!
  """Removes an IP address from the temporary DLNA whitelist"""
  removeTempDLNAIP(input: RemoveTempDLNAIPInput!): Boolean!
}

type Subscription {
  """Update from the metadata manager"""
  jobsSubscribe: JobStatusUpdate!

  loggingSubscribe: [LogEntry!]!

  scanCompleteSubscribe: Boolean!
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_addGalleryImages_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 GalleryAddInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGalleryAddInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGalleryAddInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addTempDLNAIP_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 AddTempDLNAIPInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAddTempDLNAIPInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐAddTempDLNAIPInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_backupDatabase_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 BackupDatabaseInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNBackupDatabaseInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐBackupDatabaseInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkGalleryUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 BulkGalleryUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNBulkGalleryUpdateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐBulkGalleryUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkImageUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 BulkImageUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNBulkImageUpdateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐBulkImageUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkMovieUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 BulkMovieUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNBulkMovieUpdateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐBulkMovieUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkPerformerUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 BulkPerformerUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNBulkPerformerUpdateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐBulkPerformerUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkSceneUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 BulkSceneUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNBulkSceneUpdateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐBulkSceneUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_configureDLNA_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ConfigDLNAInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNConfigDLNAInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigDLNAInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_configureDefaults_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ConfigDefaultSettingsInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNConfigDefaultSettingsInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigDefaultSettingsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_configureGeneral_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ConfigGeneralInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNConfigGeneralInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigGeneralInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_configureInterface_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ConfigInterfaceInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNConfigInterfaceInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigInterfaceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_configureScraping_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ConfigScrapingInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNConfigScrapingInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigScrapingInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_configureUISetting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["key"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["key"] = arg0
	var arg1 interface{}
	if tmp, ok := rawArgs["value"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
		arg1, err = ec.unmarshalOAny2interface(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["value"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_configureUI_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_destroySavedFilter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 DestroyFilterInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDestroyFilterInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐDestroyFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_disableDLNA_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 DisableDLNAInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDisableDLNAInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐDisableDLNAInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_enableDLNA_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 EnableDLNAInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNEnableDLNAInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐEnableDLNAInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_exportObjects_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ExportObjectsInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNExportObjectsInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐExportObjectsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_galleriesUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*GalleryUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGalleryUpdateInput2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGalleryUpdateInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_galleryCreate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 GalleryCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGalleryCreateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGalleryCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_galleryDestroy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 GalleryDestroyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGalleryDestroyInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGalleryDestroyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_galleryUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 GalleryUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGalleryUpdateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGalleryUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_generateAPIKey_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 GenerateAPIKeyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGenerateAPIKeyInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGenerateAPIKeyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_imageDecrementO_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_imageDestroy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ImageDestroyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNImageDestroyInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImageDestroyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_imageIncrementO_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_imageResetO_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_imageUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ImageUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNImageUpdateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImageUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_imagesDestroy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ImagesDestroyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNImagesDestroyInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImagesDestroyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_imagesUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*ImageUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNImageUpdateInput2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImageUpdateInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_importObjects_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ImportObjectsInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNImportObjectsInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImportObjectsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_metadataAutoTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 AutoTagMetadataInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAutoTagMetadataInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐAutoTagMetadataInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_metadataClean_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 CleanMetadataInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCleanMetadataInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐCleanMetadataInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_metadataGenerate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 GenerateMetadataInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGenerateMetadataInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGenerateMetadataInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_metadataIdentify_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 IdentifyMetadataInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNIdentifyMetadataInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifyMetadataInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_metadataScan_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ScanMetadataInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNScanMetadataInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScanMetadataInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_migrate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 MigrateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNMigrateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMigrateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_movieCreate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 MovieCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNMovieCreateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMovieCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_movieDestroy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 MovieDestroyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNMovieDestroyInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMovieDestroyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_movieUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 MovieUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNMovieUpdateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMovieUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_moviesDestroy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_performerCreate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 PerformerCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPerformerCreateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPerformerCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_performerDestroy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 PerformerDestroyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPerformerDestroyInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPerformerDestroyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_performerUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 PerformerUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPerformerUpdateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPerformerUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_performersDestroy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_removeGalleryImages_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 GalleryRemoveInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGalleryRemoveInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGalleryRemoveInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_removeTempDLNAIP_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 RemoveTempDLNAIPInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRemoveTempDLNAIPInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐRemoveTempDLNAIPInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_runPluginTask_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["plugin_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plugin_id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["plugin_id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["task_name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("task_name"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["task_name"] = arg1
	var arg2 []*PluginArgInput
	if tmp, ok := rawArgs["args"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("args"))
		arg2, err = ec.unmarshalOPluginArgInput2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPluginArgInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["args"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_saveFilter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 SaveFilterInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSaveFilterInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSaveFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_sceneDecrementO_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_sceneDestroy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 SceneDestroyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSceneDestroyInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneDestroyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_sceneGenerateScreenshot_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *float64
	if tmp, ok := rawArgs["at"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("at"))
		arg1, err = ec.unmarshalOFloat2ᚖfloat64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["at"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_sceneIncrementO_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_sceneMarkerCreate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 SceneMarkerCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSceneMarkerCreateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMarkerCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_sceneMarkerDestroy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_sceneMarkerUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 SceneMarkerUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSceneMarkerUpdateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMarkerUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_sceneResetO_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_sceneUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 SceneUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSceneUpdateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_scenesDestroy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ScenesDestroyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNScenesDestroyInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScenesDestroyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_scenesUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*SceneUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSceneUpdateInput2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneUpdateInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_setDefaultFilter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 SetDefaultFilterInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSetDefaultFilterInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSetDefaultFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_setup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 SetupInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSetupInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSetupInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_stashBoxBatchPerformerTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 StashBoxBatchPerformerTagInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNStashBoxBatchPerformerTagInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashBoxBatchPerformerTagInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_stopJob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["job_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("job_id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["job_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_studioCreate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 StudioCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNStudioCreateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStudioCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_studioDestroy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 StudioDestroyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNStudioDestroyInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStudioDestroyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_studioUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 StudioUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNStudioUpdateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStudioUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_studiosDestroy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_submitStashBoxFingerprints_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 StashBoxFingerprintSubmissionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNStashBoxFingerprintSubmissionInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashBoxFingerprintSubmissionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_submitStashBoxPerformerDraft_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 StashBoxDraftSubmissionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNStashBoxDraftSubmissionInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashBoxDraftSubmissionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_submitStashBoxSceneDraft_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 StashBoxDraftSubmissionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNStashBoxDraftSubmissionInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashBoxDraftSubmissionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_tagCreate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 TagCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNTagCreateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTagCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_tagDestroy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 TagDestroyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNTagDestroyInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTagDestroyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_tagUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 TagUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNTagUpdateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTagUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_tagsDestroy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_tagsMerge_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 TagsMergeInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNTagsMergeInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTagsMergeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_directory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["path"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("path"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["path"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["locale"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locale"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["locale"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_findDefaultFilter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 FilterMode
	if tmp, ok := rawArgs["mode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mode"))
		arg0, err = ec.unmarshalNFilterMode2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFilterMode(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["mode"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findDuplicateScenes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["distance"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distance"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distance"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findGalleries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *GalleryFilterType
	if tmp, ok := rawArgs["gallery_filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gallery_filter"))
		arg0, err = ec.unmarshalOGalleryFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGalleryFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["gallery_filter"] = arg0
	var arg1 *FindFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOFindFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_findGallery_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findImage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["checksum"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("checksum"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["checksum"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_findImages_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *ImageFilterType
	if tmp, ok := rawArgs["image_filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image_filter"))
		arg0, err = ec.unmarshalOImageFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImageFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["image_filter"] = arg0
	var arg1 []int
	if tmp, ok := rawArgs["image_ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image_ids"))
		arg1, err = ec.unmarshalOInt2ᚕintᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["image_ids"] = arg1
	var arg2 *FindFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOFindFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_findJob_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 FindJobInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNFindJobInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindJobInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMovie_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findMovies_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *MovieFilterType
	if tmp, ok := rawArgs["movie_filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("movie_filter"))
		arg0, err = ec.unmarshalOMovieFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMovieFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["movie_filter"] = arg0
	var arg1 *FindFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOFindFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_findPerformer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findPerformers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *PerformerFilterType
	if tmp, ok := rawArgs["performer_filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performer_filter"))
		arg0, err = ec.unmarshalOPerformerFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPerformerFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["performer_filter"] = arg0
	var arg1 *FindFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOFindFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_findSavedFilter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findSavedFilters_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *FilterMode
	if tmp, ok := rawArgs["mode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mode"))
		arg0, err = ec.unmarshalOFilterMode2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFilterMode(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["mode"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findSceneByHash_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 SceneHashInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSceneHashInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneHashInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findSceneMarkers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *SceneMarkerFilterType
	if tmp, ok := rawArgs["scene_marker_filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scene_marker_filter"))
		arg0, err = ec.unmarshalOSceneMarkerFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMarkerFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["scene_marker_filter"] = arg0
	var arg1 *FindFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOFindFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_findScene_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["checksum"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("checksum"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["checksum"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_findScenesByPathRegex_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *FindFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOFindFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findScenes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *SceneFilterType
	if tmp, ok := rawArgs["scene_filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scene_filter"))
		arg0, err = ec.unmarshalOSceneFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["scene_filter"] = arg0
	var arg1 []int
	if tmp, ok := rawArgs["scene_ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scene_ids"))
		arg1, err = ec.unmarshalOInt2ᚕintᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["scene_ids"] = arg1
	var arg2 *FindFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOFindFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_findStudio_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findStudios_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *StudioFilterType
	if tmp, ok := rawArgs["studio_filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studio_filter"))
		arg0, err = ec.unmarshalOStudioFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStudioFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["studio_filter"] = arg0
	var arg1 *FindFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOFindFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_findTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findTags_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *TagFilterType
	if tmp, ok := rawArgs["tag_filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_filter"))
		arg0, err = ec.unmarshalOTagFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTagFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tag_filter"] = arg0
	var arg1 *FindFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOFindFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listScrapers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []ScrapeContentType
	if tmp, ok := rawArgs["types"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("types"))
		arg0, err = ec.unmarshalNScrapeContentType2ᚕgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapeContentTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["types"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_markerStrings_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_markerWall_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_parseSceneFilenames_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *FindFilterType
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOFindFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindFilterType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 SceneParserInput
	if tmp, ok := rawArgs["config"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("config"))
		arg1, err = ec.unmarshalNSceneParserInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneParserInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["config"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_sceneMarkerTags_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["scene_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scene_id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["scene_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_sceneStreams_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_sceneWall_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_scrapeFreeonesPerformerList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_scrapeGalleryURL_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["url"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["url"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_scrapeGallery_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["scraper_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scraper_id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["scraper_id"] = arg0
	var arg1 GalleryUpdateInput
	if tmp, ok := rawArgs["gallery"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gallery"))
		arg1, err = ec.unmarshalNGalleryUpdateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGalleryUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["gallery"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_scrapeMovieURL_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["url"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["url"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_scrapeMultiPerformers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ScraperSourceInput
	if tmp, ok := rawArgs["source"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source"))
		arg0, err = ec.unmarshalNScraperSourceInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScraperSourceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["source"] = arg0
	var arg1 ScrapeMultiPerformersInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNScrapeMultiPerformersInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapeMultiPerformersInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_scrapeMultiScenes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ScraperSourceInput
	if tmp, ok := rawArgs["source"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source"))
		arg0, err = ec.unmarshalNScraperSourceInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScraperSourceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["source"] = arg0
	var arg1 ScrapeMultiScenesInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNScrapeMultiScenesInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapeMultiScenesInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_scrapePerformerList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["scraper_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scraper_id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["scraper_id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_scrapePerformerURL_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["url"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["url"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_scrapePerformer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["scraper_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scraper_id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["scraper_id"] = arg0
	var arg1 ScrapedPerformerInput
	if tmp, ok := rawArgs["scraped_performer"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scraped_performer"))
		arg1, err = ec.unmarshalNScrapedPerformerInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedPerformerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["scraped_performer"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_scrapeSceneURL_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["url"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["url"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_scrapeScene_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["scraper_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scraper_id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["scraper_id"] = arg0
	var arg1 SceneUpdateInput
	if tmp, ok := rawArgs["scene"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scene"))
		arg1, err = ec.unmarshalNSceneUpdateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["scene"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_scrapeSingleGallery_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ScraperSourceInput
	if tmp, ok := rawArgs["source"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source"))
		arg0, err = ec.unmarshalNScraperSourceInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScraperSourceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["source"] = arg0
	var arg1 ScrapeSingleGalleryInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNScrapeSingleGalleryInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapeSingleGalleryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_scrapeSingleMovie_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ScraperSourceInput
	if tmp, ok := rawArgs["source"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source"))
		arg0, err = ec.unmarshalNScraperSourceInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScraperSourceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["source"] = arg0
	var arg1 ScrapeSingleMovieInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNScrapeSingleMovieInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapeSingleMovieInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_scrapeSinglePerformer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ScraperSourceInput
	if tmp, ok := rawArgs["source"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source"))
		arg0, err = ec.unmarshalNScraperSourceInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScraperSourceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["source"] = arg0
	var arg1 ScrapeSinglePerformerInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNScrapeSinglePerformerInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapeSinglePerformerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_scrapeSingleScene_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ScraperSourceInput
	if tmp, ok := rawArgs["source"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source"))
		arg0, err = ec.unmarshalNScraperSourceInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScraperSourceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["source"] = arg0
	var arg1 ScrapeSingleSceneInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNScrapeSingleSceneInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapeSingleSceneInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_scrapeURL_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["url"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["url"] = arg0
	var arg1 ScrapeContentType
	if tmp, ok := rawArgs["ty"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ty"))
		arg1, err = ec.unmarshalNScrapeContentType2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapeContentType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ty"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_validateStashBoxCredentials_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 StashBoxInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNStashBoxInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashBoxInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AutoTagMetadataOptions_performers(ctx context.Context, field graphql.CollectedField, obj *AutoTagMetadataOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AutoTagMetadataOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Performers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AutoTagMetadataOptions_studios(ctx context.Context, field graphql.CollectedField, obj *AutoTagMetadataOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AutoTagMetadataOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Studios, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AutoTagMetadataOptions_tags(ctx context.Context, field graphql.CollectedField, obj *AutoTagMetadataOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AutoTagMetadataOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigDLNAResult_serverName(ctx context.Context, field graphql.CollectedField, obj *ConfigDLNAResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigDLNAResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigDLNAResult_enabled(ctx context.Context, field graphql.CollectedField, obj *ConfigDLNAResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigDLNAResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigDLNAResult_whitelistedIPs(ctx context.Context, field graphql.CollectedField, obj *ConfigDLNAResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigDLNAResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WhitelistedIPs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigDLNAResult_interfaces(ctx context.Context, field graphql.CollectedField, obj *ConfigDLNAResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigDLNAResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigDefaultSettingsResult_scan(ctx context.Context, field graphql.CollectedField, obj *ConfigDefaultSettingsResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigDefaultSettingsResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scan, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ScanMetadataOptions)
	fc.Result = res
	return ec.marshalOScanMetadataOptions2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScanMetadataOptions(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigDefaultSettingsResult_identify(ctx context.Context, field graphql.CollectedField, obj *ConfigDefaultSettingsResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigDefaultSettingsResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identify, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*IdentifyMetadataTaskOptions)
	fc.Result = res
	return ec.marshalOIdentifyMetadataTaskOptions2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifyMetadataTaskOptions(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigDefaultSettingsResult_autoTag(ctx context.Context, field graphql.CollectedField, obj *ConfigDefaultSettingsResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigDefaultSettingsResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AutoTag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*AutoTagMetadataOptions)
	fc.Result = res
	return ec.marshalOAutoTagMetadataOptions2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐAutoTagMetadataOptions(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigDefaultSettingsResult_generate(ctx context.Context, field graphql.CollectedField, obj *ConfigDefaultSettingsResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigDefaultSettingsResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Generate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*GenerateMetadataOptions)
	fc.Result = res
	return ec.marshalOGenerateMetadataOptions2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGenerateMetadataOptions(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigDefaultSettingsResult_deleteFile(ctx context.Context, field graphql.CollectedField, obj *ConfigDefaultSettingsResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigDefaultSettingsResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigDefaultSettingsResult_deleteGenerated(ctx context.Context, field graphql.CollectedField, obj *ConfigDefaultSettingsResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigDefaultSettingsResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteGenerated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigDisableDropdownCreate_performer(ctx context.Context, field graphql.CollectedField, obj *ConfigDisableDropdownCreate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigDisableDropdownCreate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Performer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigDisableDropdownCreate_tag(ctx context.Context, field graphql.CollectedField, obj *ConfigDisableDropdownCreate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigDisableDropdownCreate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigDisableDropdownCreate_studio(ctx context.Context, field graphql.CollectedField, obj *ConfigDisableDropdownCreate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigDisableDropdownCreate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Studio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_stashes(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stashes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*StashConfig)
	fc.Result = res
	return ec.marshalNStashConfig2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashConfigᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_databasePath(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DatabasePath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_generatedPath(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GeneratedPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_metadataPath(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MetadataPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_configFilePath(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConfigFilePath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_scrapersPath(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScrapersPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_cachePath(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CachePath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_calculateMD5(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CalculateMd5, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_videoFileNamingAlgorithm(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VideoFileNamingAlgorithm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(HashAlgorithm)
	fc.Result = res
	return ec.marshalNHashAlgorithm2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐHashAlgorithm(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_parallelTasks(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParallelTasks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_previewAudio(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewAudio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_previewSegments(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewSegments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_previewSegmentDuration(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewSegmentDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_previewExcludeStart(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewExcludeStart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_previewExcludeEnd(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewExcludeEnd, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_previewPreset(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewPreset, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(PreviewPreset)
	fc.Result = res
	return ec.marshalNPreviewPreset2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPreviewPreset(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_maxTranscodeSize(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxTranscodeSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*StreamingResolutionEnum)
	fc.Result = res
	return ec.marshalOStreamingResolutionEnum2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStreamingResolutionEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_maxStreamingTranscodeSize(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxStreamingTranscodeSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*StreamingResolutionEnum)
	fc.Result = res
	return ec.marshalOStreamingResolutionEnum2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStreamingResolutionEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_writeImageThumbnails(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WriteImageThumbnails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_apiKey(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_username(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_password(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Password, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_maxSessionAge(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxSessionAge, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_trustedProxies(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrustedProxies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_logFile(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_logOut(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogOut, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_logLevel(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_logAccess(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogAccess, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_videoExtensions(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VideoExtensions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_imageExtensions(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageExtensions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_galleryExtensions(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GalleryExtensions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_createGalleriesFromFolders(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateGalleriesFromFolders, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_excludes(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Excludes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_imageExcludes(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageExcludes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_customPerformerImageLocation(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomPerformerImageLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_scraperUserAgent(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScraperUserAgent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_scraperCDPPath(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScraperCDPPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_scraperCertCheck(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScraperCertCheck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_stashBoxes(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StashBoxes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*StashBox)
	fc.Result = res
	return ec.marshalNStashBox2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashBoxᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigGeneralResult_pythonPath(ctx context.Context, field graphql.CollectedField, obj *ConfigGeneralResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigGeneralResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PythonPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigImageLightboxResult_slideshowDelay(ctx context.Context, field graphql.CollectedField, obj *ConfigImageLightboxResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigImageLightboxResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SlideshowDelay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigImageLightboxResult_displayMode(ctx context.Context, field graphql.CollectedField, obj *ConfigImageLightboxResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigImageLightboxResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayMode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ImageLightboxDisplayMode)
	fc.Result = res
	return ec.marshalOImageLightboxDisplayMode2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImageLightboxDisplayMode(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigImageLightboxResult_scaleUp(ctx context.Context, field graphql.CollectedField, obj *ConfigImageLightboxResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigImageLightboxResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScaleUp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigImageLightboxResult_resetZoomOnNav(ctx context.Context, field graphql.CollectedField, obj *ConfigImageLightboxResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigImageLightboxResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResetZoomOnNav, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigImageLightboxResult_scrollMode(ctx context.Context, field graphql.CollectedField, obj *ConfigImageLightboxResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigImageLightboxResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScrollMode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ImageLightboxScrollMode)
	fc.Result = res
	return ec.marshalOImageLightboxScrollMode2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImageLightboxScrollMode(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigImageLightboxResult_scrollAttemptsBeforeChange(ctx context.Context, field graphql.CollectedField, obj *ConfigImageLightboxResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigImageLightboxResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScrollAttemptsBeforeChange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigInterfaceResult_menuItems(ctx context.Context, field graphql.CollectedField, obj *ConfigInterfaceResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigInterfaceResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MenuItems, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigInterfaceResult_soundOnPreview(ctx context.Context, field graphql.CollectedField, obj *ConfigInterfaceResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigInterfaceResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SoundOnPreview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigInterfaceResult_wallShowTitle(ctx context.Context, field graphql.CollectedField, obj *ConfigInterfaceResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigInterfaceResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WallShowTitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigInterfaceResult_wallPlayback(ctx context.Context, field graphql.CollectedField, obj *ConfigInterfaceResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigInterfaceResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WallPlayback, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigInterfaceResult_showScrubber(ctx context.Context, field graphql.CollectedField, obj *ConfigInterfaceResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigInterfaceResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShowScrubber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigInterfaceResult_maximumLoopDuration(ctx context.Context, field graphql.CollectedField, obj *ConfigInterfaceResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigInterfaceResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaximumLoopDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigInterfaceResult_noBrowser(ctx context.Context, field graphql.CollectedField, obj *ConfigInterfaceResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigInterfaceResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NoBrowser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigInterfaceResult_notificationsEnabled(ctx context.Context, field graphql.CollectedField, obj *ConfigInterfaceResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigInterfaceResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotificationsEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigInterfaceResult_autostartVideo(ctx context.Context, field graphql.CollectedField, obj *ConfigInterfaceResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigInterfaceResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AutostartVideo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigInterfaceResult_autostartVideoOnPlaySelected(ctx context.Context, field graphql.CollectedField, obj *ConfigInterfaceResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigInterfaceResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AutostartVideoOnPlaySelected, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigInterfaceResult_continuePlaylistDefault(ctx context.Context, field graphql.CollectedField, obj *ConfigInterfaceResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigInterfaceResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContinuePlaylistDefault, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigInterfaceResult_showStudioAsText(ctx context.Context, field graphql.CollectedField, obj *ConfigInterfaceResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigInterfaceResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShowStudioAsText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigInterfaceResult_css(ctx context.Context, field graphql.CollectedField, obj *ConfigInterfaceResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigInterfaceResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CSS, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigInterfaceResult_cssEnabled(ctx context.Context, field graphql.CollectedField, obj *ConfigInterfaceResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigInterfaceResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CSSEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigInterfaceResult_language(ctx context.Context, field graphql.CollectedField, obj *ConfigInterfaceResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigInterfaceResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Language, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigInterfaceResult_slideshowDelay(ctx context.Context, field graphql.CollectedField, obj *ConfigInterfaceResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigInterfaceResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SlideshowDelay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigInterfaceResult_imageLightbox(ctx context.Context, field graphql.CollectedField, obj *ConfigInterfaceResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigInterfaceResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageLightbox, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ConfigImageLightboxResult)
	fc.Result = res
	return ec.marshalNConfigImageLightboxResult2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigImageLightboxResult(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigInterfaceResult_disableDropdownCreate(ctx context.Context, field graphql.CollectedField, obj *ConfigInterfaceResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigInterfaceResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisableDropdownCreate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ConfigDisableDropdownCreate)
	fc.Result = res
	return ec.marshalNConfigDisableDropdownCreate2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigDisableDropdownCreate(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigInterfaceResult_disabledDropdownCreate(ctx context.Context, field graphql.CollectedField, obj *ConfigInterfaceResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigInterfaceResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisabledDropdownCreate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ConfigDisableDropdownCreate)
	fc.Result = res
	return ec.marshalNConfigDisableDropdownCreate2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigDisableDropdownCreate(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigInterfaceResult_handyKey(ctx context.Context, field graphql.CollectedField, obj *ConfigInterfaceResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigInterfaceResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HandyKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigInterfaceResult_funscriptOffset(ctx context.Context, field graphql.CollectedField, obj *ConfigInterfaceResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigInterfaceResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FunscriptOffset, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigResult_general(ctx context.Context, field graphql.CollectedField, obj *ConfigResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.General, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ConfigGeneralResult)
	fc.Result = res
	return ec.marshalNConfigGeneralResult2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigGeneralResult(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigResult_interface(ctx context.Context, field graphql.CollectedField, obj *ConfigResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interface, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ConfigInterfaceResult)
	fc.Result = res
	return ec.marshalNConfigInterfaceResult2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigInterfaceResult(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigResult_dlna(ctx context.Context, field graphql.CollectedField, obj *ConfigResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dlna, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ConfigDLNAResult)
	fc.Result = res
	return ec.marshalNConfigDLNAResult2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigDLNAResult(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigResult_scraping(ctx context.Context, field graphql.CollectedField, obj *ConfigResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scraping, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ConfigScrapingResult)
	fc.Result = res
	return ec.marshalNConfigScrapingResult2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigScrapingResult(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigResult_defaults(ctx context.Context, field graphql.CollectedField, obj *ConfigResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Defaults, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ConfigDefaultSettingsResult)
	fc.Result = res
	return ec.marshalNConfigDefaultSettingsResult2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigDefaultSettingsResult(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigResult_ui(ctx context.Context, field graphql.CollectedField, obj *ConfigResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalNMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigScrapingResult_scraperUserAgent(ctx context.Context, field graphql.CollectedField, obj *ConfigScrapingResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigScrapingResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScraperUserAgent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigScrapingResult_scraperCDPPath(ctx context.Context, field graphql.CollectedField, obj *ConfigScrapingResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigScrapingResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScraperCDPPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigScrapingResult_scraperCertCheck(ctx context.Context, field graphql.CollectedField, obj *ConfigScrapingResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigScrapingResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScraperCertCheck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigScrapingResult_excludeTagPatterns(ctx context.Context, field graphql.CollectedField, obj *ConfigScrapingResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigScrapingResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExcludeTagPatterns, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DLNAIP_ipAddress(ctx context.Context, field graphql.CollectedField, obj *Dlnaip) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DLNAIP",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DLNAIP_until(ctx context.Context, field graphql.CollectedField, obj *Dlnaip) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DLNAIP",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Until, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DLNAStatus_running(ctx context.Context, field graphql.CollectedField, obj *DLNAStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DLNAStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Running, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _DLNAStatus_until(ctx context.Context, field graphql.CollectedField, obj *DLNAStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DLNAStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Until, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DLNAStatus_recentIPAddresses(ctx context.Context, field graphql.CollectedField, obj *DLNAStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DLNAStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecentIPAddresses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DLNAStatus_allowedIPAddresses(ctx context.Context, field graphql.CollectedField, obj *DLNAStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DLNAStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowedIPAddresses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Dlnaip)
	fc.Result = res
	return ec.marshalNDLNAIP2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐDlnaipᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Directory_path(ctx context.Context, field graphql.CollectedField, obj *Directory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Directory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Directory_parent(ctx context.Context, field graphql.CollectedField, obj *Directory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Directory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Parent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Directory_directories(ctx context.Context, field graphql.CollectedField, obj *Directory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Directory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _FindGalleriesResultType_count(ctx context.Context, field graphql.CollectedField, obj *FindGalleriesResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FindGalleriesResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _FindGalleriesResultType_galleries(ctx context.Context, field graphql.CollectedField, obj *FindGalleriesResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FindGalleriesResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Galleries, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Gallery)
	fc.Result = res
	return ec.marshalNGallery2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGalleryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _FindImagesResultType_count(ctx context.Context, field graphql.CollectedField, obj *FindImagesResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FindImagesResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _FindImagesResultType_megapixels(ctx context.Context, field graphql.CollectedField, obj *FindImagesResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FindImagesResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Megapixels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _FindImagesResultType_filesize(ctx context.Context, field graphql.CollectedField, obj *FindImagesResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FindImagesResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Filesize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _FindImagesResultType_images(ctx context.Context, field graphql.CollectedField, obj *FindImagesResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FindImagesResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Images, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Image)
	fc.Result = res
	return ec.marshalNImage2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _FindMoviesResultType_count(ctx context.Context, field graphql.CollectedField, obj *FindMoviesResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FindMoviesResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _FindMoviesResultType_movies(ctx context.Context, field graphql.CollectedField, obj *FindMoviesResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FindMoviesResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Movies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Movie)
	fc.Result = res
	return ec.marshalNMovie2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMovieᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _FindPerformersResultType_count(ctx context.Context, field graphql.CollectedField, obj *FindPerformersResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FindPerformersResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _FindPerformersResultType_performers(ctx context.Context, field graphql.CollectedField, obj *FindPerformersResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FindPerformersResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Performers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Performer)
	fc.Result = res
	return ec.marshalNPerformer2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPerformerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _FindSceneMarkersResultType_count(ctx context.Context, field graphql.CollectedField, obj *FindSceneMarkersResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FindSceneMarkersResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _FindSceneMarkersResultType_scene_markers(ctx context.Context, field graphql.CollectedField, obj *FindSceneMarkersResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FindSceneMarkersResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SceneMarkers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*SceneMarker)
	fc.Result = res
	return ec.marshalNSceneMarker2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMarkerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _FindScenesResultType_count(ctx context.Context, field graphql.CollectedField, obj *FindScenesResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FindScenesResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _FindScenesResultType_duration(ctx context.Context, field graphql.CollectedField, obj *FindScenesResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FindScenesResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _FindScenesResultType_filesize(ctx context.Context, field graphql.CollectedField, obj *FindScenesResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FindScenesResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Filesize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _FindScenesResultType_scenes(ctx context.Context, field graphql.CollectedField, obj *FindScenesResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FindScenesResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scenes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Scene)
	fc.Result = res
	return ec.marshalNScene2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _FindStudiosResultType_count(ctx context.Context, field graphql.CollectedField, obj *FindStudiosResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FindStudiosResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _FindStudiosResultType_studios(ctx context.Context, field graphql.CollectedField, obj *FindStudiosResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FindStudiosResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Studios, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Studio)
	fc.Result = res
	return ec.marshalNStudio2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStudioᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _FindTagsResultType_count(ctx context.Context, field graphql.CollectedField, obj *FindTagsResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FindTagsResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _FindTagsResultType_tags(ctx context.Context, field graphql.CollectedField, obj *FindTagsResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FindTagsResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Tag)
	fc.Result = res
	return ec.marshalNTag2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTagᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Gallery_id(ctx context.Context, field graphql.CollectedField, obj *Gallery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Gallery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Gallery_checksum(ctx context.Context, field graphql.CollectedField, obj *Gallery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Gallery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Checksum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Gallery_path(ctx context.Context, field graphql.CollectedField, obj *Gallery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Gallery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gallery().Path(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Gallery_title(ctx context.Context, field graphql.CollectedField, obj *Gallery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Gallery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gallery().Title(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Gallery_url(ctx context.Context, field graphql.CollectedField, obj *Gallery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Gallery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gallery().URL(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Gallery_date(ctx context.Context, field graphql.CollectedField, obj *Gallery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Gallery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gallery().Date(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Gallery_details(ctx context.Context, field graphql.CollectedField, obj *Gallery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Gallery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gallery().Details(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Gallery_rating(ctx context.Context, field graphql.CollectedField, obj *Gallery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Gallery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gallery().Rating(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Gallery_organized(ctx context.Context, field graphql.CollectedField, obj *Gallery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Gallery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organized, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Gallery_created_at(ctx context.Context, field graphql.CollectedField, obj *Gallery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Gallery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gallery().CreatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Gallery_updated_at(ctx context.Context, field graphql.CollectedField, obj *Gallery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Gallery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gallery().UpdatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Gallery_file_mod_time(ctx context.Context, field graphql.CollectedField, obj *Gallery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Gallery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gallery().FileModTime(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Gallery_scenes(ctx context.Context, field graphql.CollectedField, obj *Gallery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Gallery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gallery().Scenes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Scene)
	fc.Result = res
	return ec.marshalNScene2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Gallery_studio(ctx context.Context, field graphql.CollectedField, obj *Gallery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Gallery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gallery().Studio(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Studio)
	fc.Result = res
	return ec.marshalOStudio2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStudio(ctx, field.Selections, res)
}

func (ec *executionContext) _Gallery_image_count(ctx context.Context, field graphql.CollectedField, obj *Gallery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Gallery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gallery().ImageCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Gallery_tags(ctx context.Context, field graphql.CollectedField, obj *Gallery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Gallery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gallery().Tags(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Tag)
	fc.Result = res
	return ec.marshalNTag2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTagᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Gallery_performers(ctx context.Context, field graphql.CollectedField, obj *Gallery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Gallery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gallery().Performers(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Performer)
	fc.Result = res
	return ec.marshalNPerformer2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPerformerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Gallery_images(ctx context.Context, field graphql.CollectedField, obj *Gallery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Gallery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gallery().Images(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Image)
	fc.Result = res
	return ec.marshalNImage2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Gallery_cover(ctx context.Context, field graphql.CollectedField, obj *Gallery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Gallery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gallery().Cover(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _GalleryFilesType_index(ctx context.Context, field graphql.CollectedField, obj *GalleryFilesType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GalleryFilesType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Index, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _GalleryFilesType_name(ctx context.Context, field graphql.CollectedField, obj *GalleryFilesType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GalleryFilesType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GalleryFilesType_path(ctx context.Context, field graphql.CollectedField, obj *GalleryFilesType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GalleryFilesType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GenerateMetadataOptions_sprites(ctx context.Context, field graphql.CollectedField, obj *GenerateMetadataOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GenerateMetadataOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sprites, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _GenerateMetadataOptions_previews(ctx context.Context, field graphql.CollectedField, obj *GenerateMetadataOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GenerateMetadataOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Previews, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _GenerateMetadataOptions_imagePreviews(ctx context.Context, field graphql.CollectedField, obj *GenerateMetadataOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GenerateMetadataOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImagePreviews, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _GenerateMetadataOptions_previewOptions(ctx context.Context, field graphql.CollectedField, obj *GenerateMetadataOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GenerateMetadataOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewOptions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*GeneratePreviewOptions)
	fc.Result = res
	return ec.marshalOGeneratePreviewOptions2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGeneratePreviewOptions(ctx, field.Selections, res)
}

func (ec *executionContext) _GenerateMetadataOptions_markers(ctx context.Context, field graphql.CollectedField, obj *GenerateMetadataOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GenerateMetadataOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Markers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _GenerateMetadataOptions_markerImagePreviews(ctx context.Context, field graphql.CollectedField, obj *GenerateMetadataOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GenerateMetadataOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MarkerImagePreviews, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _GenerateMetadataOptions_markerScreenshots(ctx context.Context, field graphql.CollectedField, obj *GenerateMetadataOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GenerateMetadataOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MarkerScreenshots, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _GenerateMetadataOptions_transcodes(ctx context.Context, field graphql.CollectedField, obj *GenerateMetadataOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GenerateMetadataOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Transcodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _GenerateMetadataOptions_phashes(ctx context.Context, field graphql.CollectedField, obj *GenerateMetadataOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GenerateMetadataOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phashes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _GenerateMetadataOptions_interactiveHeatmapsSpeeds(ctx context.Context, field graphql.CollectedField, obj *GenerateMetadataOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GenerateMetadataOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteractiveHeatmapsSpeeds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _GeneratePreviewOptions_previewSegments(ctx context.Context, field graphql.CollectedField, obj *GeneratePreviewOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GeneratePreviewOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewSegments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _GeneratePreviewOptions_previewSegmentDuration(ctx context.Context, field graphql.CollectedField, obj *GeneratePreviewOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GeneratePreviewOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewSegmentDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _GeneratePreviewOptions_previewExcludeStart(ctx context.Context, field graphql.CollectedField, obj *GeneratePreviewOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GeneratePreviewOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewExcludeStart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GeneratePreviewOptions_previewExcludeEnd(ctx context.Context, field graphql.CollectedField, obj *GeneratePreviewOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GeneratePreviewOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewExcludeEnd, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GeneratePreviewOptions_previewPreset(ctx context.Context, field graphql.CollectedField, obj *GeneratePreviewOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GeneratePreviewOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviewPreset, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*PreviewPreset)
	fc.Result = res
	return ec.marshalOPreviewPreset2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPreviewPreset(ctx, field.Selections, res)
}

func (ec *executionContext) _IdentifyFieldOptions_field(ctx context.Context, field graphql.CollectedField, obj *IdentifyFieldOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IdentifyFieldOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IdentifyFieldOptions_strategy(ctx context.Context, field graphql.CollectedField, obj *IdentifyFieldOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IdentifyFieldOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Strategy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(IdentifyFieldStrategy)
	fc.Result = res
	return ec.marshalNIdentifyFieldStrategy2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifyFieldStrategy(ctx, field.Selections, res)
}

func (ec *executionContext) _IdentifyFieldOptions_createMissing(ctx context.Context, field graphql.CollectedField, obj *IdentifyFieldOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IdentifyFieldOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateMissing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _IdentifyMetadataOptions_fieldOptions(ctx context.Context, field graphql.CollectedField, obj *IdentifyMetadataOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IdentifyMetadataOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FieldOptions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*IdentifyFieldOptions)
	fc.Result = res
	return ec.marshalOIdentifyFieldOptions2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifyFieldOptionsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _IdentifyMetadataOptions_setCoverImage(ctx context.Context, field graphql.CollectedField, obj *IdentifyMetadataOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IdentifyMetadataOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SetCoverImage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _IdentifyMetadataOptions_setOrganized(ctx context.Context, field graphql.CollectedField, obj *IdentifyMetadataOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IdentifyMetadataOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SetOrganized, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _IdentifyMetadataOptions_includeMalePerformers(ctx context.Context, field graphql.CollectedField, obj *IdentifyMetadataOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IdentifyMetadataOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IncludeMalePerformers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _IdentifyMetadataTaskOptions_sources(ctx context.Context, field graphql.CollectedField, obj *IdentifyMetadataTaskOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IdentifyMetadataTaskOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sources, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*IdentifySource)
	fc.Result = res
	return ec.marshalNIdentifySource2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifySourceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _IdentifyMetadataTaskOptions_options(ctx context.Context, field graphql.CollectedField, obj *IdentifyMetadataTaskOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IdentifyMetadataTaskOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*IdentifyMetadataOptions)
	fc.Result = res
	return ec.marshalOIdentifyMetadataOptions2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifyMetadataOptions(ctx, field.Selections, res)
}

func (ec *executionContext) _IdentifySource_source(ctx context.Context, field graphql.CollectedField, obj *IdentifySource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IdentifySource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ScraperSource)
	fc.Result = res
	return ec.marshalNScraperSource2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScraperSource(ctx, field.Selections, res)
}

func (ec *executionContext) _IdentifySource_options(ctx context.Context, field graphql.CollectedField, obj *IdentifySource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IdentifySource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*IdentifyMetadataOptions)
	fc.Result = res
	return ec.marshalOIdentifyMetadataOptions2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifyMetadataOptions(ctx, field.Selections, res)
}

func (ec *executionContext) _Image_id(ctx context.Context, field graphql.CollectedField, obj *Image) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Image_checksum(ctx context.Context, field graphql.CollectedField, obj *Image) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Checksum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Image_title(ctx context.Context, field graphql.CollectedField, obj *Image) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Image().Title(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Image_rating(ctx context.Context, field graphql.CollectedField, obj *Image) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Image().Rating(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Image_o_counter(ctx context.Context, field graphql.CollectedField, obj *Image) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OCounter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Image_organized(ctx context.Context, field graphql.CollectedField, obj *Image) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organized, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Image_path(ctx context.Context, field graphql.CollectedField, obj *Image) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Image_created_at(ctx context.Context, field graphql.CollectedField, obj *Image) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Image().CreatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Image_updated_at(ctx context.Context, field graphql.CollectedField, obj *Image) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Image().UpdatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Image_file_mod_time(ctx context.Context, field graphql.CollectedField, obj *Image) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Image().FileModTime(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Image_file(ctx context.Context, field graphql.CollectedField, obj *Image) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Image().File(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ImageFileType)
	fc.Result = res
	return ec.marshalNImageFileType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImageFileType(ctx, field.Selections, res)
}

func (ec *executionContext) _Image_paths(ctx context.Context, field graphql.CollectedField, obj *Image) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Image().Paths(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ImagePathsType)
	fc.Result = res
	return ec.marshalNImagePathsType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImagePathsType(ctx, field.Selections, res)
}

func (ec *executionContext) _Image_galleries(ctx context.Context, field graphql.CollectedField, obj *Image) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Image().Galleries(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Gallery)
	fc.Result = res
	return ec.marshalNGallery2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGalleryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Image_studio(ctx context.Context, field graphql.CollectedField, obj *Image) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Image().Studio(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Studio)
	fc.Result = res
	return ec.marshalOStudio2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStudio(ctx, field.Selections, res)
}

func (ec *executionContext) _Image_tags(ctx context.Context, field graphql.CollectedField, obj *Image) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Image().Tags(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Tag)
	fc.Result = res
	return ec.marshalNTag2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTagᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Image_performers(ctx context.Context, field graphql.CollectedField, obj *Image) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Image",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Image().Performers(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Performer)
	fc.Result = res
	return ec.marshalNPerformer2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPerformerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ImageFileType_size(ctx context.Context, field graphql.CollectedField, obj *ImageFileType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ImageFileType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Size, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ImageFileType_width(ctx context.Context, field graphql.CollectedField, obj *ImageFileType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ImageFileType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Width, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ImageFileType_height(ctx context.Context, field graphql.CollectedField, obj *ImageFileType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ImageFileType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Height, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ImagePathsType_thumbnail(ctx context.Context, field graphql.CollectedField, obj *ImagePathsType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ImagePathsType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Thumbnail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ImagePathsType_image(ctx context.Context, field graphql.CollectedField, obj *ImagePathsType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ImagePathsType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_id(ctx context.Context, field graphql.CollectedField, obj *Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_status(ctx context.Context, field graphql.CollectedField, obj *Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(JobStatus)
	fc.Result = res
	return ec.marshalNJobStatus2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐJobStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_subTasks(ctx context.Context, field graphql.CollectedField, obj *Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubTasks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_description(ctx context.Context, field graphql.CollectedField, obj *Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_progress(ctx context.Context, field graphql.CollectedField, obj *Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_startTime(ctx context.Context, field graphql.CollectedField, obj *Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_endTime(ctx context.Context, field graphql.CollectedField, obj *Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Job_addTime(ctx context.Context, field graphql.CollectedField, obj *Job) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Job",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _JobStatusUpdate_type(ctx context.Context, field graphql.CollectedField, obj *JobStatusUpdate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobStatusUpdate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(JobStatusUpdateType)
	fc.Result = res
	return ec.marshalNJobStatusUpdateType2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐJobStatusUpdateType(ctx, field.Selections, res)
}

func (ec *executionContext) _JobStatusUpdate_job(ctx context.Context, field graphql.CollectedField, obj *JobStatusUpdate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JobStatusUpdate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Job, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Job)
	fc.Result = res
	return ec.marshalNJob2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐJob(ctx, field.Selections, res)
}

func (ec *executionContext) _LogEntry_time(ctx context.Context, field graphql.CollectedField, obj *LogEntry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LogEntry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Time, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LogEntry_level(ctx context.Context, field graphql.CollectedField, obj *LogEntry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LogEntry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Level, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(LogLevel)
	fc.Result = res
	return ec.marshalNLogLevel2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐLogLevel(ctx, field.Selections, res)
}

func (ec *executionContext) _LogEntry_message(ctx context.Context, field graphql.CollectedField, obj *LogEntry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LogEntry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MarkerStringsResultType_count(ctx context.Context, field graphql.CollectedField, obj *MarkerStringsResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MarkerStringsResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _MarkerStringsResultType_id(ctx context.Context, field graphql.CollectedField, obj *MarkerStringsResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MarkerStringsResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MarkerStringsResultType_title(ctx context.Context, field graphql.CollectedField, obj *MarkerStringsResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MarkerStringsResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Movie_id(ctx context.Context, field graphql.CollectedField, obj *Movie) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Movie",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Movie_checksum(ctx context.Context, field graphql.CollectedField, obj *Movie) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Movie",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Checksum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Movie_name(ctx context.Context, field graphql.CollectedField, obj *Movie) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Movie",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Movie().Name(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Movie_aliases(ctx context.Context, field graphql.CollectedField, obj *Movie) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Movie",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Movie().Aliases(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Movie_duration(ctx context.Context, field graphql.CollectedField, obj *Movie) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Movie",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Movie().Duration(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Movie_date(ctx context.Context, field graphql.CollectedField, obj *Movie) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Movie",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Movie().Date(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Movie_rating(ctx context.Context, field graphql.CollectedField, obj *Movie) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Movie",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Movie().Rating(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Movie_studio(ctx context.Context, field graphql.CollectedField, obj *Movie) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Movie",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Movie().Studio(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Studio)
	fc.Result = res
	return ec.marshalOStudio2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStudio(ctx, field.Selections, res)
}

func (ec *executionContext) _Movie_director(ctx context.Context, field graphql.CollectedField, obj *Movie) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Movie",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Movie().Director(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Movie_synopsis(ctx context.Context, field graphql.CollectedField, obj *Movie) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Movie",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Movie().Synopsis(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Movie_url(ctx context.Context, field graphql.CollectedField, obj *Movie) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Movie",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Movie().URL(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Movie_created_at(ctx context.Context, field graphql.CollectedField, obj *Movie) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Movie",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Movie().CreatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Movie_updated_at(ctx context.Context, field graphql.CollectedField, obj *Movie) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Movie",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Movie().UpdatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Movie_front_image_path(ctx context.Context, field graphql.CollectedField, obj *Movie) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Movie",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Movie().FrontImagePath(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Movie_back_image_path(ctx context.Context, field graphql.CollectedField, obj *Movie) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Movie",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Movie().BackImagePath(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Movie_scene_count(ctx context.Context, field graphql.CollectedField, obj *Movie) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Movie",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Movie().SceneCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Movie_scenes(ctx context.Context, field graphql.CollectedField, obj *Movie) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Movie",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Movie().Scenes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Scene)
	fc.Result = res
	return ec.marshalNScene2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_setup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_setup_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Setup(rctx, args["input"].(SetupInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_migrate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_migrate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Migrate(rctx, args["input"].(MigrateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_sceneUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_sceneUpdate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SceneUpdate(rctx, args["input"].(SceneUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Scene)
	fc.Result = res
	return ec.marshalOScene2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScene(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_bulkSceneUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_bulkSceneUpdate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BulkSceneUpdate(rctx, args["input"].(BulkSceneUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*Scene)
	fc.Result = res
	return ec.marshalOScene2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_sceneDestroy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_sceneDestroy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SceneDestroy(rctx, args["input"].(SceneDestroyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_scenesDestroy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_scenesDestroy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ScenesDestroy(rctx, args["input"].(ScenesDestroyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_scenesUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_scenesUpdate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ScenesUpdate(rctx, args["input"].([]*SceneUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*Scene)
	fc.Result = res
	return ec.marshalOScene2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScene(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_sceneIncrementO(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_sceneIncrementO_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SceneIncrementO(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_sceneDecrementO(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_sceneDecrementO_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SceneDecrementO(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_sceneResetO(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_sceneResetO_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SceneResetO(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_sceneGenerateScreenshot(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_sceneGenerateScreenshot_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SceneGenerateScreenshot(rctx, args["id"].(string), args["at"].(*float64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_sceneMarkerCreate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_sceneMarkerCreate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SceneMarkerCreate(rctx, args["input"].(SceneMarkerCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*SceneMarker)
	fc.Result = res
	return ec.marshalOSceneMarker2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMarker(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_sceneMarkerUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_sceneMarkerUpdate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SceneMarkerUpdate(rctx, args["input"].(SceneMarkerUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*SceneMarker)
	fc.Result = res
	return ec.marshalOSceneMarker2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMarker(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_sceneMarkerDestroy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_sceneMarkerDestroy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SceneMarkerDestroy(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_imageUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_imageUpdate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ImageUpdate(rctx, args["input"].(ImageUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_bulkImageUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_bulkImageUpdate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BulkImageUpdate(rctx, args["input"].(BulkImageUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*Image)
	fc.Result = res
	return ec.marshalOImage2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_imageDestroy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_imageDestroy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ImageDestroy(rctx, args["input"].(ImageDestroyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_imagesDestroy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_imagesDestroy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ImagesDestroy(rctx, args["input"].(ImagesDestroyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_imagesUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_imagesUpdate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ImagesUpdate(rctx, args["input"].([]*ImageUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*Image)
	fc.Result = res
	return ec.marshalOImage2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_imageIncrementO(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_imageIncrementO_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ImageIncrementO(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_imageDecrementO(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_imageDecrementO_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ImageDecrementO(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_imageResetO(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_imageResetO_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ImageResetO(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_galleryCreate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_galleryCreate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().GalleryCreate(rctx, args["input"].(GalleryCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Gallery)
	fc.Result = res
	return ec.marshalOGallery2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGallery(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_galleryUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_galleryUpdate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().GalleryUpdate(rctx, args["input"].(GalleryUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Gallery)
	fc.Result = res
	return ec.marshalOGallery2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGallery(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_bulkGalleryUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_bulkGalleryUpdate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BulkGalleryUpdate(rctx, args["input"].(BulkGalleryUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*Gallery)
	fc.Result = res
	return ec.marshalOGallery2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGalleryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_galleryDestroy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_galleryDestroy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().GalleryDestroy(rctx, args["input"].(GalleryDestroyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_galleriesUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_galleriesUpdate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().GalleriesUpdate(rctx, args["input"].([]*GalleryUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*Gallery)
	fc.Result = res
	return ec.marshalOGallery2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGallery(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addGalleryImages(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addGalleryImages_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddGalleryImages(rctx, args["input"].(GalleryAddInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_removeGalleryImages(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_removeGalleryImages_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemoveGalleryImages(rctx, args["input"].(GalleryRemoveInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_performerCreate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_performerCreate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PerformerCreate(rctx, args["input"].(PerformerCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Performer)
	fc.Result = res
	return ec.marshalOPerformer2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPerformer(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_performerUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_performerUpdate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PerformerUpdate(rctx, args["input"].(PerformerUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Performer)
	fc.Result = res
	return ec.marshalOPerformer2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPerformer(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_performerDestroy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_performerDestroy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PerformerDestroy(rctx, args["input"].(PerformerDestroyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_performersDestroy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_performersDestroy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PerformersDestroy(rctx, args["ids"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_bulkPerformerUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_bulkPerformerUpdate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BulkPerformerUpdate(rctx, args["input"].(BulkPerformerUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*Performer)
	fc.Result = res
	return ec.marshalOPerformer2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPerformerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_studioCreate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_studioCreate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StudioCreate(rctx, args["input"].(StudioCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Studio)
	fc.Result = res
	return ec.marshalOStudio2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStudio(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_studioUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_studioUpdate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StudioUpdate(rctx, args["input"].(StudioUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Studio)
	fc.Result = res
	return ec.marshalOStudio2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStudio(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_studioDestroy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_studioDestroy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StudioDestroy(rctx, args["input"].(StudioDestroyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_studiosDestroy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_studiosDestroy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StudiosDestroy(rctx, args["ids"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_movieCreate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_movieCreate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MovieCreate(rctx, args["input"].(MovieCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Movie)
	fc.Result = res
	return ec.marshalOMovie2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMovie(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_movieUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_movieUpdate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MovieUpdate(rctx, args["input"].(MovieUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Movie)
	fc.Result = res
	return ec.marshalOMovie2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMovie(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_movieDestroy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_movieDestroy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MovieDestroy(rctx, args["input"].(MovieDestroyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_moviesDestroy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_moviesDestroy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MoviesDestroy(rctx, args["ids"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_bulkMovieUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_bulkMovieUpdate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BulkMovieUpdate(rctx, args["input"].(BulkMovieUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*Movie)
	fc.Result = res
	return ec.marshalOMovie2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMovieᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_tagCreate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_tagCreate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TagCreate(rctx, args["input"].(TagCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Tag)
	fc.Result = res
	return ec.marshalOTag2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTag(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_tagUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_tagUpdate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TagUpdate(rctx, args["input"].(TagUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Tag)
	fc.Result = res
	return ec.marshalOTag2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTag(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_tagDestroy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_tagDestroy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TagDestroy(rctx, args["input"].(TagDestroyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_tagsDestroy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_tagsDestroy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TagsDestroy(rctx, args["ids"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_tagsMerge(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_tagsMerge_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TagsMerge(rctx, args["input"].(TagsMergeInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Tag)
	fc.Result = res
	return ec.marshalOTag2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTag(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_saveFilter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_saveFilter_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SaveFilter(rctx, args["input"].(SaveFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*SavedFilter)
	fc.Result = res
	return ec.marshalNSavedFilter2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSavedFilter(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_destroySavedFilter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_destroySavedFilter_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DestroySavedFilter(rctx, args["input"].(DestroyFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_setDefaultFilter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_setDefaultFilter_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetDefaultFilter(rctx, args["input"].(SetDefaultFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_configureGeneral(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_configureGeneral_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ConfigureGeneral(rctx, args["input"].(ConfigGeneralInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ConfigGeneralResult)
	fc.Result = res
	return ec.marshalNConfigGeneralResult2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigGeneralResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_configureInterface(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_configureInterface_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ConfigureInterface(rctx, args["input"].(ConfigInterfaceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ConfigInterfaceResult)
	fc.Result = res
	return ec.marshalNConfigInterfaceResult2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigInterfaceResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_configureDLNA(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_configureDLNA_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ConfigureDlna(rctx, args["input"].(ConfigDLNAInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ConfigDLNAResult)
	fc.Result = res
	return ec.marshalNConfigDLNAResult2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigDLNAResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_configureScraping(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_configureScraping_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ConfigureScraping(rctx, args["input"].(ConfigScrapingInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ConfigScrapingResult)
	fc.Result = res
	return ec.marshalNConfigScrapingResult2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigScrapingResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_configureDefaults(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_configureDefaults_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ConfigureDefaults(rctx, args["input"].(ConfigDefaultSettingsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ConfigDefaultSettingsResult)
	fc.Result = res
	return ec.marshalNConfigDefaultSettingsResult2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigDefaultSettingsResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_configureUI(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_configureUI_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ConfigureUI(rctx, args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalNMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_configureUISetting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_configureUISetting_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ConfigureUISetting(rctx, args["key"].(string), args["value"].(interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalNMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_generateAPIKey(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_generateAPIKey_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().GenerateAPIKey(rctx, args["input"].(GenerateAPIKeyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_exportObjects(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_exportObjects_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ExportObjects(rctx, args["input"].(ExportObjectsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_importObjects(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_importObjects_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ImportObjects(rctx, args["input"].(ImportObjectsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_metadataImport(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MetadataImport(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_metadataExport(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MetadataExport(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_metadataScan(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_metadataScan_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MetadataScan(rctx, args["input"].(ScanMetadataInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_metadataGenerate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_metadataGenerate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MetadataGenerate(rctx, args["input"].(GenerateMetadataInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_metadataAutoTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_metadataAutoTag_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MetadataAutoTag(rctx, args["input"].(AutoTagMetadataInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_metadataClean(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_metadataClean_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MetadataClean(rctx, args["input"].(CleanMetadataInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_metadataIdentify(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_metadataIdentify_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MetadataIdentify(rctx, args["input"].(IdentifyMetadataInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_migrateHashNaming(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MigrateHashNaming(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_reloadScrapers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ReloadScrapers(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_runPluginTask(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_runPluginTask_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RunPluginTask(rctx, args["plugin_id"].(string), args["task_name"].(string), args["args"].([]*PluginArgInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_reloadPlugins(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ReloadPlugins(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_stopJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_stopJob_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StopJob(rctx, args["job_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_stopAllJobs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StopAllJobs(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_submitStashBoxFingerprints(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_submitStashBoxFingerprints_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SubmitStashBoxFingerprints(rctx, args["input"].(StashBoxFingerprintSubmissionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_submitStashBoxSceneDraft(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_submitStashBoxSceneDraft_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SubmitStashBoxSceneDraft(rctx, args["input"].(StashBoxDraftSubmissionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_submitStashBoxPerformerDraft(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_submitStashBoxPerformerDraft_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SubmitStashBoxPerformerDraft(rctx, args["input"].(StashBoxDraftSubmissionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_backupDatabase(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_backupDatabase_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BackupDatabase(rctx, args["input"].(BackupDatabaseInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_stashBoxBatchPerformerTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_stashBoxBatchPerformerTag_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StashBoxBatchPerformerTag(rctx, args["input"].(StashBoxBatchPerformerTagInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_enableDLNA(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_enableDLNA_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EnableDlna(rctx, args["input"].(EnableDLNAInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_disableDLNA(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_disableDLNA_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DisableDlna(rctx, args["input"].(DisableDLNAInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addTempDLNAIP(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addTempDLNAIP_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddTempDlnaip(rctx, args["input"].(AddTempDLNAIPInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_removeTempDLNAIP(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_removeTempDLNAIP_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemoveTempDlnaip(rctx, args["input"].(RemoveTempDLNAIPInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_id(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_checksum(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Checksum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_name(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().Name(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_url(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().URL(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_gender(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().Gender(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*GenderEnum)
	fc.Result = res
	return ec.marshalOGenderEnum2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGenderEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_twitter(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().Twitter(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_instagram(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().Instagram(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_birthdate(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().Birthdate(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_ethnicity(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().Ethnicity(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_country(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().Country(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_eye_color(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().EyeColor(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_height(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().Height(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_measurements(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().Measurements(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_fake_tits(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().FakeTits(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_career_length(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().CareerLength(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_tattoos(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().Tattoos(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_piercings(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().Piercings(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_aliases(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().Aliases(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_favorite(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().Favorite(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_tags(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().Tags(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Tag)
	fc.Result = res
	return ec.marshalNTag2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTagᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_ignore_auto_tag(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IgnoreAutoTag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_image_path(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().ImagePath(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_scene_count(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().SceneCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_image_count(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().ImageCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_gallery_count(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().GalleryCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_scenes(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().Scenes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Scene)
	fc.Result = res
	return ec.marshalNScene2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_stash_ids(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().StashIds(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*StashID)
	fc.Result = res
	return ec.marshalNStashID2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashIDᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_rating(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().Rating(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_details(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().Details(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_death_date(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().DeathDate(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_hair_color(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().HairColor(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_weight(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().Weight(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_created_at(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().CreatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_updated_at(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().UpdatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_movie_count(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().MovieCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Performer_movies(ctx context.Context, field graphql.CollectedField, obj *Performer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Performer",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Performer().Movies(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Movie)
	fc.Result = res
	return ec.marshalNMovie2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMovieᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Plugin_id(ctx context.Context, field graphql.CollectedField, obj *Plugin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Plugin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Plugin_name(ctx context.Context, field graphql.CollectedField, obj *Plugin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Plugin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Plugin_description(ctx context.Context, field graphql.CollectedField, obj *Plugin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Plugin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Plugin_url(ctx context.Context, field graphql.CollectedField, obj *Plugin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Plugin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Plugin_version(ctx context.Context, field graphql.CollectedField, obj *Plugin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Plugin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Plugin_tasks(ctx context.Context, field graphql.CollectedField, obj *Plugin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Plugin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tasks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*PluginTask)
	fc.Result = res
	return ec.marshalOPluginTask2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPluginTaskᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Plugin_hooks(ctx context.Context, field graphql.CollectedField, obj *Plugin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Plugin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hooks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*PluginHook)
	fc.Result = res
	return ec.marshalOPluginHook2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPluginHookᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PluginHook_name(ctx context.Context, field graphql.CollectedField, obj *PluginHook) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PluginHook",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PluginHook_description(ctx context.Context, field graphql.CollectedField, obj *PluginHook) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PluginHook",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PluginHook_hooks(ctx context.Context, field graphql.CollectedField, obj *PluginHook) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PluginHook",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hooks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PluginHook_plugin(ctx context.Context, field graphql.CollectedField, obj *PluginHook) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PluginHook",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Plugin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Plugin)
	fc.Result = res
	return ec.marshalNPlugin2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPlugin(ctx, field.Selections, res)
}

func (ec *executionContext) _PluginResult_error(ctx context.Context, field graphql.CollectedField, obj *PluginResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PluginResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PluginResult_result(ctx context.Context, field graphql.CollectedField, obj *PluginResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PluginResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Result, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PluginTask_name(ctx context.Context, field graphql.CollectedField, obj *PluginTask) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PluginTask",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PluginTask_description(ctx context.Context, field graphql.CollectedField, obj *PluginTask) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PluginTask",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PluginTask_plugin(ctx context.Context, field graphql.CollectedField, obj *PluginTask) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PluginTask",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Plugin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Plugin)
	fc.Result = res
	return ec.marshalNPlugin2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPlugin(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findSavedFilter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findSavedFilter_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindSavedFilter(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*SavedFilter)
	fc.Result = res
	return ec.marshalOSavedFilter2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSavedFilter(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findSavedFilters(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findSavedFilters_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindSavedFilters(rctx, args["mode"].(*FilterMode))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*SavedFilter)
	fc.Result = res
	return ec.marshalNSavedFilter2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSavedFilterᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findDefaultFilter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findDefaultFilter_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindDefaultFilter(rctx, args["mode"].(FilterMode))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*SavedFilter)
	fc.Result = res
	return ec.marshalOSavedFilter2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSavedFilter(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findScene(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findScene_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindScene(rctx, args["id"].(*string), args["checksum"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Scene)
	fc.Result = res
	return ec.marshalOScene2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScene(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findSceneByHash(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findSceneByHash_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindSceneByHash(rctx, args["input"].(SceneHashInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Scene)
	fc.Result = res
	return ec.marshalOScene2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScene(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findScenes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findScenes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindScenes(rctx, args["scene_filter"].(*SceneFilterType), args["scene_ids"].([]int), args["filter"].(*FindFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*FindScenesResultType)
	fc.Result = res
	return ec.marshalNFindScenesResultType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindScenesResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findScenesByPathRegex(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findScenesByPathRegex_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindScenesByPathRegex(rctx, args["filter"].(*FindFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*FindScenesResultType)
	fc.Result = res
	return ec.marshalNFindScenesResultType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindScenesResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findDuplicateScenes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findDuplicateScenes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindDuplicateScenes(rctx, args["distance"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([][]*Scene)
	fc.Result = res
	return ec.marshalNScene2ᚕᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_sceneStreams(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_sceneStreams_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SceneStreams(rctx, args["id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*SceneStreamEndpoint)
	fc.Result = res
	return ec.marshalNSceneStreamEndpoint2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneStreamEndpointᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_parseSceneFilenames(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_parseSceneFilenames_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ParseSceneFilenames(rctx, args["filter"].(*FindFilterType), args["config"].(SceneParserInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*SceneParserResultType)
	fc.Result = res
	return ec.marshalNSceneParserResultType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneParserResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findSceneMarkers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findSceneMarkers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindSceneMarkers(rctx, args["scene_marker_filter"].(*SceneMarkerFilterType), args["filter"].(*FindFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*FindSceneMarkersResultType)
	fc.Result = res
	return ec.marshalNFindSceneMarkersResultType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindSceneMarkersResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findImage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findImage_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindImage(rctx, args["id"].(*string), args["checksum"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findImages(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findImages_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindImages(rctx, args["image_filter"].(*ImageFilterType), args["image_ids"].([]int), args["filter"].(*FindFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*FindImagesResultType)
	fc.Result = res
	return ec.marshalNFindImagesResultType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindImagesResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findPerformer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findPerformer_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindPerformer(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Performer)
	fc.Result = res
	return ec.marshalOPerformer2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPerformer(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findPerformers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findPerformers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindPerformers(rctx, args["performer_filter"].(*PerformerFilterType), args["filter"].(*FindFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*FindPerformersResultType)
	fc.Result = res
	return ec.marshalNFindPerformersResultType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindPerformersResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findStudio(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findStudio_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindStudio(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Studio)
	fc.Result = res
	return ec.marshalOStudio2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStudio(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findStudios(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findStudios_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindStudios(rctx, args["studio_filter"].(*StudioFilterType), args["filter"].(*FindFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*FindStudiosResultType)
	fc.Result = res
	return ec.marshalNFindStudiosResultType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindStudiosResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findMovie(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findMovie_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindMovie(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Movie)
	fc.Result = res
	return ec.marshalOMovie2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMovie(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findMovies(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findMovies_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindMovies(rctx, args["movie_filter"].(*MovieFilterType), args["filter"].(*FindFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*FindMoviesResultType)
	fc.Result = res
	return ec.marshalNFindMoviesResultType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindMoviesResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findGallery(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findGallery_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindGallery(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Gallery)
	fc.Result = res
	return ec.marshalOGallery2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGallery(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findGalleries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findGalleries_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindGalleries(rctx, args["gallery_filter"].(*GalleryFilterType), args["filter"].(*FindFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*FindGalleriesResultType)
	fc.Result = res
	return ec.marshalNFindGalleriesResultType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindGalleriesResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findTag_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindTag(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Tag)
	fc.Result = res
	return ec.marshalOTag2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTag(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findTags(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findTags_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindTags(rctx, args["tag_filter"].(*TagFilterType), args["filter"].(*FindFilterType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*FindTagsResultType)
	fc.Result = res
	return ec.marshalNFindTagsResultType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindTagsResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_markerWall(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_markerWall_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MarkerWall(rctx, args["q"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*SceneMarker)
	fc.Result = res
	return ec.marshalNSceneMarker2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMarkerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_sceneWall(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_sceneWall_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SceneWall(rctx, args["q"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Scene)
	fc.Result = res
	return ec.marshalNScene2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_markerStrings(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_markerStrings_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MarkerStrings(rctx, args["q"].(*string), args["sort"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*MarkerStringsResultType)
	fc.Result = res
	return ec.marshalNMarkerStringsResultType2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMarkerStringsResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_stats(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Stats(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*StatsResultType)
	fc.Result = res
	return ec.marshalNStatsResultType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStatsResultType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_sceneMarkerTags(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_sceneMarkerTags_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SceneMarkerTags(rctx, args["scene_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*SceneMarkerTag)
	fc.Result = res
	return ec.marshalNSceneMarkerTag2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMarkerTagᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_logs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Logs(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*LogEntry)
	fc.Result = res
	return ec.marshalNLogEntry2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐLogEntryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_listScrapers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_listScrapers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListScrapers(rctx, args["types"].([]ScrapeContentType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Scraper)
	fc.Result = res
	return ec.marshalNScraper2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScraperᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_listPerformerScrapers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListPerformerScrapers(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Scraper)
	fc.Result = res
	return ec.marshalNScraper2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScraperᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_listSceneScrapers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListSceneScrapers(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Scraper)
	fc.Result = res
	return ec.marshalNScraper2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScraperᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_listGalleryScrapers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListGalleryScrapers(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Scraper)
	fc.Result = res
	return ec.marshalNScraper2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScraperᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_listMovieScrapers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListMovieScrapers(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Scraper)
	fc.Result = res
	return ec.marshalNScraper2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScraperᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_scrapeSingleScene(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_scrapeSingleScene_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ScrapeSingleScene(rctx, args["source"].(ScraperSourceInput), args["input"].(ScrapeSingleSceneInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ScrapedScene)
	fc.Result = res
	return ec.marshalNScrapedScene2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedSceneᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_scrapeMultiScenes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_scrapeMultiScenes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ScrapeMultiScenes(rctx, args["source"].(ScraperSourceInput), args["input"].(ScrapeMultiScenesInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([][]*ScrapedScene)
	fc.Result = res
	return ec.marshalNScrapedScene2ᚕᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedSceneᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_scrapeSinglePerformer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_scrapeSinglePerformer_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ScrapeSinglePerformer(rctx, args["source"].(ScraperSourceInput), args["input"].(ScrapeSinglePerformerInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ScrapedPerformer)
	fc.Result = res
	return ec.marshalNScrapedPerformer2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedPerformerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_scrapeMultiPerformers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_scrapeMultiPerformers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ScrapeMultiPerformers(rctx, args["source"].(ScraperSourceInput), args["input"].(ScrapeMultiPerformersInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([][]*ScrapedPerformer)
	fc.Result = res
	return ec.marshalNScrapedPerformer2ᚕᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedPerformerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_scrapeSingleGallery(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_scrapeSingleGallery_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ScrapeSingleGallery(rctx, args["source"].(ScraperSourceInput), args["input"].(ScrapeSingleGalleryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ScrapedGallery)
	fc.Result = res
	return ec.marshalNScrapedGallery2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedGalleryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_scrapeSingleMovie(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_scrapeSingleMovie_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ScrapeSingleMovie(rctx, args["source"].(ScraperSourceInput), args["input"].(ScrapeSingleMovieInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ScrapedMovie)
	fc.Result = res
	return ec.marshalNScrapedMovie2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedMovieᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_scrapeURL(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_scrapeURL_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ScrapeURL(rctx, args["url"].(string), args["ty"].(ScrapeContentType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(ScrapedContent)
	fc.Result = res
	return ec.marshalOScrapedContent2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedContent(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_scrapePerformerURL(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_scrapePerformerURL_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ScrapePerformerURL(rctx, args["url"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ScrapedPerformer)
	fc.Result = res
	return ec.marshalOScrapedPerformer2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedPerformer(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_scrapeSceneURL(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_scrapeSceneURL_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ScrapeSceneURL(rctx, args["url"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ScrapedScene)
	fc.Result = res
	return ec.marshalOScrapedScene2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedScene(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_scrapeGalleryURL(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_scrapeGalleryURL_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ScrapeGalleryURL(rctx, args["url"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ScrapedGallery)
	fc.Result = res
	return ec.marshalOScrapedGallery2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedGallery(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_scrapeMovieURL(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_scrapeMovieURL_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ScrapeMovieURL(rctx, args["url"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ScrapedMovie)
	fc.Result = res
	return ec.marshalOScrapedMovie2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedMovie(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_scrapePerformerList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_scrapePerformerList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ScrapePerformerList(rctx, args["scraper_id"].(string), args["query"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ScrapedPerformer)
	fc.Result = res
	return ec.marshalNScrapedPerformer2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedPerformerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_scrapePerformer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_scrapePerformer_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ScrapePerformer(rctx, args["scraper_id"].(string), args["scraped_performer"].(ScrapedPerformerInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ScrapedPerformer)
	fc.Result = res
	return ec.marshalOScrapedPerformer2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedPerformer(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_scrapeScene(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_scrapeScene_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ScrapeScene(rctx, args["scraper_id"].(string), args["scene"].(SceneUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ScrapedScene)
	fc.Result = res
	return ec.marshalOScrapedScene2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedScene(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_scrapeGallery(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_scrapeGallery_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ScrapeGallery(rctx, args["scraper_id"].(string), args["gallery"].(GalleryUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ScrapedGallery)
	fc.Result = res
	return ec.marshalOScrapedGallery2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedGallery(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_scrapeFreeonesPerformerList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_scrapeFreeonesPerformerList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ScrapeFreeonesPerformerList(rctx, args["query"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_plugins(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Plugins(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*Plugin)
	fc.Result = res
	return ec.marshalOPlugin2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPluginᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_pluginTasks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PluginTasks(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*PluginTask)
	fc.Result = res
	return ec.marshalOPluginTask2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPluginTaskᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_configuration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Configuration(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ConfigResult)
	fc.Result = res
	return ec.marshalNConfigResult2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_directory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_directory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Directory(rctx, args["path"].(*string), args["locale"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Directory)
	fc.Result = res
	return ec.marshalNDirectory2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐDirectory(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_validateStashBoxCredentials(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_validateStashBoxCredentials_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ValidateStashBoxCredentials(rctx, args["input"].(StashBoxInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*StashBoxValidationResult)
	fc.Result = res
	return ec.marshalNStashBoxValidationResult2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashBoxValidationResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_systemStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SystemStatus(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*SystemStatus)
	fc.Result = res
	return ec.marshalNSystemStatus2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSystemStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_jobQueue(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().JobQueue(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*Job)
	fc.Result = res
	return ec.marshalOJob2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐJobᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findJob_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindJob(rctx, args["input"].(FindJobInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Job)
	fc.Result = res
	return ec.marshalOJob2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐJob(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dlnaStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DlnaStatus(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DLNAStatus)
	fc.Result = res
	return ec.marshalNDLNAStatus2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐDLNAStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allPerformers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllPerformers(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Performer)
	fc.Result = res
	return ec.marshalNPerformer2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPerformerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allStudios(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllStudios(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Studio)
	fc.Result = res
	return ec.marshalNStudio2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStudioᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allMovies(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllMovies(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Movie)
	fc.Result = res
	return ec.marshalNMovie2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMovieᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allTags(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllTags(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Tag)
	fc.Result = res
	return ec.marshalNTag2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTagᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_version(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Version(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Version)
	fc.Result = res
	return ec.marshalNVersion2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐVersion(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_latestversion(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Latestversion(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ShortVersion)
	fc.Result = res
	return ec.marshalNShortVersion2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐShortVersion(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _SavedFilter_id(ctx context.Context, field graphql.CollectedField, obj *SavedFilter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SavedFilter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _SavedFilter_mode(ctx context.Context, field graphql.CollectedField, obj *SavedFilter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SavedFilter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(FilterMode)
	fc.Result = res
	return ec.marshalNFilterMode2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFilterMode(ctx, field.Selections, res)
}

func (ec *executionContext) _SavedFilter_name(ctx context.Context, field graphql.CollectedField, obj *SavedFilter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SavedFilter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SavedFilter_filter(ctx context.Context, field graphql.CollectedField, obj *SavedFilter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SavedFilter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Filter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ScanMetadataOptions_useFileMetadata(ctx context.Context, field graphql.CollectedField, obj *ScanMetadataOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScanMetadataOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseFileMetadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ScanMetadataOptions_stripFileExtension(ctx context.Context, field graphql.CollectedField, obj *ScanMetadataOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScanMetadataOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StripFileExtension, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ScanMetadataOptions_scanGeneratePreviews(ctx context.Context, field graphql.CollectedField, obj *ScanMetadataOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScanMetadataOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScanGeneratePreviews, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ScanMetadataOptions_scanGenerateImagePreviews(ctx context.Context, field graphql.CollectedField, obj *ScanMetadataOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScanMetadataOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScanGenerateImagePreviews, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ScanMetadataOptions_scanGenerateSprites(ctx context.Context, field graphql.CollectedField, obj *ScanMetadataOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScanMetadataOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScanGenerateSprites, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ScanMetadataOptions_scanGeneratePhashes(ctx context.Context, field graphql.CollectedField, obj *ScanMetadataOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScanMetadataOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScanGeneratePhashes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ScanMetadataOptions_scanGenerateThumbnails(ctx context.Context, field graphql.CollectedField, obj *ScanMetadataOptions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScanMetadataOptions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScanGenerateThumbnails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Scene_id(ctx context.Context, field graphql.CollectedField, obj *Scene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scene",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Scene_checksum(ctx context.Context, field graphql.CollectedField, obj *Scene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scene",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Scene().Checksum(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Scene_oshash(ctx context.Context, field graphql.CollectedField, obj *Scene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scene",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Scene().Oshash(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Scene_title(ctx context.Context, field graphql.CollectedField, obj *Scene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scene",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Scene().Title(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Scene_details(ctx context.Context, field graphql.CollectedField, obj *Scene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scene",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Scene().Details(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Scene_url(ctx context.Context, field graphql.CollectedField, obj *Scene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scene",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Scene().URL(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Scene_date(ctx context.Context, field graphql.CollectedField, obj *Scene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scene",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Scene().Date(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Scene_rating(ctx context.Context, field graphql.CollectedField, obj *Scene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scene",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Scene().Rating(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Scene_organized(ctx context.Context, field graphql.CollectedField, obj *Scene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scene",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organized, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Scene_o_counter(ctx context.Context, field graphql.CollectedField, obj *Scene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scene",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OCounter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Scene_path(ctx context.Context, field graphql.CollectedField, obj *Scene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scene",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Scene_phash(ctx context.Context, field graphql.CollectedField, obj *Scene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scene",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Scene().Phash(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Scene_interactive(ctx context.Context, field graphql.CollectedField, obj *Scene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scene",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interactive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Scene_interactive_speed(ctx context.Context, field graphql.CollectedField, obj *Scene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scene",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Scene().InteractiveSpeed(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Scene_captions(ctx context.Context, field graphql.CollectedField, obj *Scene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scene",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Scene().Captions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*SceneCaption)
	fc.Result = res
	return ec.marshalOSceneCaption2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneCaptionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Scene_created_at(ctx context.Context, field graphql.CollectedField, obj *Scene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scene",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Scene().CreatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Scene_updated_at(ctx context.Context, field graphql.CollectedField, obj *Scene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scene",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Scene().UpdatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Scene_file_mod_time(ctx context.Context, field graphql.CollectedField, obj *Scene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scene",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Scene().FileModTime(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Scene_file(ctx context.Context, field graphql.CollectedField, obj *Scene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scene",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Scene().File(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*SceneFileType)
	fc.Result = res
	return ec.marshalNSceneFileType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneFileType(ctx, field.Selections, res)
}

func (ec *executionContext) _Scene_paths(ctx context.Context, field graphql.CollectedField, obj *Scene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scene",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Scene().Paths(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ScenePathsType)
	fc.Result = res
	return ec.marshalNScenePathsType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScenePathsType(ctx, field.Selections, res)
}

func (ec *executionContext) _Scene_scene_markers(ctx context.Context, field graphql.CollectedField, obj *Scene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scene",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Scene().SceneMarkers(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*SceneMarker)
	fc.Result = res
	return ec.marshalNSceneMarker2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMarkerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Scene_galleries(ctx context.Context, field graphql.CollectedField, obj *Scene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scene",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Scene().Galleries(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Gallery)
	fc.Result = res
	return ec.marshalNGallery2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGalleryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Scene_studio(ctx context.Context, field graphql.CollectedField, obj *Scene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scene",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Scene().Studio(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Studio)
	fc.Result = res
	return ec.marshalOStudio2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStudio(ctx, field.Selections, res)
}

func (ec *executionContext) _Scene_movies(ctx context.Context, field graphql.CollectedField, obj *Scene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scene",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Scene().Movies(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*SceneMovie)
	fc.Result = res
	return ec.marshalNSceneMovie2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMovieᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Scene_tags(ctx context.Context, field graphql.CollectedField, obj *Scene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scene",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Scene().Tags(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Tag)
	fc.Result = res
	return ec.marshalNTag2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTagᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Scene_performers(ctx context.Context, field graphql.CollectedField, obj *Scene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scene",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Scene().Performers(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Performer)
	fc.Result = res
	return ec.marshalNPerformer2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPerformerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Scene_stash_ids(ctx context.Context, field graphql.CollectedField, obj *Scene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scene",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Scene().StashIds(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*StashID)
	fc.Result = res
	return ec.marshalNStashID2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashIDᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Scene_sceneStreams(ctx context.Context, field graphql.CollectedField, obj *Scene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scene",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Scene().SceneStreams(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*SceneStreamEndpoint)
	fc.Result = res
	return ec.marshalNSceneStreamEndpoint2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneStreamEndpointᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneCaption_language_code(ctx context.Context, field graphql.CollectedField, obj *SceneCaption) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneCaption",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LanguageCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneCaption_caption_type(ctx context.Context, field graphql.CollectedField, obj *SceneCaption) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneCaption",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CaptionType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneFileType_size(ctx context.Context, field graphql.CollectedField, obj *SceneFileType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneFileType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Size, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneFileType_duration(ctx context.Context, field graphql.CollectedField, obj *SceneFileType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneFileType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneFileType_video_codec(ctx context.Context, field graphql.CollectedField, obj *SceneFileType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneFileType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VideoCodec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneFileType_audio_codec(ctx context.Context, field graphql.CollectedField, obj *SceneFileType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneFileType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AudioCodec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneFileType_width(ctx context.Context, field graphql.CollectedField, obj *SceneFileType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneFileType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Width, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneFileType_height(ctx context.Context, field graphql.CollectedField, obj *SceneFileType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneFileType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Height, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneFileType_framerate(ctx context.Context, field graphql.CollectedField, obj *SceneFileType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneFileType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Framerate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneFileType_bitrate(ctx context.Context, field graphql.CollectedField, obj *SceneFileType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneFileType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bitrate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneMarker_id(ctx context.Context, field graphql.CollectedField, obj *SceneMarker) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneMarker",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneMarker_scene(ctx context.Context, field graphql.CollectedField, obj *SceneMarker) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneMarker",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SceneMarker().Scene(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Scene)
	fc.Result = res
	return ec.marshalNScene2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScene(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneMarker_title(ctx context.Context, field graphql.CollectedField, obj *SceneMarker) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneMarker",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneMarker_seconds(ctx context.Context, field graphql.CollectedField, obj *SceneMarker) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneMarker",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seconds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneMarker_primary_tag(ctx context.Context, field graphql.CollectedField, obj *SceneMarker) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneMarker",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SceneMarker().PrimaryTag(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Tag)
	fc.Result = res
	return ec.marshalNTag2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTag(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneMarker_tags(ctx context.Context, field graphql.CollectedField, obj *SceneMarker) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneMarker",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SceneMarker().Tags(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Tag)
	fc.Result = res
	return ec.marshalNTag2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTagᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneMarker_created_at(ctx context.Context, field graphql.CollectedField, obj *SceneMarker) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneMarker",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SceneMarker().CreatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneMarker_updated_at(ctx context.Context, field graphql.CollectedField, obj *SceneMarker) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneMarker",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SceneMarker().UpdatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneMarker_stream(ctx context.Context, field graphql.CollectedField, obj *SceneMarker) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneMarker",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SceneMarker().Stream(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneMarker_preview(ctx context.Context, field graphql.CollectedField, obj *SceneMarker) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneMarker",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SceneMarker().Preview(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneMarker_screenshot(ctx context.Context, field graphql.CollectedField, obj *SceneMarker) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneMarker",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SceneMarker().Screenshot(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneMarkerTag_tag(ctx context.Context, field graphql.CollectedField, obj *SceneMarkerTag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneMarkerTag",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Tag)
	fc.Result = res
	return ec.marshalNTag2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTag(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneMarkerTag_scene_markers(ctx context.Context, field graphql.CollectedField, obj *SceneMarkerTag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneMarkerTag",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SceneMarkers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*SceneMarker)
	fc.Result = res
	return ec.marshalNSceneMarker2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMarkerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneMovie_movie(ctx context.Context, field graphql.CollectedField, obj *SceneMovie) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneMovie",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Movie, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Movie)
	fc.Result = res
	return ec.marshalNMovie2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMovie(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneMovie_scene_index(ctx context.Context, field graphql.CollectedField, obj *SceneMovie) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneMovie",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SceneIndex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneMovieID_movie_id(ctx context.Context, field graphql.CollectedField, obj *SceneMovieID) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneMovieID",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MovieID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneMovieID_scene_index(ctx context.Context, field graphql.CollectedField, obj *SceneMovieID) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneMovieID",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SceneIndex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneParserResult_scene(ctx context.Context, field graphql.CollectedField, obj *SceneParserResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneParserResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scene, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Scene)
	fc.Result = res
	return ec.marshalNScene2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScene(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneParserResult_title(ctx context.Context, field graphql.CollectedField, obj *SceneParserResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneParserResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneParserResult_details(ctx context.Context, field graphql.CollectedField, obj *SceneParserResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneParserResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneParserResult_url(ctx context.Context, field graphql.CollectedField, obj *SceneParserResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneParserResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneParserResult_date(ctx context.Context, field graphql.CollectedField, obj *SceneParserResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneParserResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneParserResult_rating(ctx context.Context, field graphql.CollectedField, obj *SceneParserResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneParserResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rating, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneParserResult_studio_id(ctx context.Context, field graphql.CollectedField, obj *SceneParserResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneParserResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StudioID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneParserResult_gallery_ids(ctx context.Context, field graphql.CollectedField, obj *SceneParserResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneParserResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GalleryIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneParserResult_performer_ids(ctx context.Context, field graphql.CollectedField, obj *SceneParserResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneParserResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PerformerIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneParserResult_movies(ctx context.Context, field graphql.CollectedField, obj *SceneParserResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneParserResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Movies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*SceneMovieID)
	fc.Result = res
	return ec.marshalOSceneMovieID2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMovieIDᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneParserResult_tag_ids(ctx context.Context, field graphql.CollectedField, obj *SceneParserResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneParserResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TagIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneParserResultType_count(ctx context.Context, field graphql.CollectedField, obj *SceneParserResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneParserResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneParserResultType_results(ctx context.Context, field graphql.CollectedField, obj *SceneParserResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneParserResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*SceneParserResult)
	fc.Result = res
	return ec.marshalNSceneParserResult2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneParserResultᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ScenePathsType_screenshot(ctx context.Context, field graphql.CollectedField, obj *ScenePathsType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScenePathsType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Screenshot, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScenePathsType_preview(ctx context.Context, field graphql.CollectedField, obj *ScenePathsType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScenePathsType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Preview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScenePathsType_stream(ctx context.Context, field graphql.CollectedField, obj *ScenePathsType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScenePathsType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stream, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScenePathsType_webp(ctx context.Context, field graphql.CollectedField, obj *ScenePathsType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScenePathsType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Webp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScenePathsType_vtt(ctx context.Context, field graphql.CollectedField, obj *ScenePathsType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScenePathsType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vtt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScenePathsType_chapters_vtt(ctx context.Context, field graphql.CollectedField, obj *ScenePathsType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScenePathsType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChaptersVtt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScenePathsType_sprite(ctx context.Context, field graphql.CollectedField, obj *ScenePathsType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScenePathsType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sprite, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScenePathsType_funscript(ctx context.Context, field graphql.CollectedField, obj *ScenePathsType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScenePathsType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Funscript, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScenePathsType_interactive_heatmap(ctx context.Context, field graphql.CollectedField, obj *ScenePathsType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScenePathsType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteractiveHeatmap, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScenePathsType_caption(ctx context.Context, field graphql.CollectedField, obj *ScenePathsType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScenePathsType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Caption, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneStreamEndpoint_url(ctx context.Context, field graphql.CollectedField, obj *SceneStreamEndpoint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneStreamEndpoint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneStreamEndpoint_mime_type(ctx context.Context, field graphql.CollectedField, obj *SceneStreamEndpoint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneStreamEndpoint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MimeType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SceneStreamEndpoint_label(ctx context.Context, field graphql.CollectedField, obj *SceneStreamEndpoint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SceneStreamEndpoint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedGallery_title(ctx context.Context, field graphql.CollectedField, obj *ScrapedGallery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedGallery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedGallery_details(ctx context.Context, field graphql.CollectedField, obj *ScrapedGallery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedGallery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedGallery_url(ctx context.Context, field graphql.CollectedField, obj *ScrapedGallery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedGallery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedGallery_date(ctx context.Context, field graphql.CollectedField, obj *ScrapedGallery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedGallery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedGallery_studio(ctx context.Context, field graphql.CollectedField, obj *ScrapedGallery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedGallery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Studio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ScrapedStudio)
	fc.Result = res
	return ec.marshalOScrapedStudio2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedStudio(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedGallery_tags(ctx context.Context, field graphql.CollectedField, obj *ScrapedGallery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedGallery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ScrapedTag)
	fc.Result = res
	return ec.marshalOScrapedTag2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedTagᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedGallery_performers(ctx context.Context, field graphql.CollectedField, obj *ScrapedGallery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedGallery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Performers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ScrapedPerformer)
	fc.Result = res
	return ec.marshalOScrapedPerformer2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedPerformerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedMovie_stored_id(ctx context.Context, field graphql.CollectedField, obj *ScrapedMovie) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedMovie",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoredID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedMovie_name(ctx context.Context, field graphql.CollectedField, obj *ScrapedMovie) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedMovie",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedMovie_aliases(ctx context.Context, field graphql.CollectedField, obj *ScrapedMovie) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedMovie",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aliases, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedMovie_duration(ctx context.Context, field graphql.CollectedField, obj *ScrapedMovie) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedMovie",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedMovie_date(ctx context.Context, field graphql.CollectedField, obj *ScrapedMovie) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedMovie",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedMovie_rating(ctx context.Context, field graphql.CollectedField, obj *ScrapedMovie) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedMovie",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rating, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedMovie_director(ctx context.Context, field graphql.CollectedField, obj *ScrapedMovie) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedMovie",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Director, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedMovie_url(ctx context.Context, field graphql.CollectedField, obj *ScrapedMovie) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedMovie",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedMovie_synopsis(ctx context.Context, field graphql.CollectedField, obj *ScrapedMovie) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedMovie",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Synopsis, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedMovie_studio(ctx context.Context, field graphql.CollectedField, obj *ScrapedMovie) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedMovie",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Studio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ScrapedStudio)
	fc.Result = res
	return ec.marshalOScrapedStudio2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedStudio(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedMovie_front_image(ctx context.Context, field graphql.CollectedField, obj *ScrapedMovie) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedMovie",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FrontImage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedMovie_back_image(ctx context.Context, field graphql.CollectedField, obj *ScrapedMovie) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedMovie",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BackImage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedPerformer_stored_id(ctx context.Context, field graphql.CollectedField, obj *ScrapedPerformer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedPerformer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoredID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedPerformer_name(ctx context.Context, field graphql.CollectedField, obj *ScrapedPerformer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedPerformer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedPerformer_gender(ctx context.Context, field graphql.CollectedField, obj *ScrapedPerformer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedPerformer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedPerformer_url(ctx context.Context, field graphql.CollectedField, obj *ScrapedPerformer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedPerformer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedPerformer_twitter(ctx context.Context, field graphql.CollectedField, obj *ScrapedPerformer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedPerformer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Twitter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedPerformer_instagram(ctx context.Context, field graphql.CollectedField, obj *ScrapedPerformer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedPerformer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Instagram, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedPerformer_birthdate(ctx context.Context, field graphql.CollectedField, obj *ScrapedPerformer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedPerformer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Birthdate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedPerformer_ethnicity(ctx context.Context, field graphql.CollectedField, obj *ScrapedPerformer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedPerformer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ethnicity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedPerformer_country(ctx context.Context, field graphql.CollectedField, obj *ScrapedPerformer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedPerformer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedPerformer_eye_color(ctx context.Context, field graphql.CollectedField, obj *ScrapedPerformer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedPerformer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EyeColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedPerformer_height(ctx context.Context, field graphql.CollectedField, obj *ScrapedPerformer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedPerformer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Height, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedPerformer_measurements(ctx context.Context, field graphql.CollectedField, obj *ScrapedPerformer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedPerformer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Measurements, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedPerformer_fake_tits(ctx context.Context, field graphql.CollectedField, obj *ScrapedPerformer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedPerformer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FakeTits, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedPerformer_career_length(ctx context.Context, field graphql.CollectedField, obj *ScrapedPerformer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedPerformer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CareerLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedPerformer_tattoos(ctx context.Context, field graphql.CollectedField, obj *ScrapedPerformer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedPerformer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tattoos, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedPerformer_piercings(ctx context.Context, field graphql.CollectedField, obj *ScrapedPerformer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedPerformer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Piercings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedPerformer_aliases(ctx context.Context, field graphql.CollectedField, obj *ScrapedPerformer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedPerformer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aliases, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedPerformer_tags(ctx context.Context, field graphql.CollectedField, obj *ScrapedPerformer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedPerformer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ScrapedTag)
	fc.Result = res
	return ec.marshalOScrapedTag2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedTagᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedPerformer_image(ctx context.Context, field graphql.CollectedField, obj *ScrapedPerformer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedPerformer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedPerformer_images(ctx context.Context, field graphql.CollectedField, obj *ScrapedPerformer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedPerformer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Images, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedPerformer_details(ctx context.Context, field graphql.CollectedField, obj *ScrapedPerformer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedPerformer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedPerformer_death_date(ctx context.Context, field graphql.CollectedField, obj *ScrapedPerformer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedPerformer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeathDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedPerformer_hair_color(ctx context.Context, field graphql.CollectedField, obj *ScrapedPerformer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedPerformer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HairColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedPerformer_weight(ctx context.Context, field graphql.CollectedField, obj *ScrapedPerformer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedPerformer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedPerformer_remote_site_id(ctx context.Context, field graphql.CollectedField, obj *ScrapedPerformer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedPerformer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemoteSiteID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedScene_title(ctx context.Context, field graphql.CollectedField, obj *ScrapedScene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedScene",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedScene_details(ctx context.Context, field graphql.CollectedField, obj *ScrapedScene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedScene",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedScene_url(ctx context.Context, field graphql.CollectedField, obj *ScrapedScene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedScene",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedScene_date(ctx context.Context, field graphql.CollectedField, obj *ScrapedScene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedScene",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedScene_image(ctx context.Context, field graphql.CollectedField, obj *ScrapedScene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedScene",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedScene_file(ctx context.Context, field graphql.CollectedField, obj *ScrapedScene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedScene",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.File, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*SceneFileType)
	fc.Result = res
	return ec.marshalOSceneFileType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneFileType(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedScene_studio(ctx context.Context, field graphql.CollectedField, obj *ScrapedScene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedScene",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Studio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ScrapedStudio)
	fc.Result = res
	return ec.marshalOScrapedStudio2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedStudio(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedScene_tags(ctx context.Context, field graphql.CollectedField, obj *ScrapedScene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedScene",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ScrapedTag)
	fc.Result = res
	return ec.marshalOScrapedTag2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedTagᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedScene_performers(ctx context.Context, field graphql.CollectedField, obj *ScrapedScene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedScene",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Performers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ScrapedPerformer)
	fc.Result = res
	return ec.marshalOScrapedPerformer2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedPerformerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedScene_movies(ctx context.Context, field graphql.CollectedField, obj *ScrapedScene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedScene",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Movies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ScrapedMovie)
	fc.Result = res
	return ec.marshalOScrapedMovie2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedMovieᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedScene_remote_site_id(ctx context.Context, field graphql.CollectedField, obj *ScrapedScene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedScene",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemoteSiteID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedScene_duration(ctx context.Context, field graphql.CollectedField, obj *ScrapedScene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedScene",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedScene_fingerprints(ctx context.Context, field graphql.CollectedField, obj *ScrapedScene) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedScene",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fingerprints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*StashBoxFingerprint)
	fc.Result = res
	return ec.marshalOStashBoxFingerprint2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashBoxFingerprintᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedStudio_stored_id(ctx context.Context, field graphql.CollectedField, obj *ScrapedStudio) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedStudio",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoredID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedStudio_name(ctx context.Context, field graphql.CollectedField, obj *ScrapedStudio) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedStudio",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedStudio_url(ctx context.Context, field graphql.CollectedField, obj *ScrapedStudio) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedStudio",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedStudio_image(ctx context.Context, field graphql.CollectedField, obj *ScrapedStudio) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedStudio",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedStudio_remote_site_id(ctx context.Context, field graphql.CollectedField, obj *ScrapedStudio) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedStudio",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemoteSiteID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedTag_stored_id(ctx context.Context, field graphql.CollectedField, obj *ScrapedTag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedTag",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoredID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScrapedTag_name(ctx context.Context, field graphql.CollectedField, obj *ScrapedTag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScrapedTag",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Scraper_id(ctx context.Context, field graphql.CollectedField, obj *Scraper) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scraper",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Scraper_name(ctx context.Context, field graphql.CollectedField, obj *Scraper) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scraper",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Scraper_performer(ctx context.Context, field graphql.CollectedField, obj *Scraper) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scraper",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Performer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ScraperSpec)
	fc.Result = res
	return ec.marshalOScraperSpec2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScraperSpec(ctx, field.Selections, res)
}

func (ec *executionContext) _Scraper_scene(ctx context.Context, field graphql.CollectedField, obj *Scraper) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scraper",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scene, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ScraperSpec)
	fc.Result = res
	return ec.marshalOScraperSpec2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScraperSpec(ctx, field.Selections, res)
}

func (ec *executionContext) _Scraper_gallery(ctx context.Context, field graphql.CollectedField, obj *Scraper) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scraper",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gallery, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ScraperSpec)
	fc.Result = res
	return ec.marshalOScraperSpec2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScraperSpec(ctx, field.Selections, res)
}

func (ec *executionContext) _Scraper_movie(ctx context.Context, field graphql.CollectedField, obj *Scraper) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Scraper",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Movie, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ScraperSpec)
	fc.Result = res
	return ec.marshalOScraperSpec2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScraperSpec(ctx, field.Selections, res)
}

func (ec *executionContext) _ScraperSource_stash_box_index(ctx context.Context, field graphql.CollectedField, obj *ScraperSource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScraperSource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StashBoxIndex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ScraperSource_stash_box_endpoint(ctx context.Context, field graphql.CollectedField, obj *ScraperSource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScraperSource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StashBoxEndpoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScraperSource_scraper_id(ctx context.Context, field graphql.CollectedField, obj *ScraperSource) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScraperSource",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScraperID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ScraperSpec_urls(ctx context.Context, field graphql.CollectedField, obj *ScraperSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScraperSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Urls, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ScraperSpec_supported_scrapes(ctx context.Context, field graphql.CollectedField, obj *ScraperSpec) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ScraperSpec",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportedScrapes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]ScrapeType)
	fc.Result = res
	return ec.marshalNScrapeType2ᚕgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapeTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ShortVersion_shorthash(ctx context.Context, field graphql.CollectedField, obj *ShortVersion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShortVersion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Shorthash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ShortVersion_url(ctx context.Context, field graphql.CollectedField, obj *ShortVersion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShortVersion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StashBox_endpoint(ctx context.Context, field graphql.CollectedField, obj *StashBox) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StashBox",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Endpoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StashBox_api_key(ctx context.Context, field graphql.CollectedField, obj *StashBox) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StashBox",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StashBox_name(ctx context.Context, field graphql.CollectedField, obj *StashBox) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StashBox",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StashBoxFingerprint_algorithm(ctx context.Context, field graphql.CollectedField, obj *StashBoxFingerprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StashBoxFingerprint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Algorithm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StashBoxFingerprint_hash(ctx context.Context, field graphql.CollectedField, obj *StashBoxFingerprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StashBoxFingerprint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StashBoxFingerprint_duration(ctx context.Context, field graphql.CollectedField, obj *StashBoxFingerprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StashBoxFingerprint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StashBoxPerformerQueryResult_query(ctx context.Context, field graphql.CollectedField, obj *StashBoxPerformerQueryResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StashBoxPerformerQueryResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Query, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StashBoxPerformerQueryResult_results(ctx context.Context, field graphql.CollectedField, obj *StashBoxPerformerQueryResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StashBoxPerformerQueryResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ScrapedPerformer)
	fc.Result = res
	return ec.marshalNScrapedPerformer2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedPerformerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _StashBoxValidationResult_valid(ctx context.Context, field graphql.CollectedField, obj *StashBoxValidationResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StashBoxValidationResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Valid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _StashBoxValidationResult_status(ctx context.Context, field graphql.CollectedField, obj *StashBoxValidationResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StashBoxValidationResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StashConfig_path(ctx context.Context, field graphql.CollectedField, obj *StashConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StashConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StashConfig_excludeVideo(ctx context.Context, field graphql.CollectedField, obj *StashConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StashConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExcludeVideo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _StashConfig_excludeImage(ctx context.Context, field graphql.CollectedField, obj *StashConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StashConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExcludeImage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _StashID_endpoint(ctx context.Context, field graphql.CollectedField, obj *StashID) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StashID",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Endpoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StashID_stash_id(ctx context.Context, field graphql.CollectedField, obj *StashID) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StashID",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StashID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StatsResultType_scene_count(ctx context.Context, field graphql.CollectedField, obj *StatsResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StatsResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SceneCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StatsResultType_scenes_size(ctx context.Context, field graphql.CollectedField, obj *StatsResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StatsResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScenesSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _StatsResultType_scenes_duration(ctx context.Context, field graphql.CollectedField, obj *StatsResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StatsResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScenesDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _StatsResultType_image_count(ctx context.Context, field graphql.CollectedField, obj *StatsResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StatsResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StatsResultType_images_size(ctx context.Context, field graphql.CollectedField, obj *StatsResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StatsResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImagesSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _StatsResultType_gallery_count(ctx context.Context, field graphql.CollectedField, obj *StatsResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StatsResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GalleryCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StatsResultType_performer_count(ctx context.Context, field graphql.CollectedField, obj *StatsResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StatsResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PerformerCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StatsResultType_studio_count(ctx context.Context, field graphql.CollectedField, obj *StatsResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StatsResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StudioCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StatsResultType_movie_count(ctx context.Context, field graphql.CollectedField, obj *StatsResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StatsResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MovieCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StatsResultType_tag_count(ctx context.Context, field graphql.CollectedField, obj *StatsResultType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StatsResultType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TagCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Studio_id(ctx context.Context, field graphql.CollectedField, obj *Studio) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Studio",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Studio_checksum(ctx context.Context, field graphql.CollectedField, obj *Studio) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Studio",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Checksum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Studio_name(ctx context.Context, field graphql.CollectedField, obj *Studio) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Studio",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Studio().Name(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Studio_url(ctx context.Context, field graphql.CollectedField, obj *Studio) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Studio",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Studio().URL(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Studio_parent_studio(ctx context.Context, field graphql.CollectedField, obj *Studio) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Studio",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Studio().ParentStudio(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Studio)
	fc.Result = res
	return ec.marshalOStudio2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStudio(ctx, field.Selections, res)
}

func (ec *executionContext) _Studio_child_studios(ctx context.Context, field graphql.CollectedField, obj *Studio) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Studio",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Studio().ChildStudios(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Studio)
	fc.Result = res
	return ec.marshalNStudio2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStudioᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Studio_aliases(ctx context.Context, field graphql.CollectedField, obj *Studio) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Studio",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Studio().Aliases(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Studio_ignore_auto_tag(ctx context.Context, field graphql.CollectedField, obj *Studio) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Studio",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IgnoreAutoTag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Studio_image_path(ctx context.Context, field graphql.CollectedField, obj *Studio) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Studio",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Studio().ImagePath(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Studio_scene_count(ctx context.Context, field graphql.CollectedField, obj *Studio) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Studio",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Studio().SceneCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Studio_image_count(ctx context.Context, field graphql.CollectedField, obj *Studio) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Studio",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Studio().ImageCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Studio_gallery_count(ctx context.Context, field graphql.CollectedField, obj *Studio) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Studio",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Studio().GalleryCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Studio_stash_ids(ctx context.Context, field graphql.CollectedField, obj *Studio) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Studio",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Studio().StashIds(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*StashID)
	fc.Result = res
	return ec.marshalNStashID2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashIDᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Studio_rating(ctx context.Context, field graphql.CollectedField, obj *Studio) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Studio",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Studio().Rating(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Studio_details(ctx context.Context, field graphql.CollectedField, obj *Studio) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Studio",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Studio().Details(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Studio_created_at(ctx context.Context, field graphql.CollectedField, obj *Studio) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Studio",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Studio().CreatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Studio_updated_at(ctx context.Context, field graphql.CollectedField, obj *Studio) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Studio",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Studio().UpdatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Studio_movie_count(ctx context.Context, field graphql.CollectedField, obj *Studio) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Studio",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Studio().MovieCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Studio_movies(ctx context.Context, field graphql.CollectedField, obj *Studio) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Studio",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Studio().Movies(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Movie)
	fc.Result = res
	return ec.marshalNMovie2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMovieᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Subscription_jobsSubscribe(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().JobsSubscribe(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *JobStatusUpdate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNJobStatusUpdate2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐJobStatusUpdate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_loggingSubscribe(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().LoggingSubscribe(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*LogEntry)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNLogEntry2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐLogEntryᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_scanCompleteSubscribe(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().ScanCompleteSubscribe(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan bool)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNBoolean2bool(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _SystemStatus_databaseSchema(ctx context.Context, field graphql.CollectedField, obj *SystemStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DatabaseSchema, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemStatus_databasePath(ctx context.Context, field graphql.CollectedField, obj *SystemStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DatabasePath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemStatus_configPath(ctx context.Context, field graphql.CollectedField, obj *SystemStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConfigPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemStatus_appSchema(ctx context.Context, field graphql.CollectedField, obj *SystemStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSchema, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemStatus_status(ctx context.Context, field graphql.CollectedField, obj *SystemStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(SystemStatusEnum)
	fc.Result = res
	return ec.marshalNSystemStatusEnum2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSystemStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_id(ctx context.Context, field graphql.CollectedField, obj *Tag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNID2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_name(ctx context.Context, field graphql.CollectedField, obj *Tag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_aliases(ctx context.Context, field graphql.CollectedField, obj *Tag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Tag().Aliases(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_ignore_auto_tag(ctx context.Context, field graphql.CollectedField, obj *Tag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IgnoreAutoTag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_created_at(ctx context.Context, field graphql.CollectedField, obj *Tag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Tag().CreatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_updated_at(ctx context.Context, field graphql.CollectedField, obj *Tag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Tag().UpdatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_image_path(ctx context.Context, field graphql.CollectedField, obj *Tag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Tag().ImagePath(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_scene_count(ctx context.Context, field graphql.CollectedField, obj *Tag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Tag().SceneCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_scene_marker_count(ctx context.Context, field graphql.CollectedField, obj *Tag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Tag().SceneMarkerCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_image_count(ctx context.Context, field graphql.CollectedField, obj *Tag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Tag().ImageCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_gallery_count(ctx context.Context, field graphql.CollectedField, obj *Tag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Tag().GalleryCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_performer_count(ctx context.Context, field graphql.CollectedField, obj *Tag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Tag().PerformerCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_parents(ctx context.Context, field graphql.CollectedField, obj *Tag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Tag().Parents(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Tag)
	fc.Result = res
	return ec.marshalNTag2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTagᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Tag_children(ctx context.Context, field graphql.CollectedField, obj *Tag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Tag().Children(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Tag)
	fc.Result = res
	return ec.marshalNTag2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTagᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Version_version(ctx context.Context, field graphql.CollectedField, obj *Version) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Version",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Version_hash(ctx context.Context, field graphql.CollectedField, obj *Version) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Version",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Version_build_time(ctx context.Context, field graphql.CollectedField, obj *Version) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Version",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuildTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAddTempDLNAIPInput(ctx context.Context, obj interface{}) (AddTempDLNAIPInput, error) {
	var it AddTempDLNAIPInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration"))
			it.Duration, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAutoTagMetadataInput(ctx context.Context, obj interface{}) (AutoTagMetadataInput, error) {
	var it AutoTagMetadataInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "paths":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paths"))
			it.Paths, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "performers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performers"))
			it.Performers, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "studios":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studios"))
			it.Studios, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags"))
			it.Tags, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBackupDatabaseInput(ctx context.Context, obj interface{}) (BackupDatabaseInput, error) {
	var it BackupDatabaseInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "download":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("download"))
			it.Download, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBulkGalleryUpdateInput(ctx context.Context, obj interface{}) (BulkGalleryUpdateInput, error) {
	var it BulkGalleryUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clientMutationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientMutationId"))
			it.ClientMutationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
			it.Ids, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			it.Date, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "details":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details"))
			it.Details, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rating":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
			it.Rating, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "organized":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organized"))
			it.Organized, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "scene_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scene_ids"))
			it.SceneIds, err = ec.unmarshalOBulkUpdateIds2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐBulkUpdateIds(ctx, v)
			if err != nil {
				return it, err
			}
		case "studio_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studio_id"))
			it.StudioID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_ids"))
			it.TagIds, err = ec.unmarshalOBulkUpdateIds2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐBulkUpdateIds(ctx, v)
			if err != nil {
				return it, err
			}
		case "performer_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performer_ids"))
			it.PerformerIds, err = ec.unmarshalOBulkUpdateIds2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐBulkUpdateIds(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBulkImageUpdateInput(ctx context.Context, obj interface{}) (BulkImageUpdateInput, error) {
	var it BulkImageUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clientMutationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientMutationId"))
			it.ClientMutationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
			it.Ids, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rating":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
			it.Rating, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "organized":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organized"))
			it.Organized, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "studio_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studio_id"))
			it.StudioID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "performer_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performer_ids"))
			it.PerformerIds, err = ec.unmarshalOBulkUpdateIds2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐBulkUpdateIds(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_ids"))
			it.TagIds, err = ec.unmarshalOBulkUpdateIds2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐBulkUpdateIds(ctx, v)
			if err != nil {
				return it, err
			}
		case "gallery_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gallery_ids"))
			it.GalleryIds, err = ec.unmarshalOBulkUpdateIds2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐBulkUpdateIds(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBulkMovieUpdateInput(ctx context.Context, obj interface{}) (BulkMovieUpdateInput, error) {
	var it BulkMovieUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clientMutationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientMutationId"))
			it.ClientMutationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
			it.Ids, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "rating":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
			it.Rating, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "studio_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studio_id"))
			it.StudioID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "director":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("director"))
			it.Director, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBulkPerformerUpdateInput(ctx context.Context, obj interface{}) (BulkPerformerUpdateInput, error) {
	var it BulkPerformerUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clientMutationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientMutationId"))
			it.ClientMutationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
			it.Ids, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			it.Gender, err = ec.unmarshalOGenderEnum2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGenderEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "birthdate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthdate"))
			it.Birthdate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ethnicity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ethnicity"))
			it.Ethnicity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			it.Country, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "eye_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eye_color"))
			it.EyeColor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "height":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("height"))
			it.Height, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "measurements":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("measurements"))
			it.Measurements, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fake_tits":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fake_tits"))
			it.FakeTits, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "career_length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("career_length"))
			it.CareerLength, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tattoos":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tattoos"))
			it.Tattoos, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "piercings":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("piercings"))
			it.Piercings, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "aliases":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aliases"))
			it.Aliases, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "twitter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("twitter"))
			it.Twitter, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instagram":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instagram"))
			it.Instagram, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "favorite":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("favorite"))
			it.Favorite, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_ids"))
			it.TagIds, err = ec.unmarshalOBulkUpdateIds2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐBulkUpdateIds(ctx, v)
			if err != nil {
				return it, err
			}
		case "rating":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
			it.Rating, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "details":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details"))
			it.Details, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "death_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("death_date"))
			it.DeathDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hair_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hair_color"))
			it.HairColor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ignore_auto_tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ignore_auto_tag"))
			it.IgnoreAutoTag, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBulkSceneUpdateInput(ctx context.Context, obj interface{}) (BulkSceneUpdateInput, error) {
	var it BulkSceneUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clientMutationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientMutationId"))
			it.ClientMutationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
			it.Ids, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "details":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details"))
			it.Details, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			it.Date, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rating":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
			it.Rating, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "organized":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organized"))
			it.Organized, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "studio_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studio_id"))
			it.StudioID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gallery_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gallery_ids"))
			it.GalleryIds, err = ec.unmarshalOBulkUpdateIds2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐBulkUpdateIds(ctx, v)
			if err != nil {
				return it, err
			}
		case "performer_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performer_ids"))
			it.PerformerIds, err = ec.unmarshalOBulkUpdateIds2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐBulkUpdateIds(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_ids"))
			it.TagIds, err = ec.unmarshalOBulkUpdateIds2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐBulkUpdateIds(ctx, v)
			if err != nil {
				return it, err
			}
		case "movie_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("movie_ids"))
			it.MovieIds, err = ec.unmarshalOBulkUpdateIds2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐBulkUpdateIds(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBulkUpdateIds(ctx context.Context, obj interface{}) (BulkUpdateIds, error) {
	var it BulkUpdateIds
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
			it.Ids, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "mode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mode"))
			it.Mode, err = ec.unmarshalNBulkUpdateIdMode2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐBulkUpdateIDMode(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCleanMetadataInput(ctx context.Context, obj interface{}) (CleanMetadataInput, error) {
	var it CleanMetadataInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "paths":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paths"))
			it.Paths, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "dryRun":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dryRun"))
			it.DryRun, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigDLNAInput(ctx context.Context, obj interface{}) (ConfigDLNAInput, error) {
	var it ConfigDLNAInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "serverName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serverName"))
			it.ServerName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			it.Enabled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "whitelistedIPs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("whitelistedIPs"))
			it.WhitelistedIPs, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "interfaces":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interfaces"))
			it.Interfaces, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigDefaultSettingsInput(ctx context.Context, obj interface{}) (ConfigDefaultSettingsInput, error) {
	var it ConfigDefaultSettingsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "scan":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scan"))
			it.Scan, err = ec.unmarshalOScanMetadataInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScanMetadataInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "identify":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identify"))
			it.Identify, err = ec.unmarshalOIdentifyMetadataInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifyMetadataInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "autoTag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("autoTag"))
			it.AutoTag, err = ec.unmarshalOAutoTagMetadataInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐAutoTagMetadataInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "generate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("generate"))
			it.Generate, err = ec.unmarshalOGenerateMetadataInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGenerateMetadataInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleteFile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleteFile"))
			it.DeleteFile, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleteGenerated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleteGenerated"))
			it.DeleteGenerated, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigDisableDropdownCreateInput(ctx context.Context, obj interface{}) (ConfigDisableDropdownCreateInput, error) {
	var it ConfigDisableDropdownCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "performer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performer"))
			it.Performer, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag"))
			it.Tag, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "studio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studio"))
			it.Studio, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigGeneralInput(ctx context.Context, obj interface{}) (ConfigGeneralInput, error) {
	var it ConfigGeneralInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "stashes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stashes"))
			it.Stashes, err = ec.unmarshalOStashConfigInput2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashConfigInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "databasePath":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("databasePath"))
			it.DatabasePath, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "generatedPath":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("generatedPath"))
			it.GeneratedPath, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "metadataPath":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadataPath"))
			it.MetadataPath, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "scrapersPath":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scrapersPath"))
			it.ScrapersPath, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cachePath":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cachePath"))
			it.CachePath, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "calculateMD5":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("calculateMD5"))
			it.CalculateMd5, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "videoFileNamingAlgorithm":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("videoFileNamingAlgorithm"))
			it.VideoFileNamingAlgorithm, err = ec.unmarshalOHashAlgorithm2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐHashAlgorithm(ctx, v)
			if err != nil {
				return it, err
			}
		case "parallelTasks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parallelTasks"))
			it.ParallelTasks, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "previewAudio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("previewAudio"))
			it.PreviewAudio, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "previewSegments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("previewSegments"))
			it.PreviewSegments, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "previewSegmentDuration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("previewSegmentDuration"))
			it.PreviewSegmentDuration, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "previewExcludeStart":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("previewExcludeStart"))
			it.PreviewExcludeStart, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "previewExcludeEnd":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("previewExcludeEnd"))
			it.PreviewExcludeEnd, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "previewPreset":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("previewPreset"))
			it.PreviewPreset, err = ec.unmarshalOPreviewPreset2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPreviewPreset(ctx, v)
			if err != nil {
				return it, err
			}
		case "maxTranscodeSize":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxTranscodeSize"))
			it.MaxTranscodeSize, err = ec.unmarshalOStreamingResolutionEnum2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStreamingResolutionEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "maxStreamingTranscodeSize":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxStreamingTranscodeSize"))
			it.MaxStreamingTranscodeSize, err = ec.unmarshalOStreamingResolutionEnum2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStreamingResolutionEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "writeImageThumbnails":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("writeImageThumbnails"))
			it.WriteImageThumbnails, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			it.Username, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "maxSessionAge":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxSessionAge"))
			it.MaxSessionAge, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "trustedProxies":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trustedProxies"))
			it.TrustedProxies, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "logFile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logFile"))
			it.LogFile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "logOut":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logOut"))
			it.LogOut, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "logLevel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logLevel"))
			it.LogLevel, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "logAccess":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logAccess"))
			it.LogAccess, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "createGalleriesFromFolders":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createGalleriesFromFolders"))
			it.CreateGalleriesFromFolders, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "videoExtensions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("videoExtensions"))
			it.VideoExtensions, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "imageExtensions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imageExtensions"))
			it.ImageExtensions, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "galleryExtensions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("galleryExtensions"))
			it.GalleryExtensions, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "excludes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("excludes"))
			it.Excludes, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "imageExcludes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imageExcludes"))
			it.ImageExcludes, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "customPerformerImageLocation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customPerformerImageLocation"))
			it.CustomPerformerImageLocation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "scraperUserAgent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scraperUserAgent"))
			it.ScraperUserAgent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "scraperCDPPath":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scraperCDPPath"))
			it.ScraperCDPPath, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "scraperCertCheck":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scraperCertCheck"))
			it.ScraperCertCheck, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "stashBoxes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stashBoxes"))
			it.StashBoxes, err = ec.unmarshalOStashBoxInput2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashBoxInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "pythonPath":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pythonPath"))
			it.PythonPath, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigImageLightboxInput(ctx context.Context, obj interface{}) (ConfigImageLightboxInput, error) {
	var it ConfigImageLightboxInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "slideshowDelay":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slideshowDelay"))
			it.SlideshowDelay, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayMode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayMode"))
			it.DisplayMode, err = ec.unmarshalOImageLightboxDisplayMode2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImageLightboxDisplayMode(ctx, v)
			if err != nil {
				return it, err
			}
		case "scaleUp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scaleUp"))
			it.ScaleUp, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "resetZoomOnNav":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resetZoomOnNav"))
			it.ResetZoomOnNav, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "scrollMode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scrollMode"))
			it.ScrollMode, err = ec.unmarshalOImageLightboxScrollMode2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImageLightboxScrollMode(ctx, v)
			if err != nil {
				return it, err
			}
		case "scrollAttemptsBeforeChange":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scrollAttemptsBeforeChange"))
			it.ScrollAttemptsBeforeChange, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigInterfaceInput(ctx context.Context, obj interface{}) (ConfigInterfaceInput, error) {
	var it ConfigInterfaceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "menuItems":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("menuItems"))
			it.MenuItems, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "soundOnPreview":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("soundOnPreview"))
			it.SoundOnPreview, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "wallShowTitle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallShowTitle"))
			it.WallShowTitle, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "wallPlayback":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallPlayback"))
			it.WallPlayback, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "showScrubber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("showScrubber"))
			it.ShowScrubber, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "maximumLoopDuration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maximumLoopDuration"))
			it.MaximumLoopDuration, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "autostartVideo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("autostartVideo"))
			it.AutostartVideo, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "autostartVideoOnPlaySelected":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("autostartVideoOnPlaySelected"))
			it.AutostartVideoOnPlaySelected, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "continuePlaylistDefault":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("continuePlaylistDefault"))
			it.ContinuePlaylistDefault, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "showStudioAsText":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("showStudioAsText"))
			it.ShowStudioAsText, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "css":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("css"))
			it.CSS, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cssEnabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cssEnabled"))
			it.CSSEnabled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "language":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("language"))
			it.Language, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "slideshowDelay":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slideshowDelay"))
			it.SlideshowDelay, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "imageLightbox":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imageLightbox"))
			it.ImageLightbox, err = ec.unmarshalOConfigImageLightboxInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigImageLightboxInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "disableDropdownCreate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disableDropdownCreate"))
			it.DisableDropdownCreate, err = ec.unmarshalOConfigDisableDropdownCreateInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigDisableDropdownCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "handyKey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("handyKey"))
			it.HandyKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "funscriptOffset":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("funscriptOffset"))
			it.FunscriptOffset, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "noBrowser":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noBrowser"))
			it.NoBrowser, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "notificationsEnabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notificationsEnabled"))
			it.NotificationsEnabled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigScrapingInput(ctx context.Context, obj interface{}) (ConfigScrapingInput, error) {
	var it ConfigScrapingInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "scraperUserAgent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scraperUserAgent"))
			it.ScraperUserAgent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "scraperCDPPath":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scraperCDPPath"))
			it.ScraperCDPPath, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "scraperCertCheck":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scraperCertCheck"))
			it.ScraperCertCheck, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "excludeTagPatterns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("excludeTagPatterns"))
			it.ExcludeTagPatterns, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDestroyFilterInput(ctx context.Context, obj interface{}) (DestroyFilterInput, error) {
	var it DestroyFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDisableDLNAInput(ctx context.Context, obj interface{}) (DisableDLNAInput, error) {
	var it DisableDLNAInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration"))
			it.Duration, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnableDLNAInput(ctx context.Context, obj interface{}) (EnableDLNAInput, error) {
	var it EnableDLNAInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration"))
			it.Duration, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputExportObjectTypeInput(ctx context.Context, obj interface{}) (ExportObjectTypeInput, error) {
	var it ExportObjectTypeInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
			it.Ids, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "all":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("all"))
			it.All, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputExportObjectsInput(ctx context.Context, obj interface{}) (ExportObjectsInput, error) {
	var it ExportObjectsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "scenes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scenes"))
			it.Scenes, err = ec.unmarshalOExportObjectTypeInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐExportObjectTypeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "images":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("images"))
			it.Images, err = ec.unmarshalOExportObjectTypeInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐExportObjectTypeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "studios":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studios"))
			it.Studios, err = ec.unmarshalOExportObjectTypeInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐExportObjectTypeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "performers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performers"))
			it.Performers, err = ec.unmarshalOExportObjectTypeInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐExportObjectTypeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags"))
			it.Tags, err = ec.unmarshalOExportObjectTypeInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐExportObjectTypeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "movies":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("movies"))
			it.Movies, err = ec.unmarshalOExportObjectTypeInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐExportObjectTypeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "galleries":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("galleries"))
			it.Galleries, err = ec.unmarshalOExportObjectTypeInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐExportObjectTypeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "includeDependencies":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDependencies"))
			it.IncludeDependencies, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindFilterType(ctx context.Context, obj interface{}) (FindFilterType, error) {
	var it FindFilterType
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "q":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
			it.Q, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "page":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			it.Page, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "per_page":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("per_page"))
			it.PerPage, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
			it.Sort, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalOSortDirectionEnum2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSortDirectionEnum(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFindJobInput(ctx context.Context, obj interface{}) (FindJobInput, error) {
	var it FindJobInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGalleryAddInput(ctx context.Context, obj interface{}) (GalleryAddInput, error) {
	var it GalleryAddInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "gallery_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gallery_id"))
			it.GalleryID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "image_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image_ids"))
			it.ImageIds, err = ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGalleryCreateInput(ctx context.Context, obj interface{}) (GalleryCreateInput, error) {
	var it GalleryCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			it.Date, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "details":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details"))
			it.Details, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rating":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
			it.Rating, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "organized":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organized"))
			it.Organized, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "scene_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scene_ids"))
			it.SceneIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "studio_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studio_id"))
			it.StudioID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_ids"))
			it.TagIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "performer_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performer_ids"))
			it.PerformerIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGalleryDestroyInput(ctx context.Context, obj interface{}) (GalleryDestroyInput, error) {
	var it GalleryDestroyInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
			it.Ids, err = ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_file"))
			it.DeleteFile, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_generated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_generated"))
			it.DeleteGenerated, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGalleryFilterType(ctx context.Context, obj interface{}) (GalleryFilterType, error) {
	var it GalleryFilterType
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalOGalleryFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGalleryFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalOGalleryFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGalleryFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "NOT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("NOT"))
			it.Not, err = ec.unmarshalOGalleryFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGalleryFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "details":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details"))
			it.Details, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "checksum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("checksum"))
			it.Checksum, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "path":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("path"))
			it.Path, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_missing":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_missing"))
			it.IsMissing, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_zip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_zip"))
			it.IsZip, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "rating":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
			it.Rating, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "organized":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organized"))
			it.Organized, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "average_resolution":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("average_resolution"))
			it.AverageResolution, err = ec.unmarshalOResolutionCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐResolutionCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "studios":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studios"))
			it.Studios, err = ec.unmarshalOHierarchicalMultiCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐHierarchicalMultiCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags"))
			it.Tags, err = ec.unmarshalOHierarchicalMultiCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐHierarchicalMultiCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_count"))
			it.TagCount, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "performer_tags":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performer_tags"))
			it.PerformerTags, err = ec.unmarshalOHierarchicalMultiCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐHierarchicalMultiCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "performers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performers"))
			it.Performers, err = ec.unmarshalOMultiCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMultiCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "performer_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performer_count"))
			it.PerformerCount, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "performer_favorite":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performer_favorite"))
			it.PerformerFavorite, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "performer_age":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performer_age"))
			it.PerformerAge, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "image_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image_count"))
			it.ImageCount, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGalleryRemoveInput(ctx context.Context, obj interface{}) (GalleryRemoveInput, error) {
	var it GalleryRemoveInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "gallery_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gallery_id"))
			it.GalleryID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "image_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image_ids"))
			it.ImageIds, err = ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGalleryUpdateInput(ctx context.Context, obj interface{}) (GalleryUpdateInput, error) {
	var it GalleryUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clientMutationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientMutationId"))
			it.ClientMutationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			it.Date, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "details":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details"))
			it.Details, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rating":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
			it.Rating, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "organized":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organized"))
			it.Organized, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "scene_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scene_ids"))
			it.SceneIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "studio_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studio_id"))
			it.StudioID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_ids"))
			it.TagIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "performer_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performer_ids"))
			it.PerformerIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGenderCriterionInput(ctx context.Context, obj interface{}) (GenderCriterionInput, error) {
	var it GenderCriterionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOGenderEnum2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGenderEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "modifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modifier"))
			it.Modifier, err = ec.unmarshalNCriterionModifier2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐCriterionModifier(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGenerateAPIKeyInput(ctx context.Context, obj interface{}) (GenerateAPIKeyInput, error) {
	var it GenerateAPIKeyInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clear":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clear"))
			it.Clear, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGenerateMetadataInput(ctx context.Context, obj interface{}) (GenerateMetadataInput, error) {
	var it GenerateMetadataInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "sprites":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sprites"))
			it.Sprites, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "previews":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("previews"))
			it.Previews, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "imagePreviews":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imagePreviews"))
			it.ImagePreviews, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "previewOptions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("previewOptions"))
			it.PreviewOptions, err = ec.unmarshalOGeneratePreviewOptionsInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGeneratePreviewOptionsInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "markers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("markers"))
			it.Markers, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "markerImagePreviews":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("markerImagePreviews"))
			it.MarkerImagePreviews, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "markerScreenshots":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("markerScreenshots"))
			it.MarkerScreenshots, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "transcodes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transcodes"))
			it.Transcodes, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "forceTranscodes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("forceTranscodes"))
			it.ForceTranscodes, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "phashes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phashes"))
			it.Phashes, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "interactiveHeatmapsSpeeds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interactiveHeatmapsSpeeds"))
			it.InteractiveHeatmapsSpeeds, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "sceneIDs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sceneIDs"))
			it.SceneIDs, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "markerIDs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("markerIDs"))
			it.MarkerIDs, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "overwrite":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overwrite"))
			it.Overwrite, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGeneratePreviewOptionsInput(ctx context.Context, obj interface{}) (GeneratePreviewOptionsInput, error) {
	var it GeneratePreviewOptionsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "previewSegments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("previewSegments"))
			it.PreviewSegments, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "previewSegmentDuration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("previewSegmentDuration"))
			it.PreviewSegmentDuration, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "previewExcludeStart":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("previewExcludeStart"))
			it.PreviewExcludeStart, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "previewExcludeEnd":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("previewExcludeEnd"))
			it.PreviewExcludeEnd, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "previewPreset":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("previewPreset"))
			it.PreviewPreset, err = ec.unmarshalOPreviewPreset2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPreviewPreset(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHierarchicalMultiCriterionInput(ctx context.Context, obj interface{}) (HierarchicalMultiCriterionInput, error) {
	var it HierarchicalMultiCriterionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "modifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modifier"))
			it.Modifier, err = ec.unmarshalNCriterionModifier2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐCriterionModifier(ctx, v)
			if err != nil {
				return it, err
			}
		case "depth":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("depth"))
			it.Depth, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIdentifyFieldOptionsInput(ctx context.Context, obj interface{}) (IdentifyFieldOptionsInput, error) {
	var it IdentifyFieldOptionsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "strategy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategy"))
			it.Strategy, err = ec.unmarshalNIdentifyFieldStrategy2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifyFieldStrategy(ctx, v)
			if err != nil {
				return it, err
			}
		case "createMissing":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createMissing"))
			it.CreateMissing, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIdentifyMetadataInput(ctx context.Context, obj interface{}) (IdentifyMetadataInput, error) {
	var it IdentifyMetadataInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "sources":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sources"))
			it.Sources, err = ec.unmarshalNIdentifySourceInput2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifySourceInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "options":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("options"))
			it.Options, err = ec.unmarshalOIdentifyMetadataOptionsInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifyMetadataOptionsInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "sceneIDs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sceneIDs"))
			it.SceneIDs, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "paths":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paths"))
			it.Paths, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIdentifyMetadataOptionsInput(ctx context.Context, obj interface{}) (IdentifyMetadataOptionsInput, error) {
	var it IdentifyMetadataOptionsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "fieldOptions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fieldOptions"))
			it.FieldOptions, err = ec.unmarshalOIdentifyFieldOptionsInput2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifyFieldOptionsInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "setCoverImage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("setCoverImage"))
			it.SetCoverImage, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "setOrganized":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("setOrganized"))
			it.SetOrganized, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "includeMalePerformers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeMalePerformers"))
			it.IncludeMalePerformers, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIdentifySourceInput(ctx context.Context, obj interface{}) (IdentifySourceInput, error) {
	var it IdentifySourceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source"))
			it.Source, err = ec.unmarshalNScraperSourceInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScraperSourceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "options":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("options"))
			it.Options, err = ec.unmarshalOIdentifyMetadataOptionsInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifyMetadataOptionsInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputImageDestroyInput(ctx context.Context, obj interface{}) (ImageDestroyInput, error) {
	var it ImageDestroyInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_file"))
			it.DeleteFile, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_generated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_generated"))
			it.DeleteGenerated, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputImageFilterType(ctx context.Context, obj interface{}) (ImageFilterType, error) {
	var it ImageFilterType
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalOImageFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImageFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalOImageFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImageFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "NOT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("NOT"))
			it.Not, err = ec.unmarshalOImageFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImageFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "checksum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("checksum"))
			it.Checksum, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "path":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("path"))
			it.Path, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "rating":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
			it.Rating, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "organized":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organized"))
			it.Organized, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "o_counter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("o_counter"))
			it.OCounter, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "resolution":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resolution"))
			it.Resolution, err = ec.unmarshalOResolutionCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐResolutionCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_missing":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_missing"))
			it.IsMissing, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "studios":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studios"))
			it.Studios, err = ec.unmarshalOHierarchicalMultiCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐHierarchicalMultiCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags"))
			it.Tags, err = ec.unmarshalOHierarchicalMultiCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐHierarchicalMultiCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_count"))
			it.TagCount, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "performer_tags":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performer_tags"))
			it.PerformerTags, err = ec.unmarshalOHierarchicalMultiCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐHierarchicalMultiCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "performers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performers"))
			it.Performers, err = ec.unmarshalOMultiCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMultiCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "performer_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performer_count"))
			it.PerformerCount, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "performer_favorite":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performer_favorite"))
			it.PerformerFavorite, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "galleries":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("galleries"))
			it.Galleries, err = ec.unmarshalOMultiCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMultiCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputImageUpdateInput(ctx context.Context, obj interface{}) (ImageUpdateInput, error) {
	var it ImageUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clientMutationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientMutationId"))
			it.ClientMutationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rating":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
			it.Rating, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "organized":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organized"))
			it.Organized, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "studio_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studio_id"))
			it.StudioID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "performer_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performer_ids"))
			it.PerformerIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_ids"))
			it.TagIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "gallery_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gallery_ids"))
			it.GalleryIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputImagesDestroyInput(ctx context.Context, obj interface{}) (ImagesDestroyInput, error) {
	var it ImagesDestroyInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
			it.Ids, err = ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_file"))
			it.DeleteFile, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_generated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_generated"))
			it.DeleteGenerated, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputImportObjectsInput(ctx context.Context, obj interface{}) (ImportObjectsInput, error) {
	var it ImportObjectsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file"))
			it.File, err = ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		case "duplicateBehaviour":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duplicateBehaviour"))
			it.DuplicateBehaviour, err = ec.unmarshalNImportDuplicateEnum2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImportDuplicateEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "missingRefBehaviour":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("missingRefBehaviour"))
			it.MissingRefBehaviour, err = ec.unmarshalNImportMissingRefEnum2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImportMissingRefEnum(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIntCriterionInput(ctx context.Context, obj interface{}) (IntCriterionInput, error) {
	var it IntCriterionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "value2":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value2"))
			it.Value2, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "modifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modifier"))
			it.Modifier, err = ec.unmarshalNCriterionModifier2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐCriterionModifier(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMigrateInput(ctx context.Context, obj interface{}) (MigrateInput, error) {
	var it MigrateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "backupPath":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("backupPath"))
			it.BackupPath, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMovieCreateInput(ctx context.Context, obj interface{}) (MovieCreateInput, error) {
	var it MovieCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "aliases":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aliases"))
			it.Aliases, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration"))
			it.Duration, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			it.Date, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rating":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
			it.Rating, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "studio_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studio_id"))
			it.StudioID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "director":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("director"))
			it.Director, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "synopsis":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("synopsis"))
			it.Synopsis, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "front_image":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("front_image"))
			it.FrontImage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "back_image":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("back_image"))
			it.BackImage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMovieDestroyInput(ctx context.Context, obj interface{}) (MovieDestroyInput, error) {
	var it MovieDestroyInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMovieFilterType(ctx context.Context, obj interface{}) (MovieFilterType, error) {
	var it MovieFilterType
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "director":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("director"))
			it.Director, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "synopsis":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("synopsis"))
			it.Synopsis, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration"))
			it.Duration, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "rating":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
			it.Rating, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "studios":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studios"))
			it.Studios, err = ec.unmarshalOHierarchicalMultiCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐHierarchicalMultiCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_missing":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_missing"))
			it.IsMissing, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "performers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performers"))
			it.Performers, err = ec.unmarshalOMultiCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMultiCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMovieUpdateInput(ctx context.Context, obj interface{}) (MovieUpdateInput, error) {
	var it MovieUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "aliases":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aliases"))
			it.Aliases, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration"))
			it.Duration, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			it.Date, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rating":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
			it.Rating, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "studio_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studio_id"))
			it.StudioID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "director":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("director"))
			it.Director, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "synopsis":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("synopsis"))
			it.Synopsis, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "front_image":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("front_image"))
			it.FrontImage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "back_image":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("back_image"))
			it.BackImage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMultiCriterionInput(ctx context.Context, obj interface{}) (MultiCriterionInput, error) {
	var it MultiCriterionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "modifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modifier"))
			it.Modifier, err = ec.unmarshalNCriterionModifier2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐCriterionModifier(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPHashDuplicationCriterionInput(ctx context.Context, obj interface{}) (PHashDuplicationCriterionInput, error) {
	var it PHashDuplicationCriterionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "duplicated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duplicated"))
			it.Duplicated, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "distance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distance"))
			it.Distance, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPerformerCreateInput(ctx context.Context, obj interface{}) (PerformerCreateInput, error) {
	var it PerformerCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			it.Gender, err = ec.unmarshalOGenderEnum2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGenderEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "birthdate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthdate"))
			it.Birthdate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ethnicity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ethnicity"))
			it.Ethnicity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			it.Country, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "eye_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eye_color"))
			it.EyeColor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "height":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("height"))
			it.Height, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "measurements":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("measurements"))
			it.Measurements, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fake_tits":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fake_tits"))
			it.FakeTits, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "career_length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("career_length"))
			it.CareerLength, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tattoos":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tattoos"))
			it.Tattoos, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "piercings":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("piercings"))
			it.Piercings, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "aliases":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aliases"))
			it.Aliases, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "twitter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("twitter"))
			it.Twitter, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instagram":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instagram"))
			it.Instagram, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "favorite":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("favorite"))
			it.Favorite, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_ids"))
			it.TagIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "image":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image"))
			it.Image, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stash_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stash_ids"))
			it.StashIds, err = ec.unmarshalOStashIDInput2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashIDInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "rating":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
			it.Rating, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "details":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details"))
			it.Details, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "death_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("death_date"))
			it.DeathDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hair_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hair_color"))
			it.HairColor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ignore_auto_tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ignore_auto_tag"))
			it.IgnoreAutoTag, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPerformerDestroyInput(ctx context.Context, obj interface{}) (PerformerDestroyInput, error) {
	var it PerformerDestroyInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPerformerFilterType(ctx context.Context, obj interface{}) (PerformerFilterType, error) {
	var it PerformerFilterType
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalOPerformerFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPerformerFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalOPerformerFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPerformerFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "NOT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("NOT"))
			it.Not, err = ec.unmarshalOPerformerFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPerformerFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "details":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details"))
			it.Details, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "filter_favorites":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter_favorites"))
			it.FilterFavorites, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "birth_year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birth_year"))
			it.BirthYear, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "age":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("age"))
			it.Age, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ethnicity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ethnicity"))
			it.Ethnicity, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			it.Country, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "eye_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eye_color"))
			it.EyeColor, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "height":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("height"))
			it.Height, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "measurements":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("measurements"))
			it.Measurements, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "fake_tits":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fake_tits"))
			it.FakeTits, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "career_length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("career_length"))
			it.CareerLength, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "tattoos":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tattoos"))
			it.Tattoos, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "piercings":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("piercings"))
			it.Piercings, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "aliases":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aliases"))
			it.Aliases, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			it.Gender, err = ec.unmarshalOGenderCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGenderCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_missing":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_missing"))
			it.IsMissing, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags"))
			it.Tags, err = ec.unmarshalOHierarchicalMultiCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐHierarchicalMultiCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_count"))
			it.TagCount, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "scene_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scene_count"))
			it.SceneCount, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "image_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image_count"))
			it.ImageCount, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "gallery_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gallery_count"))
			it.GalleryCount, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "stash_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stash_id"))
			it.StashID, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "rating":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
			it.Rating, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "hair_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hair_color"))
			it.HairColor, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "death_year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("death_year"))
			it.DeathYear, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "studios":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studios"))
			it.Studios, err = ec.unmarshalOHierarchicalMultiCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐHierarchicalMultiCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ignore_auto_tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ignore_auto_tag"))
			it.IgnoreAutoTag, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPerformerUpdateInput(ctx context.Context, obj interface{}) (PerformerUpdateInput, error) {
	var it PerformerUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			it.Gender, err = ec.unmarshalOGenderEnum2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGenderEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "birthdate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthdate"))
			it.Birthdate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ethnicity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ethnicity"))
			it.Ethnicity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			it.Country, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "eye_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eye_color"))
			it.EyeColor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "height":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("height"))
			it.Height, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "measurements":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("measurements"))
			it.Measurements, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fake_tits":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fake_tits"))
			it.FakeTits, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "career_length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("career_length"))
			it.CareerLength, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tattoos":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tattoos"))
			it.Tattoos, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "piercings":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("piercings"))
			it.Piercings, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "aliases":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aliases"))
			it.Aliases, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "twitter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("twitter"))
			it.Twitter, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instagram":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instagram"))
			it.Instagram, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "favorite":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("favorite"))
			it.Favorite, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_ids"))
			it.TagIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "image":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image"))
			it.Image, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stash_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stash_ids"))
			it.StashIds, err = ec.unmarshalOStashIDInput2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashIDInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "rating":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
			it.Rating, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "details":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details"))
			it.Details, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "death_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("death_date"))
			it.DeathDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hair_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hair_color"))
			it.HairColor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ignore_auto_tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ignore_auto_tag"))
			it.IgnoreAutoTag, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPluginArgInput(ctx context.Context, obj interface{}) (PluginArgInput, error) {
	var it PluginArgInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
			it.Key, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOPluginValueInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPluginValueInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPluginValueInput(ctx context.Context, obj interface{}) (PluginValueInput, error) {
	var it PluginValueInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "str":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("str"))
			it.Str, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "i":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("i"))
			it.I, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "b":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("b"))
			it.B, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "f":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("f"))
			it.F, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "o":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("o"))
			it.O, err = ec.unmarshalOPluginArgInput2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPluginArgInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "a":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("a"))
			it.A, err = ec.unmarshalOPluginValueInput2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPluginValueInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRemoveTempDLNAIPInput(ctx context.Context, obj interface{}) (RemoveTempDLNAIPInput, error) {
	var it RemoveTempDLNAIPInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputResolutionCriterionInput(ctx context.Context, obj interface{}) (ResolutionCriterionInput, error) {
	var it ResolutionCriterionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalNResolutionEnum2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐResolutionEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "modifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modifier"))
			it.Modifier, err = ec.unmarshalNCriterionModifier2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐCriterionModifier(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSaveFilterInput(ctx context.Context, obj interface{}) (SaveFilterInput, error) {
	var it SaveFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mode"))
			it.Mode, err = ec.unmarshalNFilterMode2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFilterMode(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputScanMetaDataFilterInput(ctx context.Context, obj interface{}) (ScanMetaDataFilterInput, error) {
	var it ScanMetaDataFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "minModTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minModTime"))
			it.MinModTime, err = ec.unmarshalOTimestamp2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputScanMetadataInput(ctx context.Context, obj interface{}) (ScanMetadataInput, error) {
	var it ScanMetadataInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "paths":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paths"))
			it.Paths, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "useFileMetadata":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("useFileMetadata"))
			it.UseFileMetadata, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "stripFileExtension":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stripFileExtension"))
			it.StripFileExtension, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "scanGeneratePreviews":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scanGeneratePreviews"))
			it.ScanGeneratePreviews, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "scanGenerateImagePreviews":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scanGenerateImagePreviews"))
			it.ScanGenerateImagePreviews, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "scanGenerateSprites":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scanGenerateSprites"))
			it.ScanGenerateSprites, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "scanGeneratePhashes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scanGeneratePhashes"))
			it.ScanGeneratePhashes, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "scanGenerateThumbnails":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scanGenerateThumbnails"))
			it.ScanGenerateThumbnails, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalOScanMetaDataFilterInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScanMetaDataFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSceneDestroyInput(ctx context.Context, obj interface{}) (SceneDestroyInput, error) {
	var it SceneDestroyInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_file"))
			it.DeleteFile, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_generated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_generated"))
			it.DeleteGenerated, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSceneFilterType(ctx context.Context, obj interface{}) (SceneFilterType, error) {
	var it SceneFilterType
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalOSceneFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalOSceneFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "NOT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("NOT"))
			it.Not, err = ec.unmarshalOSceneFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "details":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details"))
			it.Details, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "oshash":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oshash"))
			it.Oshash, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "checksum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("checksum"))
			it.Checksum, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "phash":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phash"))
			it.Phash, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "path":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("path"))
			it.Path, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "rating":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
			it.Rating, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "organized":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organized"))
			it.Organized, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "o_counter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("o_counter"))
			it.OCounter, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "duplicated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duplicated"))
			it.Duplicated, err = ec.unmarshalOPHashDuplicationCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPHashDuplicationCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "resolution":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resolution"))
			it.Resolution, err = ec.unmarshalOResolutionCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐResolutionCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration"))
			it.Duration, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "has_markers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("has_markers"))
			it.HasMarkers, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_missing":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_missing"))
			it.IsMissing, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "studios":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studios"))
			it.Studios, err = ec.unmarshalOHierarchicalMultiCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐHierarchicalMultiCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "movies":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("movies"))
			it.Movies, err = ec.unmarshalOMultiCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMultiCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags"))
			it.Tags, err = ec.unmarshalOHierarchicalMultiCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐHierarchicalMultiCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_count"))
			it.TagCount, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "performer_tags":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performer_tags"))
			it.PerformerTags, err = ec.unmarshalOHierarchicalMultiCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐHierarchicalMultiCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "performer_favorite":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performer_favorite"))
			it.PerformerFavorite, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "performer_age":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performer_age"))
			it.PerformerAge, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "performers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performers"))
			it.Performers, err = ec.unmarshalOMultiCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMultiCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "performer_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performer_count"))
			it.PerformerCount, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "stash_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stash_id"))
			it.StashID, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "interactive":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interactive"))
			it.Interactive, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "interactive_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interactive_speed"))
			it.InteractiveSpeed, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "captions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("captions"))
			it.Captions, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSceneHashInput(ctx context.Context, obj interface{}) (SceneHashInput, error) {
	var it SceneHashInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "checksum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("checksum"))
			it.Checksum, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "oshash":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oshash"))
			it.Oshash, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSceneMarkerCreateInput(ctx context.Context, obj interface{}) (SceneMarkerCreateInput, error) {
	var it SceneMarkerCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "seconds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seconds"))
			it.Seconds, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "scene_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scene_id"))
			it.SceneID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "primary_tag_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("primary_tag_id"))
			it.PrimaryTagID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_ids"))
			it.TagIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSceneMarkerFilterType(ctx context.Context, obj interface{}) (SceneMarkerFilterType, error) {
	var it SceneMarkerFilterType
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "tag_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_id"))
			it.TagID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags"))
			it.Tags, err = ec.unmarshalOHierarchicalMultiCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐHierarchicalMultiCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "scene_tags":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scene_tags"))
			it.SceneTags, err = ec.unmarshalOHierarchicalMultiCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐHierarchicalMultiCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "performers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performers"))
			it.Performers, err = ec.unmarshalOMultiCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMultiCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSceneMarkerUpdateInput(ctx context.Context, obj interface{}) (SceneMarkerUpdateInput, error) {
	var it SceneMarkerUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "seconds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seconds"))
			it.Seconds, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "scene_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scene_id"))
			it.SceneID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "primary_tag_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("primary_tag_id"))
			it.PrimaryTagID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_ids"))
			it.TagIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSceneMovieInput(ctx context.Context, obj interface{}) (SceneMovieInput, error) {
	var it SceneMovieInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "movie_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("movie_id"))
			it.MovieID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "scene_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scene_index"))
			it.SceneIndex, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSceneParserInput(ctx context.Context, obj interface{}) (SceneParserInput, error) {
	var it SceneParserInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ignoreWords":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ignoreWords"))
			it.IgnoreWords, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "whitespaceCharacters":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("whitespaceCharacters"))
			it.WhitespaceCharacters, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "capitalizeTitle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("capitalizeTitle"))
			it.CapitalizeTitle, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "ignoreOrganized":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ignoreOrganized"))
			it.IgnoreOrganized, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSceneUpdateInput(ctx context.Context, obj interface{}) (SceneUpdateInput, error) {
	var it SceneUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clientMutationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientMutationId"))
			it.ClientMutationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "details":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details"))
			it.Details, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			it.Date, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rating":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
			it.Rating, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "organized":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organized"))
			it.Organized, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "studio_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studio_id"))
			it.StudioID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gallery_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gallery_ids"))
			it.GalleryIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "performer_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performer_ids"))
			it.PerformerIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "movies":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("movies"))
			it.Movies, err = ec.unmarshalOSceneMovieInput2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMovieInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag_ids"))
			it.TagIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "cover_image":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cover_image"))
			it.CoverImage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stash_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stash_ids"))
			it.StashIds, err = ec.unmarshalOStashIDInput2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashIDInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputScenesDestroyInput(ctx context.Context, obj interface{}) (ScenesDestroyInput, error) {
	var it ScenesDestroyInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
			it.Ids, err = ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_file"))
			it.DeleteFile, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_generated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_generated"))
			it.DeleteGenerated, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputScrapeMultiPerformersInput(ctx context.Context, obj interface{}) (ScrapeMultiPerformersInput, error) {
	var it ScrapeMultiPerformersInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "performer_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performer_ids"))
			it.PerformerIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputScrapeMultiScenesInput(ctx context.Context, obj interface{}) (ScrapeMultiScenesInput, error) {
	var it ScrapeMultiScenesInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "scene_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scene_ids"))
			it.SceneIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputScrapeSingleGalleryInput(ctx context.Context, obj interface{}) (ScrapeSingleGalleryInput, error) {
	var it ScrapeSingleGalleryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "query":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
			it.Query, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gallery_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gallery_id"))
			it.GalleryID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gallery_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gallery_input"))
			it.GalleryInput, err = ec.unmarshalOScrapedGalleryInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedGalleryInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputScrapeSingleMovieInput(ctx context.Context, obj interface{}) (ScrapeSingleMovieInput, error) {
	var it ScrapeSingleMovieInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "query":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
			it.Query, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "movie_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("movie_id"))
			it.MovieID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "movie_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("movie_input"))
			it.MovieInput, err = ec.unmarshalOScrapedMovieInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedMovieInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputScrapeSinglePerformerInput(ctx context.Context, obj interface{}) (ScrapeSinglePerformerInput, error) {
	var it ScrapeSinglePerformerInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "query":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
			it.Query, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "performer_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performer_id"))
			it.PerformerID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "performer_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performer_input"))
			it.PerformerInput, err = ec.unmarshalOScrapedPerformerInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedPerformerInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputScrapeSingleSceneInput(ctx context.Context, obj interface{}) (ScrapeSingleSceneInput, error) {
	var it ScrapeSingleSceneInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "query":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
			it.Query, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "scene_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scene_id"))
			it.SceneID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "scene_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scene_input"))
			it.SceneInput, err = ec.unmarshalOScrapedSceneInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedSceneInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputScrapedGalleryInput(ctx context.Context, obj interface{}) (ScrapedGalleryInput, error) {
	var it ScrapedGalleryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "details":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details"))
			it.Details, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			it.Date, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputScrapedMovieInput(ctx context.Context, obj interface{}) (ScrapedMovieInput, error) {
	var it ScrapedMovieInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "aliases":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aliases"))
			it.Aliases, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration"))
			it.Duration, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			it.Date, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rating":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
			it.Rating, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "director":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("director"))
			it.Director, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "synopsis":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("synopsis"))
			it.Synopsis, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputScrapedPerformerInput(ctx context.Context, obj interface{}) (ScrapedPerformerInput, error) {
	var it ScrapedPerformerInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "stored_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stored_id"))
			it.StoredID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			it.Gender, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "twitter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("twitter"))
			it.Twitter, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instagram":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instagram"))
			it.Instagram, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "birthdate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthdate"))
			it.Birthdate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ethnicity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ethnicity"))
			it.Ethnicity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			it.Country, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "eye_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eye_color"))
			it.EyeColor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "height":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("height"))
			it.Height, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "measurements":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("measurements"))
			it.Measurements, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fake_tits":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fake_tits"))
			it.FakeTits, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "career_length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("career_length"))
			it.CareerLength, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tattoos":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tattoos"))
			it.Tattoos, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "piercings":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("piercings"))
			it.Piercings, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "aliases":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aliases"))
			it.Aliases, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "details":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details"))
			it.Details, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "death_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("death_date"))
			it.DeathDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hair_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hair_color"))
			it.HairColor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remote_site_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remote_site_id"))
			it.RemoteSiteID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputScrapedSceneInput(ctx context.Context, obj interface{}) (ScrapedSceneInput, error) {
	var it ScrapedSceneInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "details":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details"))
			it.Details, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			it.Date, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remote_site_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remote_site_id"))
			it.RemoteSiteID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputScraperSourceInput(ctx context.Context, obj interface{}) (ScraperSourceInput, error) {
	var it ScraperSourceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "stash_box_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stash_box_index"))
			it.StashBoxIndex, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "stash_box_endpoint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stash_box_endpoint"))
			it.StashBoxEndpoint, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "scraper_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scraper_id"))
			it.ScraperID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSetDefaultFilterInput(ctx context.Context, obj interface{}) (SetDefaultFilterInput, error) {
	var it SetDefaultFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "mode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mode"))
			it.Mode, err = ec.unmarshalNFilterMode2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFilterMode(ctx, v)
			if err != nil {
				return it, err
			}
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSetupInput(ctx context.Context, obj interface{}) (SetupInput, error) {
	var it SetupInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "configLocation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("configLocation"))
			it.ConfigLocation, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "stashes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stashes"))
			it.Stashes, err = ec.unmarshalNStashConfigInput2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashConfigInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "databaseFile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("databaseFile"))
			it.DatabaseFile, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "generatedLocation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("generatedLocation"))
			it.GeneratedLocation, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStashBoxBatchPerformerTagInput(ctx context.Context, obj interface{}) (StashBoxBatchPerformerTagInput, error) {
	var it StashBoxBatchPerformerTagInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "endpoint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endpoint"))
			it.Endpoint, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "exclude_fields":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exclude_fields"))
			it.ExcludeFields, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "refresh":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refresh"))
			it.Refresh, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "performer_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performer_ids"))
			it.PerformerIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "performer_names":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performer_names"))
			it.PerformerNames, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStashBoxDraftSubmissionInput(ctx context.Context, obj interface{}) (StashBoxDraftSubmissionInput, error) {
	var it StashBoxDraftSubmissionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "stash_box_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stash_box_index"))
			it.StashBoxIndex, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStashBoxFingerprintSubmissionInput(ctx context.Context, obj interface{}) (StashBoxFingerprintSubmissionInput, error) {
	var it StashBoxFingerprintSubmissionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "scene_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scene_ids"))
			it.SceneIds, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "stash_box_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stash_box_index"))
			it.StashBoxIndex, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStashBoxInput(ctx context.Context, obj interface{}) (StashBoxInput, error) {
	var it StashBoxInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "endpoint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endpoint"))
			it.Endpoint, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "api_key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("api_key"))
			it.APIKey, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStashBoxPerformerQueryInput(ctx context.Context, obj interface{}) (StashBoxPerformerQueryInput, error) {
	var it StashBoxPerformerQueryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "stash_box_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stash_box_index"))
			it.StashBoxIndex, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "performer_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performer_ids"))
			it.PerformerIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "q":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
			it.Q, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStashBoxSceneQueryInput(ctx context.Context, obj interface{}) (StashBoxSceneQueryInput, error) {
	var it StashBoxSceneQueryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "stash_box_index":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stash_box_index"))
			it.StashBoxIndex, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "scene_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scene_ids"))
			it.SceneIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "q":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
			it.Q, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStashConfigInput(ctx context.Context, obj interface{}) (StashConfigInput, error) {
	var it StashConfigInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "path":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("path"))
			it.Path, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "excludeVideo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("excludeVideo"))
			it.ExcludeVideo, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "excludeImage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("excludeImage"))
			it.ExcludeImage, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStashIDInput(ctx context.Context, obj interface{}) (StashIDInput, error) {
	var it StashIDInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "endpoint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endpoint"))
			it.Endpoint, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "stash_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stash_id"))
			it.StashID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringCriterionInput(ctx context.Context, obj interface{}) (StringCriterionInput, error) {
	var it StringCriterionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "modifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modifier"))
			it.Modifier, err = ec.unmarshalNCriterionModifier2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐCriterionModifier(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStudioCreateInput(ctx context.Context, obj interface{}) (StudioCreateInput, error) {
	var it StudioCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent_id"))
			it.ParentID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "image":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image"))
			it.Image, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stash_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stash_ids"))
			it.StashIds, err = ec.unmarshalOStashIDInput2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashIDInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "rating":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
			it.Rating, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "details":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details"))
			it.Details, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "aliases":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aliases"))
			it.Aliases, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "ignore_auto_tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ignore_auto_tag"))
			it.IgnoreAutoTag, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStudioDestroyInput(ctx context.Context, obj interface{}) (StudioDestroyInput, error) {
	var it StudioDestroyInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStudioFilterType(ctx context.Context, obj interface{}) (StudioFilterType, error) {
	var it StudioFilterType
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalOStudioFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStudioFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalOStudioFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStudioFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "NOT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("NOT"))
			it.Not, err = ec.unmarshalOStudioFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStudioFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "details":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details"))
			it.Details, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "parents":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parents"))
			it.Parents, err = ec.unmarshalOMultiCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMultiCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "stash_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stash_id"))
			it.StashID, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_missing":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_missing"))
			it.IsMissing, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rating":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
			it.Rating, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "scene_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scene_count"))
			it.SceneCount, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "image_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image_count"))
			it.ImageCount, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "gallery_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gallery_count"))
			it.GalleryCount, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "aliases":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aliases"))
			it.Aliases, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ignore_auto_tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ignore_auto_tag"))
			it.IgnoreAutoTag, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStudioUpdateInput(ctx context.Context, obj interface{}) (StudioUpdateInput, error) {
	var it StudioUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent_id"))
			it.ParentID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "image":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image"))
			it.Image, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stash_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stash_ids"))
			it.StashIds, err = ec.unmarshalOStashIDInput2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashIDInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "rating":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rating"))
			it.Rating, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "details":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("details"))
			it.Details, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "aliases":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aliases"))
			it.Aliases, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "ignore_auto_tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ignore_auto_tag"))
			it.IgnoreAutoTag, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTagCreateInput(ctx context.Context, obj interface{}) (TagCreateInput, error) {
	var it TagCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "aliases":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aliases"))
			it.Aliases, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "ignore_auto_tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ignore_auto_tag"))
			it.IgnoreAutoTag, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "image":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image"))
			it.Image, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent_ids"))
			it.ParentIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "child_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("child_ids"))
			it.ChildIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTagDestroyInput(ctx context.Context, obj interface{}) (TagDestroyInput, error) {
	var it TagDestroyInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTagFilterType(ctx context.Context, obj interface{}) (TagFilterType, error) {
	var it TagFilterType
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "AND":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			it.And, err = ec.unmarshalOTagFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTagFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "OR":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			it.Or, err = ec.unmarshalOTagFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTagFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "NOT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("NOT"))
			it.Not, err = ec.unmarshalOTagFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTagFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "aliases":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aliases"))
			it.Aliases, err = ec.unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_missing":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_missing"))
			it.IsMissing, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "scene_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scene_count"))
			it.SceneCount, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "image_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image_count"))
			it.ImageCount, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "gallery_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gallery_count"))
			it.GalleryCount, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "performer_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("performer_count"))
			it.PerformerCount, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "marker_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marker_count"))
			it.MarkerCount, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "parents":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parents"))
			it.Parents, err = ec.unmarshalOHierarchicalMultiCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐHierarchicalMultiCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "children":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("children"))
			it.Children, err = ec.unmarshalOHierarchicalMultiCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐHierarchicalMultiCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent_count"))
			it.ParentCount, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "child_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("child_count"))
			it.ChildCount, err = ec.unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ignore_auto_tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ignore_auto_tag"))
			it.IgnoreAutoTag, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTagUpdateInput(ctx context.Context, obj interface{}) (TagUpdateInput, error) {
	var it TagUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "aliases":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aliases"))
			it.Aliases, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "ignore_auto_tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ignore_auto_tag"))
			it.IgnoreAutoTag, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "image":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image"))
			it.Image, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent_ids"))
			it.ParentIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "child_ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("child_ids"))
			it.ChildIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTagsMergeInput(ctx context.Context, obj interface{}) (TagsMergeInput, error) {
	var it TagsMergeInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source"))
			it.Source, err = ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "destination":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destination"))
			it.Destination, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _ScrapedContent(ctx context.Context, sel ast.SelectionSet, obj ScrapedContent) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case ScrapedStudio:
		return ec._ScrapedStudio(ctx, sel, &obj)
	case *ScrapedStudio:
		if obj == nil {
			return graphql.Null
		}
		return ec._ScrapedStudio(ctx, sel, obj)
	case ScrapedTag:
		return ec._ScrapedTag(ctx, sel, &obj)
	case *ScrapedTag:
		if obj == nil {
			return graphql.Null
		}
		return ec._ScrapedTag(ctx, sel, obj)
	case ScrapedScene:
		return ec._ScrapedScene(ctx, sel, &obj)
	case *ScrapedScene:
		if obj == nil {
			return graphql.Null
		}
		return ec._ScrapedScene(ctx, sel, obj)
	case ScrapedGallery:
		return ec._ScrapedGallery(ctx, sel, &obj)
	case *ScrapedGallery:
		if obj == nil {
			return graphql.Null
		}
		return ec._ScrapedGallery(ctx, sel, obj)
	case ScrapedMovie:
		return ec._ScrapedMovie(ctx, sel, &obj)
	case *ScrapedMovie:
		if obj == nil {
			return graphql.Null
		}
		return ec._ScrapedMovie(ctx, sel, obj)
	case ScrapedPerformer:
		return ec._ScrapedPerformer(ctx, sel, &obj)
	case *ScrapedPerformer:
		if obj == nil {
			return graphql.Null
		}
		return ec._ScrapedPerformer(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var autoTagMetadataOptionsImplementors = []string{"AutoTagMetadataOptions"}

func (ec *executionContext) _AutoTagMetadataOptions(ctx context.Context, sel ast.SelectionSet, obj *AutoTagMetadataOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, autoTagMetadataOptionsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AutoTagMetadataOptions")
		case "performers":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AutoTagMetadataOptions_performers(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "studios":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AutoTagMetadataOptions_studios(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "tags":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._AutoTagMetadataOptions_tags(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var configDLNAResultImplementors = []string{"ConfigDLNAResult"}

func (ec *executionContext) _ConfigDLNAResult(ctx context.Context, sel ast.SelectionSet, obj *ConfigDLNAResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configDLNAResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigDLNAResult")
		case "serverName":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigDLNAResult_serverName(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enabled":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigDLNAResult_enabled(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "whitelistedIPs":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigDLNAResult_whitelistedIPs(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "interfaces":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigDLNAResult_interfaces(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var configDefaultSettingsResultImplementors = []string{"ConfigDefaultSettingsResult"}

func (ec *executionContext) _ConfigDefaultSettingsResult(ctx context.Context, sel ast.SelectionSet, obj *ConfigDefaultSettingsResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configDefaultSettingsResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigDefaultSettingsResult")
		case "scan":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigDefaultSettingsResult_scan(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "identify":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigDefaultSettingsResult_identify(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "autoTag":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigDefaultSettingsResult_autoTag(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "generate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigDefaultSettingsResult_generate(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "deleteFile":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigDefaultSettingsResult_deleteFile(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "deleteGenerated":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigDefaultSettingsResult_deleteGenerated(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var configDisableDropdownCreateImplementors = []string{"ConfigDisableDropdownCreate"}

func (ec *executionContext) _ConfigDisableDropdownCreate(ctx context.Context, sel ast.SelectionSet, obj *ConfigDisableDropdownCreate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configDisableDropdownCreateImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigDisableDropdownCreate")
		case "performer":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigDisableDropdownCreate_performer(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tag":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigDisableDropdownCreate_tag(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "studio":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigDisableDropdownCreate_studio(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var configGeneralResultImplementors = []string{"ConfigGeneralResult"}

func (ec *executionContext) _ConfigGeneralResult(ctx context.Context, sel ast.SelectionSet, obj *ConfigGeneralResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configGeneralResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigGeneralResult")
		case "stashes":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_stashes(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "databasePath":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_databasePath(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "generatedPath":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_generatedPath(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "metadataPath":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_metadataPath(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "configFilePath":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_configFilePath(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "scrapersPath":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_scrapersPath(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cachePath":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_cachePath(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "calculateMD5":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_calculateMD5(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "videoFileNamingAlgorithm":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_videoFileNamingAlgorithm(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parallelTasks":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_parallelTasks(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "previewAudio":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_previewAudio(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "previewSegments":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_previewSegments(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "previewSegmentDuration":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_previewSegmentDuration(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "previewExcludeStart":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_previewExcludeStart(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "previewExcludeEnd":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_previewExcludeEnd(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "previewPreset":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_previewPreset(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "maxTranscodeSize":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_maxTranscodeSize(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "maxStreamingTranscodeSize":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_maxStreamingTranscodeSize(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "writeImageThumbnails":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_writeImageThumbnails(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "apiKey":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_apiKey(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "username":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_username(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "password":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_password(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "maxSessionAge":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_maxSessionAge(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "trustedProxies":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_trustedProxies(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "logFile":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_logFile(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "logOut":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_logOut(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "logLevel":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_logLevel(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "logAccess":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_logAccess(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "videoExtensions":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_videoExtensions(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "imageExtensions":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_imageExtensions(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "galleryExtensions":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_galleryExtensions(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createGalleriesFromFolders":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_createGalleriesFromFolders(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "excludes":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_excludes(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "imageExcludes":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_imageExcludes(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "customPerformerImageLocation":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_customPerformerImageLocation(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "scraperUserAgent":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_scraperUserAgent(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "scraperCDPPath":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_scraperCDPPath(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "scraperCertCheck":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_scraperCertCheck(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "stashBoxes":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_stashBoxes(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pythonPath":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigGeneralResult_pythonPath(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var configImageLightboxResultImplementors = []string{"ConfigImageLightboxResult"}

func (ec *executionContext) _ConfigImageLightboxResult(ctx context.Context, sel ast.SelectionSet, obj *ConfigImageLightboxResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configImageLightboxResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigImageLightboxResult")
		case "slideshowDelay":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigImageLightboxResult_slideshowDelay(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "displayMode":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigImageLightboxResult_displayMode(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "scaleUp":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigImageLightboxResult_scaleUp(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "resetZoomOnNav":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigImageLightboxResult_resetZoomOnNav(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "scrollMode":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigImageLightboxResult_scrollMode(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "scrollAttemptsBeforeChange":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigImageLightboxResult_scrollAttemptsBeforeChange(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var configInterfaceResultImplementors = []string{"ConfigInterfaceResult"}

func (ec *executionContext) _ConfigInterfaceResult(ctx context.Context, sel ast.SelectionSet, obj *ConfigInterfaceResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configInterfaceResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigInterfaceResult")
		case "menuItems":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigInterfaceResult_menuItems(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "soundOnPreview":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigInterfaceResult_soundOnPreview(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "wallShowTitle":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigInterfaceResult_wallShowTitle(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "wallPlayback":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigInterfaceResult_wallPlayback(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "showScrubber":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigInterfaceResult_showScrubber(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "maximumLoopDuration":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigInterfaceResult_maximumLoopDuration(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "noBrowser":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigInterfaceResult_noBrowser(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "notificationsEnabled":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigInterfaceResult_notificationsEnabled(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "autostartVideo":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigInterfaceResult_autostartVideo(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "autostartVideoOnPlaySelected":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigInterfaceResult_autostartVideoOnPlaySelected(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "continuePlaylistDefault":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigInterfaceResult_continuePlaylistDefault(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "showStudioAsText":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigInterfaceResult_showStudioAsText(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "css":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigInterfaceResult_css(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "cssEnabled":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigInterfaceResult_cssEnabled(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "language":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigInterfaceResult_language(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "slideshowDelay":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigInterfaceResult_slideshowDelay(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "imageLightbox":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigInterfaceResult_imageLightbox(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "disableDropdownCreate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigInterfaceResult_disableDropdownCreate(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "disabledDropdownCreate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigInterfaceResult_disabledDropdownCreate(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "handyKey":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigInterfaceResult_handyKey(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "funscriptOffset":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigInterfaceResult_funscriptOffset(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var configResultImplementors = []string{"ConfigResult"}

func (ec *executionContext) _ConfigResult(ctx context.Context, sel ast.SelectionSet, obj *ConfigResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigResult")
		case "general":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigResult_general(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "interface":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigResult_interface(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dlna":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigResult_dlna(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "scraping":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigResult_scraping(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaults":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigResult_defaults(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ui":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigResult_ui(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var configScrapingResultImplementors = []string{"ConfigScrapingResult"}

func (ec *executionContext) _ConfigScrapingResult(ctx context.Context, sel ast.SelectionSet, obj *ConfigScrapingResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configScrapingResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigScrapingResult")
		case "scraperUserAgent":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigScrapingResult_scraperUserAgent(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "scraperCDPPath":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigScrapingResult_scraperCDPPath(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "scraperCertCheck":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigScrapingResult_scraperCertCheck(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "excludeTagPatterns":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ConfigScrapingResult_excludeTagPatterns(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dLNAIPImplementors = []string{"DLNAIP"}

func (ec *executionContext) _DLNAIP(ctx context.Context, sel ast.SelectionSet, obj *Dlnaip) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dLNAIPImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DLNAIP")
		case "ipAddress":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._DLNAIP_ipAddress(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "until":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._DLNAIP_until(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dLNAStatusImplementors = []string{"DLNAStatus"}

func (ec *executionContext) _DLNAStatus(ctx context.Context, sel ast.SelectionSet, obj *DLNAStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dLNAStatusImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DLNAStatus")
		case "running":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._DLNAStatus_running(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "until":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._DLNAStatus_until(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "recentIPAddresses":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._DLNAStatus_recentIPAddresses(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "allowedIPAddresses":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._DLNAStatus_allowedIPAddresses(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var directoryImplementors = []string{"Directory"}

func (ec *executionContext) _Directory(ctx context.Context, sel ast.SelectionSet, obj *Directory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, directoryImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Directory")
		case "path":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Directory_path(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parent":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Directory_parent(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "directories":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Directory_directories(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var findGalleriesResultTypeImplementors = []string{"FindGalleriesResultType"}

func (ec *executionContext) _FindGalleriesResultType(ctx context.Context, sel ast.SelectionSet, obj *FindGalleriesResultType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, findGalleriesResultTypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FindGalleriesResultType")
		case "count":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FindGalleriesResultType_count(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "galleries":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FindGalleriesResultType_galleries(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var findImagesResultTypeImplementors = []string{"FindImagesResultType"}

func (ec *executionContext) _FindImagesResultType(ctx context.Context, sel ast.SelectionSet, obj *FindImagesResultType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, findImagesResultTypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FindImagesResultType")
		case "count":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FindImagesResultType_count(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "megapixels":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FindImagesResultType_megapixels(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "filesize":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FindImagesResultType_filesize(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "images":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FindImagesResultType_images(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var findMoviesResultTypeImplementors = []string{"FindMoviesResultType"}

func (ec *executionContext) _FindMoviesResultType(ctx context.Context, sel ast.SelectionSet, obj *FindMoviesResultType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, findMoviesResultTypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FindMoviesResultType")
		case "count":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FindMoviesResultType_count(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "movies":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FindMoviesResultType_movies(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var findPerformersResultTypeImplementors = []string{"FindPerformersResultType"}

func (ec *executionContext) _FindPerformersResultType(ctx context.Context, sel ast.SelectionSet, obj *FindPerformersResultType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, findPerformersResultTypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FindPerformersResultType")
		case "count":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FindPerformersResultType_count(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "performers":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FindPerformersResultType_performers(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var findSceneMarkersResultTypeImplementors = []string{"FindSceneMarkersResultType"}

func (ec *executionContext) _FindSceneMarkersResultType(ctx context.Context, sel ast.SelectionSet, obj *FindSceneMarkersResultType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, findSceneMarkersResultTypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FindSceneMarkersResultType")
		case "count":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FindSceneMarkersResultType_count(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "scene_markers":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FindSceneMarkersResultType_scene_markers(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var findScenesResultTypeImplementors = []string{"FindScenesResultType"}

func (ec *executionContext) _FindScenesResultType(ctx context.Context, sel ast.SelectionSet, obj *FindScenesResultType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, findScenesResultTypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FindScenesResultType")
		case "count":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FindScenesResultType_count(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "duration":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FindScenesResultType_duration(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "filesize":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FindScenesResultType_filesize(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "scenes":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FindScenesResultType_scenes(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var findStudiosResultTypeImplementors = []string{"FindStudiosResultType"}

func (ec *executionContext) _FindStudiosResultType(ctx context.Context, sel ast.SelectionSet, obj *FindStudiosResultType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, findStudiosResultTypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FindStudiosResultType")
		case "count":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FindStudiosResultType_count(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "studios":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FindStudiosResultType_studios(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var findTagsResultTypeImplementors = []string{"FindTagsResultType"}

func (ec *executionContext) _FindTagsResultType(ctx context.Context, sel ast.SelectionSet, obj *FindTagsResultType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, findTagsResultTypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FindTagsResultType")
		case "count":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FindTagsResultType_count(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tags":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._FindTagsResultType_tags(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var galleryImplementors = []string{"Gallery"}

func (ec *executionContext) _Gallery(ctx context.Context, sel ast.SelectionSet, obj *Gallery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, galleryImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Gallery")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Gallery_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "checksum":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Gallery_checksum(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "path":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Gallery_path(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "title":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Gallery_title(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "url":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Gallery_url(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "date":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Gallery_date(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "details":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Gallery_details(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "rating":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Gallery_rating(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "organized":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Gallery_organized(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "created_at":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Gallery_created_at(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "updated_at":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Gallery_updated_at(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "file_mod_time":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Gallery_file_mod_time(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "scenes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Gallery_scenes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "studio":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Gallery_studio(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "image_count":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Gallery_image_count(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "tags":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Gallery_tags(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "performers":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Gallery_performers(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "images":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Gallery_images(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "cover":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Gallery_cover(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var galleryFilesTypeImplementors = []string{"GalleryFilesType"}

func (ec *executionContext) _GalleryFilesType(ctx context.Context, sel ast.SelectionSet, obj *GalleryFilesType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, galleryFilesTypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GalleryFilesType")
		case "index":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GalleryFilesType_index(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GalleryFilesType_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "path":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GalleryFilesType_path(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var generateMetadataOptionsImplementors = []string{"GenerateMetadataOptions"}

func (ec *executionContext) _GenerateMetadataOptions(ctx context.Context, sel ast.SelectionSet, obj *GenerateMetadataOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, generateMetadataOptionsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GenerateMetadataOptions")
		case "sprites":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GenerateMetadataOptions_sprites(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "previews":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GenerateMetadataOptions_previews(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "imagePreviews":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GenerateMetadataOptions_imagePreviews(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "previewOptions":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GenerateMetadataOptions_previewOptions(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "markers":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GenerateMetadataOptions_markers(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "markerImagePreviews":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GenerateMetadataOptions_markerImagePreviews(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "markerScreenshots":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GenerateMetadataOptions_markerScreenshots(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "transcodes":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GenerateMetadataOptions_transcodes(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "phashes":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GenerateMetadataOptions_phashes(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "interactiveHeatmapsSpeeds":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GenerateMetadataOptions_interactiveHeatmapsSpeeds(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var generatePreviewOptionsImplementors = []string{"GeneratePreviewOptions"}

func (ec *executionContext) _GeneratePreviewOptions(ctx context.Context, sel ast.SelectionSet, obj *GeneratePreviewOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, generatePreviewOptionsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GeneratePreviewOptions")
		case "previewSegments":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GeneratePreviewOptions_previewSegments(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "previewSegmentDuration":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GeneratePreviewOptions_previewSegmentDuration(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "previewExcludeStart":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GeneratePreviewOptions_previewExcludeStart(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "previewExcludeEnd":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GeneratePreviewOptions_previewExcludeEnd(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "previewPreset":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._GeneratePreviewOptions_previewPreset(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var identifyFieldOptionsImplementors = []string{"IdentifyFieldOptions"}

func (ec *executionContext) _IdentifyFieldOptions(ctx context.Context, sel ast.SelectionSet, obj *IdentifyFieldOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, identifyFieldOptionsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IdentifyFieldOptions")
		case "field":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._IdentifyFieldOptions_field(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "strategy":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._IdentifyFieldOptions_strategy(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createMissing":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._IdentifyFieldOptions_createMissing(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var identifyMetadataOptionsImplementors = []string{"IdentifyMetadataOptions"}

func (ec *executionContext) _IdentifyMetadataOptions(ctx context.Context, sel ast.SelectionSet, obj *IdentifyMetadataOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, identifyMetadataOptionsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IdentifyMetadataOptions")
		case "fieldOptions":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._IdentifyMetadataOptions_fieldOptions(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "setCoverImage":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._IdentifyMetadataOptions_setCoverImage(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "setOrganized":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._IdentifyMetadataOptions_setOrganized(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "includeMalePerformers":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._IdentifyMetadataOptions_includeMalePerformers(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var identifyMetadataTaskOptionsImplementors = []string{"IdentifyMetadataTaskOptions"}

func (ec *executionContext) _IdentifyMetadataTaskOptions(ctx context.Context, sel ast.SelectionSet, obj *IdentifyMetadataTaskOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, identifyMetadataTaskOptionsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IdentifyMetadataTaskOptions")
		case "sources":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._IdentifyMetadataTaskOptions_sources(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "options":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._IdentifyMetadataTaskOptions_options(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var identifySourceImplementors = []string{"IdentifySource"}

func (ec *executionContext) _IdentifySource(ctx context.Context, sel ast.SelectionSet, obj *IdentifySource) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, identifySourceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IdentifySource")
		case "source":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._IdentifySource_source(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "options":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._IdentifySource_options(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imageImplementors = []string{"Image"}

func (ec *executionContext) _Image(ctx context.Context, sel ast.SelectionSet, obj *Image) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Image")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Image_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "checksum":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Image_checksum(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "title":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Image_title(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "rating":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Image_rating(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "o_counter":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Image_o_counter(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "organized":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Image_organized(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "path":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Image_path(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "created_at":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Image_created_at(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "updated_at":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Image_updated_at(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "file_mod_time":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Image_file_mod_time(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "file":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Image_file(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "paths":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Image_paths(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "galleries":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Image_galleries(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "studio":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Image_studio(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "tags":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Image_tags(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "performers":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Image_performers(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imageFileTypeImplementors = []string{"ImageFileType"}

func (ec *executionContext) _ImageFileType(ctx context.Context, sel ast.SelectionSet, obj *ImageFileType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imageFileTypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ImageFileType")
		case "size":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ImageFileType_size(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "width":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ImageFileType_width(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "height":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ImageFileType_height(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imagePathsTypeImplementors = []string{"ImagePathsType"}

func (ec *executionContext) _ImagePathsType(ctx context.Context, sel ast.SelectionSet, obj *ImagePathsType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imagePathsTypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ImagePathsType")
		case "thumbnail":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ImagePathsType_thumbnail(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "image":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ImagePathsType_image(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var jobImplementors = []string{"Job"}

func (ec *executionContext) _Job(ctx context.Context, sel ast.SelectionSet, obj *Job) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Job")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Job_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Job_status(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subTasks":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Job_subTasks(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Job_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "progress":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Job_progress(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "startTime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Job_startTime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "endTime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Job_endTime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "addTime":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Job_addTime(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var jobStatusUpdateImplementors = []string{"JobStatusUpdate"}

func (ec *executionContext) _JobStatusUpdate(ctx context.Context, sel ast.SelectionSet, obj *JobStatusUpdate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobStatusUpdateImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobStatusUpdate")
		case "type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._JobStatusUpdate_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "job":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._JobStatusUpdate_job(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var logEntryImplementors = []string{"LogEntry"}

func (ec *executionContext) _LogEntry(ctx context.Context, sel ast.SelectionSet, obj *LogEntry) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, logEntryImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LogEntry")
		case "time":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._LogEntry_time(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "level":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._LogEntry_level(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._LogEntry_message(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var markerStringsResultTypeImplementors = []string{"MarkerStringsResultType"}

func (ec *executionContext) _MarkerStringsResultType(ctx context.Context, sel ast.SelectionSet, obj *MarkerStringsResultType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, markerStringsResultTypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MarkerStringsResultType")
		case "count":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MarkerStringsResultType_count(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MarkerStringsResultType_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._MarkerStringsResultType_title(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var movieImplementors = []string{"Movie"}

func (ec *executionContext) _Movie(ctx context.Context, sel ast.SelectionSet, obj *Movie) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, movieImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Movie")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Movie_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "checksum":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Movie_checksum(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Movie_name(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "aliases":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Movie_aliases(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "duration":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Movie_duration(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "date":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Movie_date(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "rating":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Movie_rating(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "studio":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Movie_studio(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "director":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Movie_director(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "synopsis":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Movie_synopsis(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "url":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Movie_url(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "created_at":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Movie_created_at(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "updated_at":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Movie_updated_at(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "front_image_path":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Movie_front_image_path(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "back_image_path":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Movie_back_image_path(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "scene_count":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Movie_scene_count(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "scenes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Movie_scenes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "setup":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_setup(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "migrate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_migrate(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sceneUpdate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_sceneUpdate(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "bulkSceneUpdate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bulkSceneUpdate(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "sceneDestroy":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_sceneDestroy(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "scenesDestroy":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_scenesDestroy(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "scenesUpdate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_scenesUpdate(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "sceneIncrementO":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_sceneIncrementO(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sceneDecrementO":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_sceneDecrementO(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sceneResetO":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_sceneResetO(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sceneGenerateScreenshot":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_sceneGenerateScreenshot(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sceneMarkerCreate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_sceneMarkerCreate(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "sceneMarkerUpdate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_sceneMarkerUpdate(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "sceneMarkerDestroy":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_sceneMarkerDestroy(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "imageUpdate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_imageUpdate(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "bulkImageUpdate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bulkImageUpdate(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "imageDestroy":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_imageDestroy(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "imagesDestroy":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_imagesDestroy(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "imagesUpdate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_imagesUpdate(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "imageIncrementO":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_imageIncrementO(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "imageDecrementO":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_imageDecrementO(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "imageResetO":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_imageResetO(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "galleryCreate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_galleryCreate(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "galleryUpdate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_galleryUpdate(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "bulkGalleryUpdate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bulkGalleryUpdate(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "galleryDestroy":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_galleryDestroy(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "galleriesUpdate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_galleriesUpdate(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "addGalleryImages":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addGalleryImages(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "removeGalleryImages":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_removeGalleryImages(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "performerCreate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_performerCreate(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "performerUpdate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_performerUpdate(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "performerDestroy":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_performerDestroy(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "performersDestroy":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_performersDestroy(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bulkPerformerUpdate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bulkPerformerUpdate(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "studioCreate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_studioCreate(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "studioUpdate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_studioUpdate(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "studioDestroy":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_studioDestroy(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "studiosDestroy":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_studiosDestroy(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "movieCreate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_movieCreate(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "movieUpdate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_movieUpdate(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "movieDestroy":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_movieDestroy(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "moviesDestroy":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_moviesDestroy(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bulkMovieUpdate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bulkMovieUpdate(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "tagCreate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_tagCreate(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "tagUpdate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_tagUpdate(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "tagDestroy":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_tagDestroy(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tagsDestroy":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_tagsDestroy(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tagsMerge":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_tagsMerge(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "saveFilter":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_saveFilter(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "destroySavedFilter":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_destroySavedFilter(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "setDefaultFilter":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_setDefaultFilter(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "configureGeneral":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_configureGeneral(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "configureInterface":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_configureInterface(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "configureDLNA":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_configureDLNA(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "configureScraping":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_configureScraping(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "configureDefaults":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_configureDefaults(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "configureUI":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_configureUI(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "configureUISetting":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_configureUISetting(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "generateAPIKey":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_generateAPIKey(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "exportObjects":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_exportObjects(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "importObjects":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_importObjects(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "metadataImport":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_metadataImport(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "metadataExport":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_metadataExport(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "metadataScan":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_metadataScan(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "metadataGenerate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_metadataGenerate(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "metadataAutoTag":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_metadataAutoTag(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "metadataClean":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_metadataClean(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "metadataIdentify":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_metadataIdentify(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "migrateHashNaming":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_migrateHashNaming(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reloadScrapers":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_reloadScrapers(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "runPluginTask":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_runPluginTask(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reloadPlugins":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_reloadPlugins(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "stopJob":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_stopJob(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "stopAllJobs":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_stopAllJobs(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "submitStashBoxFingerprints":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_submitStashBoxFingerprints(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "submitStashBoxSceneDraft":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_submitStashBoxSceneDraft(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "submitStashBoxPerformerDraft":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_submitStashBoxPerformerDraft(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "backupDatabase":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_backupDatabase(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "stashBoxBatchPerformerTag":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_stashBoxBatchPerformerTag(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enableDLNA":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_enableDLNA(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "disableDLNA":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_disableDLNA(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addTempDLNAIP":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addTempDLNAIP(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "removeTempDLNAIP":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_removeTempDLNAIP(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var performerImplementors = []string{"Performer"}

func (ec *executionContext) _Performer(ctx context.Context, sel ast.SelectionSet, obj *Performer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, performerImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Performer")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Performer_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "checksum":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Performer_checksum(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_name(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "url":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_url(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "gender":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_gender(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "twitter":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_twitter(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "instagram":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_instagram(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "birthdate":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_birthdate(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "ethnicity":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_ethnicity(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "country":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_country(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "eye_color":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_eye_color(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "height":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_height(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "measurements":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_measurements(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "fake_tits":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_fake_tits(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "career_length":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_career_length(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "tattoos":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_tattoos(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "piercings":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_piercings(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "aliases":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_aliases(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "favorite":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_favorite(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "tags":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_tags(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "ignore_auto_tag":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Performer_ignore_auto_tag(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "image_path":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_image_path(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "scene_count":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_scene_count(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "image_count":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_image_count(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "gallery_count":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_gallery_count(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "scenes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_scenes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "stash_ids":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_stash_ids(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "rating":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_rating(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "details":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_details(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "death_date":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_death_date(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "hair_color":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_hair_color(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "weight":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_weight(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "created_at":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_created_at(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "updated_at":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_updated_at(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "movie_count":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_movie_count(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "movies":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Performer_movies(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pluginImplementors = []string{"Plugin"}

func (ec *executionContext) _Plugin(ctx context.Context, sel ast.SelectionSet, obj *Plugin) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pluginImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Plugin")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Plugin_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Plugin_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Plugin_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Plugin_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "version":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Plugin_version(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "tasks":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Plugin_tasks(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "hooks":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Plugin_hooks(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pluginHookImplementors = []string{"PluginHook"}

func (ec *executionContext) _PluginHook(ctx context.Context, sel ast.SelectionSet, obj *PluginHook) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pluginHookImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PluginHook")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PluginHook_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PluginHook_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "hooks":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PluginHook_hooks(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "plugin":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PluginHook_plugin(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pluginResultImplementors = []string{"PluginResult"}

func (ec *executionContext) _PluginResult(ctx context.Context, sel ast.SelectionSet, obj *PluginResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pluginResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PluginResult")
		case "error":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PluginResult_error(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "result":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PluginResult_result(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pluginTaskImplementors = []string{"PluginTask"}

func (ec *executionContext) _PluginTask(ctx context.Context, sel ast.SelectionSet, obj *PluginTask) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pluginTaskImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PluginTask")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PluginTask_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PluginTask_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "plugin":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PluginTask_plugin(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "findSavedFilter":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findSavedFilter(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findSavedFilters":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findSavedFilters(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findDefaultFilter":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findDefaultFilter(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findScene":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findScene(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findSceneByHash":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findSceneByHash(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findScenes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findScenes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findScenesByPathRegex":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findScenesByPathRegex(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findDuplicateScenes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findDuplicateScenes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "sceneStreams":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_sceneStreams(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "parseSceneFilenames":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_parseSceneFilenames(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findSceneMarkers":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findSceneMarkers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findImage":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findImage(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findImages":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findImages(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findPerformer":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findPerformer(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findPerformers":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findPerformers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findStudio":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findStudio(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findStudios":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findStudios(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findMovie":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMovie(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findMovies":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMovies(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findGallery":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findGallery(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findGalleries":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findGalleries(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findTag":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findTag(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findTags":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findTags(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "markerWall":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_markerWall(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "sceneWall":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_sceneWall(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "markerStrings":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_markerStrings(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "stats":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_stats(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "sceneMarkerTags":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_sceneMarkerTags(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "logs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_logs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "listScrapers":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listScrapers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "listPerformerScrapers":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listPerformerScrapers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "listSceneScrapers":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listSceneScrapers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "listGalleryScrapers":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listGalleryScrapers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "listMovieScrapers":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listMovieScrapers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "scrapeSingleScene":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_scrapeSingleScene(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "scrapeMultiScenes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_scrapeMultiScenes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "scrapeSinglePerformer":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_scrapeSinglePerformer(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "scrapeMultiPerformers":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_scrapeMultiPerformers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "scrapeSingleGallery":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_scrapeSingleGallery(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "scrapeSingleMovie":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_scrapeSingleMovie(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "scrapeURL":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_scrapeURL(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "scrapePerformerURL":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_scrapePerformerURL(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "scrapeSceneURL":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_scrapeSceneURL(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "scrapeGalleryURL":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_scrapeGalleryURL(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "scrapeMovieURL":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_scrapeMovieURL(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "scrapePerformerList":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_scrapePerformerList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "scrapePerformer":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_scrapePerformer(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "scrapeScene":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_scrapeScene(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "scrapeGallery":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_scrapeGallery(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "scrapeFreeonesPerformerList":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_scrapeFreeonesPerformerList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "plugins":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_plugins(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "pluginTasks":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_pluginTasks(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "configuration":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_configuration(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "directory":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_directory(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "validateStashBoxCredentials":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_validateStashBoxCredentials(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "systemStatus":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_systemStatus(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "jobQueue":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_jobQueue(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findJob":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findJob(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "dlnaStatus":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dlnaStatus(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "allPerformers":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allPerformers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "allStudios":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allStudios(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "allMovies":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allMovies(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "allTags":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allTags(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "version":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_version(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "latestversion":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_latestversion(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "__schema":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var savedFilterImplementors = []string{"SavedFilter"}

func (ec *executionContext) _SavedFilter(ctx context.Context, sel ast.SelectionSet, obj *SavedFilter) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, savedFilterImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SavedFilter")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SavedFilter_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mode":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SavedFilter_mode(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SavedFilter_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "filter":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SavedFilter_filter(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var scanMetadataOptionsImplementors = []string{"ScanMetadataOptions"}

func (ec *executionContext) _ScanMetadataOptions(ctx context.Context, sel ast.SelectionSet, obj *ScanMetadataOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, scanMetadataOptionsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScanMetadataOptions")
		case "useFileMetadata":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScanMetadataOptions_useFileMetadata(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "stripFileExtension":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScanMetadataOptions_stripFileExtension(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "scanGeneratePreviews":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScanMetadataOptions_scanGeneratePreviews(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "scanGenerateImagePreviews":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScanMetadataOptions_scanGenerateImagePreviews(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "scanGenerateSprites":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScanMetadataOptions_scanGenerateSprites(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "scanGeneratePhashes":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScanMetadataOptions_scanGeneratePhashes(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "scanGenerateThumbnails":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScanMetadataOptions_scanGenerateThumbnails(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sceneImplementors = []string{"Scene"}

func (ec *executionContext) _Scene(ctx context.Context, sel ast.SelectionSet, obj *Scene) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sceneImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Scene")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Scene_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "checksum":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Scene_checksum(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "oshash":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Scene_oshash(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "title":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Scene_title(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "details":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Scene_details(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "url":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Scene_url(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "date":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Scene_date(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "rating":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Scene_rating(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "organized":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Scene_organized(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "o_counter":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Scene_o_counter(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "path":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Scene_path(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "phash":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Scene_phash(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "interactive":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Scene_interactive(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "interactive_speed":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Scene_interactive_speed(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "captions":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Scene_captions(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "created_at":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Scene_created_at(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "updated_at":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Scene_updated_at(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "file_mod_time":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Scene_file_mod_time(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "file":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Scene_file(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "paths":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Scene_paths(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "scene_markers":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Scene_scene_markers(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "galleries":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Scene_galleries(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "studio":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Scene_studio(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "movies":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Scene_movies(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "tags":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Scene_tags(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "performers":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Scene_performers(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "stash_ids":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Scene_stash_ids(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "sceneStreams":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Scene_sceneStreams(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sceneCaptionImplementors = []string{"SceneCaption"}

func (ec *executionContext) _SceneCaption(ctx context.Context, sel ast.SelectionSet, obj *SceneCaption) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sceneCaptionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SceneCaption")
		case "language_code":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneCaption_language_code(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "caption_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneCaption_caption_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sceneFileTypeImplementors = []string{"SceneFileType"}

func (ec *executionContext) _SceneFileType(ctx context.Context, sel ast.SelectionSet, obj *SceneFileType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sceneFileTypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SceneFileType")
		case "size":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneFileType_size(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "duration":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneFileType_duration(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "video_codec":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneFileType_video_codec(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "audio_codec":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneFileType_audio_codec(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "width":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneFileType_width(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "height":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneFileType_height(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "framerate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneFileType_framerate(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "bitrate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneFileType_bitrate(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sceneMarkerImplementors = []string{"SceneMarker"}

func (ec *executionContext) _SceneMarker(ctx context.Context, sel ast.SelectionSet, obj *SceneMarker) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sceneMarkerImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SceneMarker")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneMarker_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "scene":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SceneMarker_scene(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "title":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneMarker_title(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "seconds":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneMarker_seconds(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "primary_tag":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SceneMarker_primary_tag(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "tags":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SceneMarker_tags(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "created_at":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SceneMarker_created_at(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "updated_at":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SceneMarker_updated_at(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "stream":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SceneMarker_stream(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "preview":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SceneMarker_preview(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "screenshot":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SceneMarker_screenshot(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sceneMarkerTagImplementors = []string{"SceneMarkerTag"}

func (ec *executionContext) _SceneMarkerTag(ctx context.Context, sel ast.SelectionSet, obj *SceneMarkerTag) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sceneMarkerTagImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SceneMarkerTag")
		case "tag":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneMarkerTag_tag(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "scene_markers":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneMarkerTag_scene_markers(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sceneMovieImplementors = []string{"SceneMovie"}

func (ec *executionContext) _SceneMovie(ctx context.Context, sel ast.SelectionSet, obj *SceneMovie) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sceneMovieImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SceneMovie")
		case "movie":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneMovie_movie(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "scene_index":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneMovie_scene_index(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sceneMovieIDImplementors = []string{"SceneMovieID"}

func (ec *executionContext) _SceneMovieID(ctx context.Context, sel ast.SelectionSet, obj *SceneMovieID) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sceneMovieIDImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SceneMovieID")
		case "movie_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneMovieID_movie_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "scene_index":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneMovieID_scene_index(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sceneParserResultImplementors = []string{"SceneParserResult"}

func (ec *executionContext) _SceneParserResult(ctx context.Context, sel ast.SelectionSet, obj *SceneParserResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sceneParserResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SceneParserResult")
		case "scene":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneParserResult_scene(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneParserResult_title(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "details":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneParserResult_details(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneParserResult_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneParserResult_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "rating":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneParserResult_rating(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "studio_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneParserResult_studio_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "gallery_ids":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneParserResult_gallery_ids(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "performer_ids":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneParserResult_performer_ids(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "movies":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneParserResult_movies(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "tag_ids":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneParserResult_tag_ids(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sceneParserResultTypeImplementors = []string{"SceneParserResultType"}

func (ec *executionContext) _SceneParserResultType(ctx context.Context, sel ast.SelectionSet, obj *SceneParserResultType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sceneParserResultTypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SceneParserResultType")
		case "count":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneParserResultType_count(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "results":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneParserResultType_results(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var scenePathsTypeImplementors = []string{"ScenePathsType"}

func (ec *executionContext) _ScenePathsType(ctx context.Context, sel ast.SelectionSet, obj *ScenePathsType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, scenePathsTypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScenePathsType")
		case "screenshot":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScenePathsType_screenshot(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "preview":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScenePathsType_preview(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "stream":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScenePathsType_stream(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "webp":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScenePathsType_webp(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "vtt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScenePathsType_vtt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "chapters_vtt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScenePathsType_chapters_vtt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "sprite":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScenePathsType_sprite(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "funscript":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScenePathsType_funscript(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "interactive_heatmap":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScenePathsType_interactive_heatmap(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "caption":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScenePathsType_caption(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sceneStreamEndpointImplementors = []string{"SceneStreamEndpoint"}

func (ec *executionContext) _SceneStreamEndpoint(ctx context.Context, sel ast.SelectionSet, obj *SceneStreamEndpoint) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sceneStreamEndpointImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SceneStreamEndpoint")
		case "url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneStreamEndpoint_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mime_type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneStreamEndpoint_mime_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "label":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SceneStreamEndpoint_label(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var scrapedGalleryImplementors = []string{"ScrapedGallery", "ScrapedContent"}

func (ec *executionContext) _ScrapedGallery(ctx context.Context, sel ast.SelectionSet, obj *ScrapedGallery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, scrapedGalleryImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScrapedGallery")
		case "title":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedGallery_title(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "details":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedGallery_details(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedGallery_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedGallery_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "studio":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedGallery_studio(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "tags":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedGallery_tags(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "performers":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedGallery_performers(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var scrapedMovieImplementors = []string{"ScrapedMovie", "ScrapedContent"}

func (ec *executionContext) _ScrapedMovie(ctx context.Context, sel ast.SelectionSet, obj *ScrapedMovie) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, scrapedMovieImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScrapedMovie")
		case "stored_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedMovie_stored_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedMovie_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "aliases":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedMovie_aliases(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "duration":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedMovie_duration(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedMovie_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "rating":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedMovie_rating(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "director":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedMovie_director(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedMovie_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "synopsis":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedMovie_synopsis(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "studio":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedMovie_studio(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "front_image":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedMovie_front_image(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "back_image":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedMovie_back_image(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var scrapedPerformerImplementors = []string{"ScrapedPerformer", "ScrapedContent"}

func (ec *executionContext) _ScrapedPerformer(ctx context.Context, sel ast.SelectionSet, obj *ScrapedPerformer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, scrapedPerformerImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScrapedPerformer")
		case "stored_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedPerformer_stored_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedPerformer_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "gender":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedPerformer_gender(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedPerformer_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "twitter":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedPerformer_twitter(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "instagram":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedPerformer_instagram(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "birthdate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedPerformer_birthdate(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "ethnicity":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedPerformer_ethnicity(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "country":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedPerformer_country(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "eye_color":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedPerformer_eye_color(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "height":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedPerformer_height(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "measurements":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedPerformer_measurements(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "fake_tits":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedPerformer_fake_tits(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "career_length":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedPerformer_career_length(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "tattoos":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedPerformer_tattoos(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "piercings":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedPerformer_piercings(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "aliases":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedPerformer_aliases(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "tags":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedPerformer_tags(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "image":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedPerformer_image(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "images":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedPerformer_images(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "details":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedPerformer_details(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "death_date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedPerformer_death_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "hair_color":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedPerformer_hair_color(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "weight":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedPerformer_weight(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "remote_site_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedPerformer_remote_site_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var scrapedSceneImplementors = []string{"ScrapedScene", "ScrapedContent"}

func (ec *executionContext) _ScrapedScene(ctx context.Context, sel ast.SelectionSet, obj *ScrapedScene) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, scrapedSceneImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScrapedScene")
		case "title":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedScene_title(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "details":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedScene_details(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedScene_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "date":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedScene_date(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "image":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedScene_image(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "file":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedScene_file(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "studio":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedScene_studio(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "tags":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedScene_tags(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "performers":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedScene_performers(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "movies":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedScene_movies(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "remote_site_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedScene_remote_site_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "duration":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedScene_duration(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "fingerprints":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedScene_fingerprints(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var scrapedStudioImplementors = []string{"ScrapedStudio", "ScrapedContent"}

func (ec *executionContext) _ScrapedStudio(ctx context.Context, sel ast.SelectionSet, obj *ScrapedStudio) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, scrapedStudioImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScrapedStudio")
		case "stored_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedStudio_stored_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedStudio_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedStudio_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "image":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedStudio_image(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "remote_site_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedStudio_remote_site_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var scrapedTagImplementors = []string{"ScrapedTag", "ScrapedContent"}

func (ec *executionContext) _ScrapedTag(ctx context.Context, sel ast.SelectionSet, obj *ScrapedTag) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, scrapedTagImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScrapedTag")
		case "stored_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedTag_stored_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScrapedTag_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var scraperImplementors = []string{"Scraper"}

func (ec *executionContext) _Scraper(ctx context.Context, sel ast.SelectionSet, obj *Scraper) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, scraperImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Scraper")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Scraper_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Scraper_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "performer":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Scraper_performer(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "scene":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Scraper_scene(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "gallery":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Scraper_gallery(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "movie":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Scraper_movie(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var scraperSourceImplementors = []string{"ScraperSource"}

func (ec *executionContext) _ScraperSource(ctx context.Context, sel ast.SelectionSet, obj *ScraperSource) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, scraperSourceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScraperSource")
		case "stash_box_index":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScraperSource_stash_box_index(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "stash_box_endpoint":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScraperSource_stash_box_endpoint(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "scraper_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScraperSource_scraper_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var scraperSpecImplementors = []string{"ScraperSpec"}

func (ec *executionContext) _ScraperSpec(ctx context.Context, sel ast.SelectionSet, obj *ScraperSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, scraperSpecImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScraperSpec")
		case "urls":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScraperSpec_urls(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "supported_scrapes":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ScraperSpec_supported_scrapes(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var shortVersionImplementors = []string{"ShortVersion"}

func (ec *executionContext) _ShortVersion(ctx context.Context, sel ast.SelectionSet, obj *ShortVersion) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, shortVersionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ShortVersion")
		case "shorthash":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ShortVersion_shorthash(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ShortVersion_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var stashBoxImplementors = []string{"StashBox"}

func (ec *executionContext) _StashBox(ctx context.Context, sel ast.SelectionSet, obj *StashBox) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, stashBoxImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StashBox")
		case "endpoint":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._StashBox_endpoint(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "api_key":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._StashBox_api_key(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._StashBox_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var stashBoxFingerprintImplementors = []string{"StashBoxFingerprint"}

func (ec *executionContext) _StashBoxFingerprint(ctx context.Context, sel ast.SelectionSet, obj *StashBoxFingerprint) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, stashBoxFingerprintImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StashBoxFingerprint")
		case "algorithm":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._StashBoxFingerprint_algorithm(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hash":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._StashBoxFingerprint_hash(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "duration":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._StashBoxFingerprint_duration(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var stashBoxPerformerQueryResultImplementors = []string{"StashBoxPerformerQueryResult"}

func (ec *executionContext) _StashBoxPerformerQueryResult(ctx context.Context, sel ast.SelectionSet, obj *StashBoxPerformerQueryResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, stashBoxPerformerQueryResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StashBoxPerformerQueryResult")
		case "query":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._StashBoxPerformerQueryResult_query(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "results":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._StashBoxPerformerQueryResult_results(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var stashBoxValidationResultImplementors = []string{"StashBoxValidationResult"}

func (ec *executionContext) _StashBoxValidationResult(ctx context.Context, sel ast.SelectionSet, obj *StashBoxValidationResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, stashBoxValidationResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StashBoxValidationResult")
		case "valid":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._StashBoxValidationResult_valid(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._StashBoxValidationResult_status(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var stashConfigImplementors = []string{"StashConfig"}

func (ec *executionContext) _StashConfig(ctx context.Context, sel ast.SelectionSet, obj *StashConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, stashConfigImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StashConfig")
		case "path":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._StashConfig_path(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "excludeVideo":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._StashConfig_excludeVideo(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "excludeImage":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._StashConfig_excludeImage(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var stashIDImplementors = []string{"StashID"}

func (ec *executionContext) _StashID(ctx context.Context, sel ast.SelectionSet, obj *StashID) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, stashIDImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StashID")
		case "endpoint":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._StashID_endpoint(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "stash_id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._StashID_stash_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var statsResultTypeImplementors = []string{"StatsResultType"}

func (ec *executionContext) _StatsResultType(ctx context.Context, sel ast.SelectionSet, obj *StatsResultType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, statsResultTypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StatsResultType")
		case "scene_count":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._StatsResultType_scene_count(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "scenes_size":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._StatsResultType_scenes_size(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "scenes_duration":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._StatsResultType_scenes_duration(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "image_count":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._StatsResultType_image_count(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "images_size":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._StatsResultType_images_size(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "gallery_count":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._StatsResultType_gallery_count(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "performer_count":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._StatsResultType_performer_count(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "studio_count":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._StatsResultType_studio_count(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "movie_count":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._StatsResultType_movie_count(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tag_count":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._StatsResultType_tag_count(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var studioImplementors = []string{"Studio"}

func (ec *executionContext) _Studio(ctx context.Context, sel ast.SelectionSet, obj *Studio) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, studioImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Studio")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Studio_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "checksum":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Studio_checksum(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Studio_name(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "url":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Studio_url(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "parent_studio":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Studio_parent_studio(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "child_studios":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Studio_child_studios(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "aliases":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Studio_aliases(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "ignore_auto_tag":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Studio_ignore_auto_tag(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "image_path":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Studio_image_path(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "scene_count":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Studio_scene_count(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "image_count":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Studio_image_count(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "gallery_count":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Studio_gallery_count(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "stash_ids":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Studio_stash_ids(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "rating":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Studio_rating(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "details":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Studio_details(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "created_at":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Studio_created_at(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "updated_at":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Studio_updated_at(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "movie_count":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Studio_movie_count(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "movies":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Studio_movies(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscriptionImplementors = []string{"Subscription"}

func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func() graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "jobsSubscribe":
		return ec._Subscription_jobsSubscribe(ctx, fields[0])
	case "loggingSubscribe":
		return ec._Subscription_loggingSubscribe(ctx, fields[0])
	case "scanCompleteSubscribe":
		return ec._Subscription_scanCompleteSubscribe(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

var systemStatusImplementors = []string{"SystemStatus"}

func (ec *executionContext) _SystemStatus(ctx context.Context, sel ast.SelectionSet, obj *SystemStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemStatusImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemStatus")
		case "databaseSchema":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SystemStatus_databaseSchema(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "databasePath":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SystemStatus_databasePath(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "configPath":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SystemStatus_configPath(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "appSchema":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SystemStatus_appSchema(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._SystemStatus_status(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tagImplementors = []string{"Tag"}

func (ec *executionContext) _Tag(ctx context.Context, sel ast.SelectionSet, obj *Tag) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tagImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Tag")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Tag_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Tag_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "aliases":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tag_aliases(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "ignore_auto_tag":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Tag_ignore_auto_tag(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "created_at":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tag_created_at(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "updated_at":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tag_updated_at(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "image_path":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tag_image_path(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "scene_count":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tag_scene_count(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "scene_marker_count":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tag_scene_marker_count(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "image_count":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tag_image_count(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "gallery_count":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tag_gallery_count(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "performer_count":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tag_performer_count(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "parents":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tag_parents(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "children":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tag_children(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var versionImplementors = []string{"Version"}

func (ec *executionContext) _Version(ctx context.Context, sel ast.SelectionSet, obj *Version) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, versionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Version")
		case "version":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Version_version(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "hash":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Version_hash(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "build_time":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Version_build_time(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Directive_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Directive_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "locations":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Directive_locations(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Directive_args(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Directive_isRepeatable(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___EnumValue_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___EnumValue_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "isDeprecated":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___EnumValue_isDeprecated(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___EnumValue_deprecationReason(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "args":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_args(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_isDeprecated(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_deprecationReason(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___InputValue_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___InputValue_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___InputValue_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___InputValue_defaultValue(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "types":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_types(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_queryType(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_mutationType(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "subscriptionType":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_subscriptionType(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "directives":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_directives(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_kind(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "fields":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_fields(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "interfaces":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_interfaces(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "possibleTypes":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_possibleTypes(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "enumValues":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_enumValues(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "inputFields":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_inputFields(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "ofType":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_ofType(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "specifiedByURL":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_specifiedByURL(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNAddTempDLNAIPInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐAddTempDLNAIPInput(ctx context.Context, v interface{}) (AddTempDLNAIPInput, error) {
	res, err := ec.unmarshalInputAddTempDLNAIPInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAutoTagMetadataInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐAutoTagMetadataInput(ctx context.Context, v interface{}) (AutoTagMetadataInput, error) {
	res, err := ec.unmarshalInputAutoTagMetadataInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBackupDatabaseInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐBackupDatabaseInput(ctx context.Context, v interface{}) (BackupDatabaseInput, error) {
	res, err := ec.unmarshalInputBackupDatabaseInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNBulkGalleryUpdateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐBulkGalleryUpdateInput(ctx context.Context, v interface{}) (BulkGalleryUpdateInput, error) {
	res, err := ec.unmarshalInputBulkGalleryUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBulkImageUpdateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐBulkImageUpdateInput(ctx context.Context, v interface{}) (BulkImageUpdateInput, error) {
	res, err := ec.unmarshalInputBulkImageUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBulkMovieUpdateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐBulkMovieUpdateInput(ctx context.Context, v interface{}) (BulkMovieUpdateInput, error) {
	res, err := ec.unmarshalInputBulkMovieUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBulkPerformerUpdateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐBulkPerformerUpdateInput(ctx context.Context, v interface{}) (BulkPerformerUpdateInput, error) {
	res, err := ec.unmarshalInputBulkPerformerUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBulkSceneUpdateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐBulkSceneUpdateInput(ctx context.Context, v interface{}) (BulkSceneUpdateInput, error) {
	res, err := ec.unmarshalInputBulkSceneUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBulkUpdateIdMode2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐBulkUpdateIDMode(ctx context.Context, v interface{}) (BulkUpdateIDMode, error) {
	var res BulkUpdateIDMode
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBulkUpdateIdMode2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐBulkUpdateIDMode(ctx context.Context, sel ast.SelectionSet, v BulkUpdateIDMode) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCleanMetadataInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐCleanMetadataInput(ctx context.Context, v interface{}) (CleanMetadataInput, error) {
	res, err := ec.unmarshalInputCleanMetadataInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConfigDLNAInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigDLNAInput(ctx context.Context, v interface{}) (ConfigDLNAInput, error) {
	res, err := ec.unmarshalInputConfigDLNAInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigDLNAResult2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigDLNAResult(ctx context.Context, sel ast.SelectionSet, v ConfigDLNAResult) graphql.Marshaler {
	return ec._ConfigDLNAResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNConfigDLNAResult2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigDLNAResult(ctx context.Context, sel ast.SelectionSet, v *ConfigDLNAResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ConfigDLNAResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigDefaultSettingsInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigDefaultSettingsInput(ctx context.Context, v interface{}) (ConfigDefaultSettingsInput, error) {
	res, err := ec.unmarshalInputConfigDefaultSettingsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigDefaultSettingsResult2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigDefaultSettingsResult(ctx context.Context, sel ast.SelectionSet, v ConfigDefaultSettingsResult) graphql.Marshaler {
	return ec._ConfigDefaultSettingsResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNConfigDefaultSettingsResult2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigDefaultSettingsResult(ctx context.Context, sel ast.SelectionSet, v *ConfigDefaultSettingsResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ConfigDefaultSettingsResult(ctx, sel, v)
}

func (ec *executionContext) marshalNConfigDisableDropdownCreate2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigDisableDropdownCreate(ctx context.Context, sel ast.SelectionSet, v *ConfigDisableDropdownCreate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ConfigDisableDropdownCreate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigGeneralInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigGeneralInput(ctx context.Context, v interface{}) (ConfigGeneralInput, error) {
	res, err := ec.unmarshalInputConfigGeneralInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigGeneralResult2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigGeneralResult(ctx context.Context, sel ast.SelectionSet, v ConfigGeneralResult) graphql.Marshaler {
	return ec._ConfigGeneralResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNConfigGeneralResult2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigGeneralResult(ctx context.Context, sel ast.SelectionSet, v *ConfigGeneralResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ConfigGeneralResult(ctx, sel, v)
}

func (ec *executionContext) marshalNConfigImageLightboxResult2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigImageLightboxResult(ctx context.Context, sel ast.SelectionSet, v *ConfigImageLightboxResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ConfigImageLightboxResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigInterfaceInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigInterfaceInput(ctx context.Context, v interface{}) (ConfigInterfaceInput, error) {
	res, err := ec.unmarshalInputConfigInterfaceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigInterfaceResult2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigInterfaceResult(ctx context.Context, sel ast.SelectionSet, v ConfigInterfaceResult) graphql.Marshaler {
	return ec._ConfigInterfaceResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNConfigInterfaceResult2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigInterfaceResult(ctx context.Context, sel ast.SelectionSet, v *ConfigInterfaceResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ConfigInterfaceResult(ctx, sel, v)
}

func (ec *executionContext) marshalNConfigResult2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigResult(ctx context.Context, sel ast.SelectionSet, v ConfigResult) graphql.Marshaler {
	return ec._ConfigResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNConfigResult2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigResult(ctx context.Context, sel ast.SelectionSet, v *ConfigResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ConfigResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConfigScrapingInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigScrapingInput(ctx context.Context, v interface{}) (ConfigScrapingInput, error) {
	res, err := ec.unmarshalInputConfigScrapingInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConfigScrapingResult2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigScrapingResult(ctx context.Context, sel ast.SelectionSet, v ConfigScrapingResult) graphql.Marshaler {
	return ec._ConfigScrapingResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNConfigScrapingResult2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigScrapingResult(ctx context.Context, sel ast.SelectionSet, v *ConfigScrapingResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ConfigScrapingResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCriterionModifier2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐCriterionModifier(ctx context.Context, v interface{}) (CriterionModifier, error) {
	var res CriterionModifier
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCriterionModifier2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐCriterionModifier(ctx context.Context, sel ast.SelectionSet, v CriterionModifier) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNDLNAIP2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐDlnaipᚄ(ctx context.Context, sel ast.SelectionSet, v []*Dlnaip) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDLNAIP2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐDlnaip(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDLNAIP2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐDlnaip(ctx context.Context, sel ast.SelectionSet, v *Dlnaip) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DLNAIP(ctx, sel, v)
}

func (ec *executionContext) marshalNDLNAStatus2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐDLNAStatus(ctx context.Context, sel ast.SelectionSet, v DLNAStatus) graphql.Marshaler {
	return ec._DLNAStatus(ctx, sel, &v)
}

func (ec *executionContext) marshalNDLNAStatus2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐDLNAStatus(ctx context.Context, sel ast.SelectionSet, v *DLNAStatus) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DLNAStatus(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDestroyFilterInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐDestroyFilterInput(ctx context.Context, v interface{}) (DestroyFilterInput, error) {
	res, err := ec.unmarshalInputDestroyFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDirectory2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐDirectory(ctx context.Context, sel ast.SelectionSet, v Directory) graphql.Marshaler {
	return ec._Directory(ctx, sel, &v)
}

func (ec *executionContext) marshalNDirectory2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐDirectory(ctx context.Context, sel ast.SelectionSet, v *Directory) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Directory(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDisableDLNAInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐDisableDLNAInput(ctx context.Context, v interface{}) (DisableDLNAInput, error) {
	res, err := ec.unmarshalInputDisableDLNAInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnableDLNAInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐEnableDLNAInput(ctx context.Context, v interface{}) (EnableDLNAInput, error) {
	res, err := ec.unmarshalInputEnableDLNAInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNExportObjectsInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐExportObjectsInput(ctx context.Context, v interface{}) (ExportObjectsInput, error) {
	res, err := ec.unmarshalInputExportObjectsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFilterMode2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFilterMode(ctx context.Context, v interface{}) (FilterMode, error) {
	var res FilterMode
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFilterMode2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFilterMode(ctx context.Context, sel ast.SelectionSet, v FilterMode) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNFindGalleriesResultType2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindGalleriesResultType(ctx context.Context, sel ast.SelectionSet, v FindGalleriesResultType) graphql.Marshaler {
	return ec._FindGalleriesResultType(ctx, sel, &v)
}

func (ec *executionContext) marshalNFindGalleriesResultType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindGalleriesResultType(ctx context.Context, sel ast.SelectionSet, v *FindGalleriesResultType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FindGalleriesResultType(ctx, sel, v)
}

func (ec *executionContext) marshalNFindImagesResultType2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindImagesResultType(ctx context.Context, sel ast.SelectionSet, v FindImagesResultType) graphql.Marshaler {
	return ec._FindImagesResultType(ctx, sel, &v)
}

func (ec *executionContext) marshalNFindImagesResultType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindImagesResultType(ctx context.Context, sel ast.SelectionSet, v *FindImagesResultType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FindImagesResultType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFindJobInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindJobInput(ctx context.Context, v interface{}) (FindJobInput, error) {
	res, err := ec.unmarshalInputFindJobInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFindMoviesResultType2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindMoviesResultType(ctx context.Context, sel ast.SelectionSet, v FindMoviesResultType) graphql.Marshaler {
	return ec._FindMoviesResultType(ctx, sel, &v)
}

func (ec *executionContext) marshalNFindMoviesResultType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindMoviesResultType(ctx context.Context, sel ast.SelectionSet, v *FindMoviesResultType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FindMoviesResultType(ctx, sel, v)
}

func (ec *executionContext) marshalNFindPerformersResultType2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindPerformersResultType(ctx context.Context, sel ast.SelectionSet, v FindPerformersResultType) graphql.Marshaler {
	return ec._FindPerformersResultType(ctx, sel, &v)
}

func (ec *executionContext) marshalNFindPerformersResultType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindPerformersResultType(ctx context.Context, sel ast.SelectionSet, v *FindPerformersResultType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FindPerformersResultType(ctx, sel, v)
}

func (ec *executionContext) marshalNFindSceneMarkersResultType2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindSceneMarkersResultType(ctx context.Context, sel ast.SelectionSet, v FindSceneMarkersResultType) graphql.Marshaler {
	return ec._FindSceneMarkersResultType(ctx, sel, &v)
}

func (ec *executionContext) marshalNFindSceneMarkersResultType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindSceneMarkersResultType(ctx context.Context, sel ast.SelectionSet, v *FindSceneMarkersResultType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FindSceneMarkersResultType(ctx, sel, v)
}

func (ec *executionContext) marshalNFindScenesResultType2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindScenesResultType(ctx context.Context, sel ast.SelectionSet, v FindScenesResultType) graphql.Marshaler {
	return ec._FindScenesResultType(ctx, sel, &v)
}

func (ec *executionContext) marshalNFindScenesResultType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindScenesResultType(ctx context.Context, sel ast.SelectionSet, v *FindScenesResultType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FindScenesResultType(ctx, sel, v)
}

func (ec *executionContext) marshalNFindStudiosResultType2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindStudiosResultType(ctx context.Context, sel ast.SelectionSet, v FindStudiosResultType) graphql.Marshaler {
	return ec._FindStudiosResultType(ctx, sel, &v)
}

func (ec *executionContext) marshalNFindStudiosResultType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindStudiosResultType(ctx context.Context, sel ast.SelectionSet, v *FindStudiosResultType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FindStudiosResultType(ctx, sel, v)
}

func (ec *executionContext) marshalNFindTagsResultType2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindTagsResultType(ctx context.Context, sel ast.SelectionSet, v FindTagsResultType) graphql.Marshaler {
	return ec._FindTagsResultType(ctx, sel, &v)
}

func (ec *executionContext) marshalNFindTagsResultType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindTagsResultType(ctx context.Context, sel ast.SelectionSet, v *FindTagsResultType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FindTagsResultType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloatContext(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) marshalNGallery2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGalleryᚄ(ctx context.Context, sel ast.SelectionSet, v []*Gallery) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGallery2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGallery(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGallery2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGallery(ctx context.Context, sel ast.SelectionSet, v *Gallery) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Gallery(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGalleryAddInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGalleryAddInput(ctx context.Context, v interface{}) (GalleryAddInput, error) {
	res, err := ec.unmarshalInputGalleryAddInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGalleryCreateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGalleryCreateInput(ctx context.Context, v interface{}) (GalleryCreateInput, error) {
	res, err := ec.unmarshalInputGalleryCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGalleryDestroyInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGalleryDestroyInput(ctx context.Context, v interface{}) (GalleryDestroyInput, error) {
	res, err := ec.unmarshalInputGalleryDestroyInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGalleryRemoveInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGalleryRemoveInput(ctx context.Context, v interface{}) (GalleryRemoveInput, error) {
	res, err := ec.unmarshalInputGalleryRemoveInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGalleryUpdateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGalleryUpdateInput(ctx context.Context, v interface{}) (GalleryUpdateInput, error) {
	res, err := ec.unmarshalInputGalleryUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGalleryUpdateInput2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGalleryUpdateInputᚄ(ctx context.Context, v interface{}) ([]*GalleryUpdateInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*GalleryUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNGalleryUpdateInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGalleryUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNGalleryUpdateInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGalleryUpdateInput(ctx context.Context, v interface{}) (*GalleryUpdateInput, error) {
	res, err := ec.unmarshalInputGalleryUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGenerateAPIKeyInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGenerateAPIKeyInput(ctx context.Context, v interface{}) (GenerateAPIKeyInput, error) {
	res, err := ec.unmarshalInputGenerateAPIKeyInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGenerateMetadataInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGenerateMetadataInput(ctx context.Context, v interface{}) (GenerateMetadataInput, error) {
	res, err := ec.unmarshalInputGenerateMetadataInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNHashAlgorithm2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐHashAlgorithm(ctx context.Context, v interface{}) (HashAlgorithm, error) {
	var res HashAlgorithm
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHashAlgorithm2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐHashAlgorithm(ctx context.Context, sel ast.SelectionSet, v HashAlgorithm) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNID2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalIntID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalIntID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNIdentifyFieldOptions2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifyFieldOptions(ctx context.Context, sel ast.SelectionSet, v *IdentifyFieldOptions) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IdentifyFieldOptions(ctx, sel, v)
}

func (ec *executionContext) unmarshalNIdentifyFieldOptionsInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifyFieldOptionsInput(ctx context.Context, v interface{}) (*IdentifyFieldOptionsInput, error) {
	res, err := ec.unmarshalInputIdentifyFieldOptionsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNIdentifyFieldStrategy2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifyFieldStrategy(ctx context.Context, v interface{}) (IdentifyFieldStrategy, error) {
	var res IdentifyFieldStrategy
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNIdentifyFieldStrategy2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifyFieldStrategy(ctx context.Context, sel ast.SelectionSet, v IdentifyFieldStrategy) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNIdentifyMetadataInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifyMetadataInput(ctx context.Context, v interface{}) (IdentifyMetadataInput, error) {
	res, err := ec.unmarshalInputIdentifyMetadataInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNIdentifySource2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifySourceᚄ(ctx context.Context, sel ast.SelectionSet, v []*IdentifySource) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIdentifySource2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifySource(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNIdentifySource2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifySource(ctx context.Context, sel ast.SelectionSet, v *IdentifySource) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IdentifySource(ctx, sel, v)
}

func (ec *executionContext) unmarshalNIdentifySourceInput2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifySourceInputᚄ(ctx context.Context, v interface{}) ([]*IdentifySourceInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*IdentifySourceInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNIdentifySourceInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifySourceInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNIdentifySourceInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifySourceInput(ctx context.Context, v interface{}) (*IdentifySourceInput, error) {
	res, err := ec.unmarshalInputIdentifySourceInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNImage2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImageᚄ(ctx context.Context, sel ast.SelectionSet, v []*Image) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNImage2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNImage2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImage(ctx context.Context, sel ast.SelectionSet, v *Image) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Image(ctx, sel, v)
}

func (ec *executionContext) unmarshalNImageDestroyInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImageDestroyInput(ctx context.Context, v interface{}) (ImageDestroyInput, error) {
	res, err := ec.unmarshalInputImageDestroyInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNImageFileType2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImageFileType(ctx context.Context, sel ast.SelectionSet, v ImageFileType) graphql.Marshaler {
	return ec._ImageFileType(ctx, sel, &v)
}

func (ec *executionContext) marshalNImageFileType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImageFileType(ctx context.Context, sel ast.SelectionSet, v *ImageFileType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ImageFileType(ctx, sel, v)
}

func (ec *executionContext) marshalNImagePathsType2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImagePathsType(ctx context.Context, sel ast.SelectionSet, v ImagePathsType) graphql.Marshaler {
	return ec._ImagePathsType(ctx, sel, &v)
}

func (ec *executionContext) marshalNImagePathsType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImagePathsType(ctx context.Context, sel ast.SelectionSet, v *ImagePathsType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ImagePathsType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNImageUpdateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImageUpdateInput(ctx context.Context, v interface{}) (ImageUpdateInput, error) {
	res, err := ec.unmarshalInputImageUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNImageUpdateInput2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImageUpdateInputᚄ(ctx context.Context, v interface{}) ([]*ImageUpdateInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ImageUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNImageUpdateInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImageUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNImageUpdateInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImageUpdateInput(ctx context.Context, v interface{}) (*ImageUpdateInput, error) {
	res, err := ec.unmarshalInputImageUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNImagesDestroyInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImagesDestroyInput(ctx context.Context, v interface{}) (ImagesDestroyInput, error) {
	res, err := ec.unmarshalInputImagesDestroyInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNImportDuplicateEnum2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImportDuplicateEnum(ctx context.Context, v interface{}) (ImportDuplicateEnum, error) {
	var res ImportDuplicateEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNImportDuplicateEnum2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImportDuplicateEnum(ctx context.Context, sel ast.SelectionSet, v ImportDuplicateEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNImportMissingRefEnum2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImportMissingRefEnum(ctx context.Context, v interface{}) (ImportMissingRefEnum, error) {
	var res ImportMissingRefEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNImportMissingRefEnum2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImportMissingRefEnum(ctx context.Context, sel ast.SelectionSet, v ImportMissingRefEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNImportObjectsInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImportObjectsInput(ctx context.Context, v interface{}) (ImportObjectsInput, error) {
	res, err := ec.unmarshalInputImportObjectsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNJob2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐJob(ctx context.Context, sel ast.SelectionSet, v *Job) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Job(ctx, sel, v)
}

func (ec *executionContext) unmarshalNJobStatus2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐJobStatus(ctx context.Context, v interface{}) (JobStatus, error) {
	var res JobStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJobStatus2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐJobStatus(ctx context.Context, sel ast.SelectionSet, v JobStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNJobStatusUpdate2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐJobStatusUpdate(ctx context.Context, sel ast.SelectionSet, v JobStatusUpdate) graphql.Marshaler {
	return ec._JobStatusUpdate(ctx, sel, &v)
}

func (ec *executionContext) marshalNJobStatusUpdate2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐJobStatusUpdate(ctx context.Context, sel ast.SelectionSet, v *JobStatusUpdate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._JobStatusUpdate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNJobStatusUpdateType2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐJobStatusUpdateType(ctx context.Context, v interface{}) (JobStatusUpdateType, error) {
	var res JobStatusUpdateType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJobStatusUpdateType2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐJobStatusUpdateType(ctx context.Context, sel ast.SelectionSet, v JobStatusUpdateType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNLogEntry2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐLogEntryᚄ(ctx context.Context, sel ast.SelectionSet, v []*LogEntry) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLogEntry2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐLogEntry(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNLogEntry2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐLogEntry(ctx context.Context, sel ast.SelectionSet, v *LogEntry) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LogEntry(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLogLevel2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐLogLevel(ctx context.Context, v interface{}) (LogLevel, error) {
	var res LogLevel
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLogLevel2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐLogLevel(ctx context.Context, sel ast.SelectionSet, v LogLevel) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNMap2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMap2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalMap(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNMarkerStringsResultType2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMarkerStringsResultType(ctx context.Context, sel ast.SelectionSet, v []*MarkerStringsResultType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMarkerStringsResultType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMarkerStringsResultType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalNMigrateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMigrateInput(ctx context.Context, v interface{}) (MigrateInput, error) {
	res, err := ec.unmarshalInputMigrateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMovie2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMovieᚄ(ctx context.Context, sel ast.SelectionSet, v []*Movie) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMovie2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMovie(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMovie2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMovie(ctx context.Context, sel ast.SelectionSet, v *Movie) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Movie(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMovieCreateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMovieCreateInput(ctx context.Context, v interface{}) (MovieCreateInput, error) {
	res, err := ec.unmarshalInputMovieCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMovieDestroyInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMovieDestroyInput(ctx context.Context, v interface{}) (MovieDestroyInput, error) {
	res, err := ec.unmarshalInputMovieDestroyInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMovieUpdateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMovieUpdateInput(ctx context.Context, v interface{}) (MovieUpdateInput, error) {
	res, err := ec.unmarshalInputMovieUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPerformer2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPerformerᚄ(ctx context.Context, sel ast.SelectionSet, v []*Performer) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPerformer2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPerformer(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPerformer2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPerformer(ctx context.Context, sel ast.SelectionSet, v *Performer) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Performer(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPerformerCreateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPerformerCreateInput(ctx context.Context, v interface{}) (PerformerCreateInput, error) {
	res, err := ec.unmarshalInputPerformerCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPerformerDestroyInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPerformerDestroyInput(ctx context.Context, v interface{}) (PerformerDestroyInput, error) {
	res, err := ec.unmarshalInputPerformerDestroyInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPerformerUpdateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPerformerUpdateInput(ctx context.Context, v interface{}) (PerformerUpdateInput, error) {
	res, err := ec.unmarshalInputPerformerUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPlugin2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPlugin(ctx context.Context, sel ast.SelectionSet, v *Plugin) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Plugin(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPluginArgInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPluginArgInput(ctx context.Context, v interface{}) (*PluginArgInput, error) {
	res, err := ec.unmarshalInputPluginArgInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPluginHook2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPluginHook(ctx context.Context, sel ast.SelectionSet, v *PluginHook) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PluginHook(ctx, sel, v)
}

func (ec *executionContext) marshalNPluginTask2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPluginTask(ctx context.Context, sel ast.SelectionSet, v *PluginTask) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PluginTask(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPluginValueInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPluginValueInput(ctx context.Context, v interface{}) (*PluginValueInput, error) {
	res, err := ec.unmarshalInputPluginValueInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPreviewPreset2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPreviewPreset(ctx context.Context, v interface{}) (PreviewPreset, error) {
	var res PreviewPreset
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPreviewPreset2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPreviewPreset(ctx context.Context, sel ast.SelectionSet, v PreviewPreset) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNRemoveTempDLNAIPInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐRemoveTempDLNAIPInput(ctx context.Context, v interface{}) (RemoveTempDLNAIPInput, error) {
	res, err := ec.unmarshalInputRemoveTempDLNAIPInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNResolutionEnum2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐResolutionEnum(ctx context.Context, v interface{}) (ResolutionEnum, error) {
	var res ResolutionEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNResolutionEnum2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐResolutionEnum(ctx context.Context, sel ast.SelectionSet, v ResolutionEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNSaveFilterInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSaveFilterInput(ctx context.Context, v interface{}) (SaveFilterInput, error) {
	res, err := ec.unmarshalInputSaveFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSavedFilter2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSavedFilter(ctx context.Context, sel ast.SelectionSet, v SavedFilter) graphql.Marshaler {
	return ec._SavedFilter(ctx, sel, &v)
}

func (ec *executionContext) marshalNSavedFilter2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSavedFilterᚄ(ctx context.Context, sel ast.SelectionSet, v []*SavedFilter) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSavedFilter2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSavedFilter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSavedFilter2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSavedFilter(ctx context.Context, sel ast.SelectionSet, v *SavedFilter) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SavedFilter(ctx, sel, v)
}

func (ec *executionContext) unmarshalNScanMetadataInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScanMetadataInput(ctx context.Context, v interface{}) (ScanMetadataInput, error) {
	res, err := ec.unmarshalInputScanMetadataInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNScene2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScene(ctx context.Context, sel ast.SelectionSet, v Scene) graphql.Marshaler {
	return ec._Scene(ctx, sel, &v)
}

func (ec *executionContext) marshalNScene2ᚕᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneᚄ(ctx context.Context, sel ast.SelectionSet, v [][]*Scene) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNScene2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneᚄ(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNScene2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneᚄ(ctx context.Context, sel ast.SelectionSet, v []*Scene) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNScene2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScene(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNScene2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScene(ctx context.Context, sel ast.SelectionSet, v *Scene) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Scene(ctx, sel, v)
}

func (ec *executionContext) marshalNSceneCaption2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneCaption(ctx context.Context, sel ast.SelectionSet, v *SceneCaption) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SceneCaption(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSceneDestroyInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneDestroyInput(ctx context.Context, v interface{}) (SceneDestroyInput, error) {
	res, err := ec.unmarshalInputSceneDestroyInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSceneFileType2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneFileType(ctx context.Context, sel ast.SelectionSet, v SceneFileType) graphql.Marshaler {
	return ec._SceneFileType(ctx, sel, &v)
}

func (ec *executionContext) marshalNSceneFileType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneFileType(ctx context.Context, sel ast.SelectionSet, v *SceneFileType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SceneFileType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSceneHashInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneHashInput(ctx context.Context, v interface{}) (SceneHashInput, error) {
	res, err := ec.unmarshalInputSceneHashInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSceneMarker2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMarkerᚄ(ctx context.Context, sel ast.SelectionSet, v []*SceneMarker) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSceneMarker2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMarker(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSceneMarker2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMarker(ctx context.Context, sel ast.SelectionSet, v *SceneMarker) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SceneMarker(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSceneMarkerCreateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMarkerCreateInput(ctx context.Context, v interface{}) (SceneMarkerCreateInput, error) {
	res, err := ec.unmarshalInputSceneMarkerCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSceneMarkerTag2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMarkerTagᚄ(ctx context.Context, sel ast.SelectionSet, v []*SceneMarkerTag) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSceneMarkerTag2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMarkerTag(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSceneMarkerTag2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMarkerTag(ctx context.Context, sel ast.SelectionSet, v *SceneMarkerTag) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SceneMarkerTag(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSceneMarkerUpdateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMarkerUpdateInput(ctx context.Context, v interface{}) (SceneMarkerUpdateInput, error) {
	res, err := ec.unmarshalInputSceneMarkerUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSceneMovie2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMovieᚄ(ctx context.Context, sel ast.SelectionSet, v []*SceneMovie) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSceneMovie2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMovie(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSceneMovie2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMovie(ctx context.Context, sel ast.SelectionSet, v *SceneMovie) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SceneMovie(ctx, sel, v)
}

func (ec *executionContext) marshalNSceneMovieID2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMovieID(ctx context.Context, sel ast.SelectionSet, v *SceneMovieID) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SceneMovieID(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSceneMovieInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMovieInput(ctx context.Context, v interface{}) (*SceneMovieInput, error) {
	res, err := ec.unmarshalInputSceneMovieInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSceneParserInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneParserInput(ctx context.Context, v interface{}) (SceneParserInput, error) {
	res, err := ec.unmarshalInputSceneParserInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSceneParserResult2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneParserResultᚄ(ctx context.Context, sel ast.SelectionSet, v []*SceneParserResult) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSceneParserResult2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneParserResult(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSceneParserResult2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneParserResult(ctx context.Context, sel ast.SelectionSet, v *SceneParserResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SceneParserResult(ctx, sel, v)
}

func (ec *executionContext) marshalNSceneParserResultType2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneParserResultType(ctx context.Context, sel ast.SelectionSet, v SceneParserResultType) graphql.Marshaler {
	return ec._SceneParserResultType(ctx, sel, &v)
}

func (ec *executionContext) marshalNSceneParserResultType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneParserResultType(ctx context.Context, sel ast.SelectionSet, v *SceneParserResultType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SceneParserResultType(ctx, sel, v)
}

func (ec *executionContext) marshalNScenePathsType2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScenePathsType(ctx context.Context, sel ast.SelectionSet, v ScenePathsType) graphql.Marshaler {
	return ec._ScenePathsType(ctx, sel, &v)
}

func (ec *executionContext) marshalNScenePathsType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScenePathsType(ctx context.Context, sel ast.SelectionSet, v *ScenePathsType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ScenePathsType(ctx, sel, v)
}

func (ec *executionContext) marshalNSceneStreamEndpoint2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneStreamEndpointᚄ(ctx context.Context, sel ast.SelectionSet, v []*SceneStreamEndpoint) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSceneStreamEndpoint2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneStreamEndpoint(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSceneStreamEndpoint2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneStreamEndpoint(ctx context.Context, sel ast.SelectionSet, v *SceneStreamEndpoint) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SceneStreamEndpoint(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSceneUpdateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneUpdateInput(ctx context.Context, v interface{}) (SceneUpdateInput, error) {
	res, err := ec.unmarshalInputSceneUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSceneUpdateInput2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneUpdateInputᚄ(ctx context.Context, v interface{}) ([]*SceneUpdateInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*SceneUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSceneUpdateInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNSceneUpdateInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneUpdateInput(ctx context.Context, v interface{}) (*SceneUpdateInput, error) {
	res, err := ec.unmarshalInputSceneUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNScenesDestroyInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScenesDestroyInput(ctx context.Context, v interface{}) (ScenesDestroyInput, error) {
	res, err := ec.unmarshalInputScenesDestroyInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNScrapeContentType2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapeContentType(ctx context.Context, v interface{}) (ScrapeContentType, error) {
	var res ScrapeContentType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNScrapeContentType2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapeContentType(ctx context.Context, sel ast.SelectionSet, v ScrapeContentType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNScrapeContentType2ᚕgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapeContentTypeᚄ(ctx context.Context, v interface{}) ([]ScrapeContentType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]ScrapeContentType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNScrapeContentType2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapeContentType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNScrapeContentType2ᚕgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapeContentTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []ScrapeContentType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNScrapeContentType2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapeContentType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNScrapeMultiPerformersInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapeMultiPerformersInput(ctx context.Context, v interface{}) (ScrapeMultiPerformersInput, error) {
	res, err := ec.unmarshalInputScrapeMultiPerformersInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNScrapeMultiScenesInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapeMultiScenesInput(ctx context.Context, v interface{}) (ScrapeMultiScenesInput, error) {
	res, err := ec.unmarshalInputScrapeMultiScenesInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNScrapeSingleGalleryInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapeSingleGalleryInput(ctx context.Context, v interface{}) (ScrapeSingleGalleryInput, error) {
	res, err := ec.unmarshalInputScrapeSingleGalleryInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNScrapeSingleMovieInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapeSingleMovieInput(ctx context.Context, v interface{}) (ScrapeSingleMovieInput, error) {
	res, err := ec.unmarshalInputScrapeSingleMovieInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNScrapeSinglePerformerInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapeSinglePerformerInput(ctx context.Context, v interface{}) (ScrapeSinglePerformerInput, error) {
	res, err := ec.unmarshalInputScrapeSinglePerformerInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNScrapeSingleSceneInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapeSingleSceneInput(ctx context.Context, v interface{}) (ScrapeSingleSceneInput, error) {
	res, err := ec.unmarshalInputScrapeSingleSceneInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNScrapeType2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapeType(ctx context.Context, v interface{}) (ScrapeType, error) {
	var res ScrapeType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNScrapeType2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapeType(ctx context.Context, sel ast.SelectionSet, v ScrapeType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNScrapeType2ᚕgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapeTypeᚄ(ctx context.Context, v interface{}) ([]ScrapeType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]ScrapeType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNScrapeType2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapeType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNScrapeType2ᚕgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapeTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []ScrapeType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNScrapeType2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapeType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNScrapedGallery2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedGalleryᚄ(ctx context.Context, sel ast.SelectionSet, v []*ScrapedGallery) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNScrapedGallery2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedGallery(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNScrapedGallery2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedGallery(ctx context.Context, sel ast.SelectionSet, v *ScrapedGallery) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ScrapedGallery(ctx, sel, v)
}

func (ec *executionContext) marshalNScrapedMovie2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedMovieᚄ(ctx context.Context, sel ast.SelectionSet, v []*ScrapedMovie) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNScrapedMovie2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedMovie(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNScrapedMovie2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedMovie(ctx context.Context, sel ast.SelectionSet, v *ScrapedMovie) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ScrapedMovie(ctx, sel, v)
}

func (ec *executionContext) marshalNScrapedPerformer2ᚕᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedPerformerᚄ(ctx context.Context, sel ast.SelectionSet, v [][]*ScrapedPerformer) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNScrapedPerformer2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedPerformerᚄ(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNScrapedPerformer2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedPerformerᚄ(ctx context.Context, sel ast.SelectionSet, v []*ScrapedPerformer) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNScrapedPerformer2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedPerformer(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNScrapedPerformer2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedPerformer(ctx context.Context, sel ast.SelectionSet, v *ScrapedPerformer) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ScrapedPerformer(ctx, sel, v)
}

func (ec *executionContext) unmarshalNScrapedPerformerInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedPerformerInput(ctx context.Context, v interface{}) (ScrapedPerformerInput, error) {
	res, err := ec.unmarshalInputScrapedPerformerInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNScrapedScene2ᚕᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedSceneᚄ(ctx context.Context, sel ast.SelectionSet, v [][]*ScrapedScene) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNScrapedScene2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedSceneᚄ(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNScrapedScene2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedSceneᚄ(ctx context.Context, sel ast.SelectionSet, v []*ScrapedScene) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNScrapedScene2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedScene(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNScrapedScene2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedScene(ctx context.Context, sel ast.SelectionSet, v *ScrapedScene) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ScrapedScene(ctx, sel, v)
}

func (ec *executionContext) marshalNScrapedTag2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedTag(ctx context.Context, sel ast.SelectionSet, v *ScrapedTag) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ScrapedTag(ctx, sel, v)
}

func (ec *executionContext) marshalNScraper2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScraperᚄ(ctx context.Context, sel ast.SelectionSet, v []*Scraper) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNScraper2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScraper(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNScraper2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScraper(ctx context.Context, sel ast.SelectionSet, v *Scraper) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Scraper(ctx, sel, v)
}

func (ec *executionContext) marshalNScraperSource2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScraperSource(ctx context.Context, sel ast.SelectionSet, v *ScraperSource) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ScraperSource(ctx, sel, v)
}

func (ec *executionContext) unmarshalNScraperSourceInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScraperSourceInput(ctx context.Context, v interface{}) (ScraperSourceInput, error) {
	res, err := ec.unmarshalInputScraperSourceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNScraperSourceInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScraperSourceInput(ctx context.Context, v interface{}) (*ScraperSourceInput, error) {
	res, err := ec.unmarshalInputScraperSourceInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSetDefaultFilterInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSetDefaultFilterInput(ctx context.Context, v interface{}) (SetDefaultFilterInput, error) {
	res, err := ec.unmarshalInputSetDefaultFilterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSetupInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSetupInput(ctx context.Context, v interface{}) (SetupInput, error) {
	res, err := ec.unmarshalInputSetupInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNShortVersion2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐShortVersion(ctx context.Context, sel ast.SelectionSet, v ShortVersion) graphql.Marshaler {
	return ec._ShortVersion(ctx, sel, &v)
}

func (ec *executionContext) marshalNShortVersion2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐShortVersion(ctx context.Context, sel ast.SelectionSet, v *ShortVersion) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ShortVersion(ctx, sel, v)
}

func (ec *executionContext) marshalNStashBox2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashBoxᚄ(ctx context.Context, sel ast.SelectionSet, v []*StashBox) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStashBox2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashBox(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNStashBox2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashBox(ctx context.Context, sel ast.SelectionSet, v *StashBox) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StashBox(ctx, sel, v)
}

func (ec *executionContext) unmarshalNStashBoxBatchPerformerTagInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashBoxBatchPerformerTagInput(ctx context.Context, v interface{}) (StashBoxBatchPerformerTagInput, error) {
	res, err := ec.unmarshalInputStashBoxBatchPerformerTagInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNStashBoxDraftSubmissionInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashBoxDraftSubmissionInput(ctx context.Context, v interface{}) (StashBoxDraftSubmissionInput, error) {
	res, err := ec.unmarshalInputStashBoxDraftSubmissionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNStashBoxFingerprint2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashBoxFingerprint(ctx context.Context, sel ast.SelectionSet, v *StashBoxFingerprint) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StashBoxFingerprint(ctx, sel, v)
}

func (ec *executionContext) unmarshalNStashBoxFingerprintSubmissionInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashBoxFingerprintSubmissionInput(ctx context.Context, v interface{}) (StashBoxFingerprintSubmissionInput, error) {
	res, err := ec.unmarshalInputStashBoxFingerprintSubmissionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNStashBoxInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashBoxInput(ctx context.Context, v interface{}) (StashBoxInput, error) {
	res, err := ec.unmarshalInputStashBoxInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNStashBoxInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashBoxInput(ctx context.Context, v interface{}) (*StashBoxInput, error) {
	res, err := ec.unmarshalInputStashBoxInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNStashBoxValidationResult2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashBoxValidationResult(ctx context.Context, sel ast.SelectionSet, v StashBoxValidationResult) graphql.Marshaler {
	return ec._StashBoxValidationResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNStashBoxValidationResult2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashBoxValidationResult(ctx context.Context, sel ast.SelectionSet, v *StashBoxValidationResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StashBoxValidationResult(ctx, sel, v)
}

func (ec *executionContext) marshalNStashConfig2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashConfigᚄ(ctx context.Context, sel ast.SelectionSet, v []*StashConfig) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStashConfig2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashConfig(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNStashConfig2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashConfig(ctx context.Context, sel ast.SelectionSet, v *StashConfig) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StashConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalNStashConfigInput2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashConfigInputᚄ(ctx context.Context, v interface{}) ([]*StashConfigInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*StashConfigInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNStashConfigInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashConfigInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNStashConfigInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashConfigInput(ctx context.Context, v interface{}) (*StashConfigInput, error) {
	res, err := ec.unmarshalInputStashConfigInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNStashID2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashIDᚄ(ctx context.Context, sel ast.SelectionSet, v []*StashID) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStashID2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashID(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNStashID2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashID(ctx context.Context, sel ast.SelectionSet, v *StashID) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StashID(ctx, sel, v)
}

func (ec *executionContext) unmarshalNStashIDInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashIDInput(ctx context.Context, v interface{}) (*StashIDInput, error) {
	res, err := ec.unmarshalInputStashIDInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNStatsResultType2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStatsResultType(ctx context.Context, sel ast.SelectionSet, v StatsResultType) graphql.Marshaler {
	return ec._StatsResultType(ctx, sel, &v)
}

func (ec *executionContext) marshalNStatsResultType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStatsResultType(ctx context.Context, sel ast.SelectionSet, v *StatsResultType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StatsResultType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNStudio2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStudioᚄ(ctx context.Context, sel ast.SelectionSet, v []*Studio) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStudio2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStudio(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNStudio2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStudio(ctx context.Context, sel ast.SelectionSet, v *Studio) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Studio(ctx, sel, v)
}

func (ec *executionContext) unmarshalNStudioCreateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStudioCreateInput(ctx context.Context, v interface{}) (StudioCreateInput, error) {
	res, err := ec.unmarshalInputStudioCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNStudioDestroyInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStudioDestroyInput(ctx context.Context, v interface{}) (StudioDestroyInput, error) {
	res, err := ec.unmarshalInputStudioDestroyInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNStudioUpdateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStudioUpdateInput(ctx context.Context, v interface{}) (StudioUpdateInput, error) {
	res, err := ec.unmarshalInputStudioUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemStatus2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSystemStatus(ctx context.Context, sel ast.SelectionSet, v SystemStatus) graphql.Marshaler {
	return ec._SystemStatus(ctx, sel, &v)
}

func (ec *executionContext) marshalNSystemStatus2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSystemStatus(ctx context.Context, sel ast.SelectionSet, v *SystemStatus) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SystemStatus(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSystemStatusEnum2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSystemStatusEnum(ctx context.Context, v interface{}) (SystemStatusEnum, error) {
	var res SystemStatusEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemStatusEnum2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSystemStatusEnum(ctx context.Context, sel ast.SelectionSet, v SystemStatusEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNTag2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTag(ctx context.Context, sel ast.SelectionSet, v Tag) graphql.Marshaler {
	return ec._Tag(ctx, sel, &v)
}

func (ec *executionContext) marshalNTag2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTagᚄ(ctx context.Context, sel ast.SelectionSet, v []*Tag) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTag2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTag(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTag2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTag(ctx context.Context, sel ast.SelectionSet, v *Tag) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Tag(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTagCreateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTagCreateInput(ctx context.Context, v interface{}) (TagCreateInput, error) {
	res, err := ec.unmarshalInputTagCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTagDestroyInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTagDestroyInput(ctx context.Context, v interface{}) (TagDestroyInput, error) {
	res, err := ec.unmarshalInputTagDestroyInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTagUpdateInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTagUpdateInput(ctx context.Context, v interface{}) (TagUpdateInput, error) {
	res, err := ec.unmarshalInputTagUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTagsMergeInput2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTagsMergeInput(ctx context.Context, v interface{}) (TagsMergeInput, error) {
	res, err := ec.unmarshalInputTagsMergeInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) (graphql.Upload, error) {
	res, err := graphql.UnmarshalUpload(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v graphql.Upload) graphql.Marshaler {
	res := graphql.MarshalUpload(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNVersion2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐVersion(ctx context.Context, sel ast.SelectionSet, v Version) graphql.Marshaler {
	return ec._Version(ctx, sel, &v)
}

func (ec *executionContext) marshalNVersion2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐVersion(ctx context.Context, sel ast.SelectionSet, v *Version) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Version(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOAny2interface(ctx context.Context, v interface{}) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalAny(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAny2interface(ctx context.Context, sel ast.SelectionSet, v interface{}) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalAny(v)
	return res
}

func (ec *executionContext) unmarshalOAutoTagMetadataInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐAutoTagMetadataInput(ctx context.Context, v interface{}) (*AutoTagMetadataInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAutoTagMetadataInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAutoTagMetadataOptions2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐAutoTagMetadataOptions(ctx context.Context, sel ast.SelectionSet, v *AutoTagMetadataOptions) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AutoTagMetadataOptions(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOBulkUpdateIds2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐBulkUpdateIds(ctx context.Context, v interface{}) (*BulkUpdateIds, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBulkUpdateIds(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigDisableDropdownCreateInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigDisableDropdownCreateInput(ctx context.Context, v interface{}) (*ConfigDisableDropdownCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigDisableDropdownCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConfigImageLightboxInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐConfigImageLightboxInput(ctx context.Context, v interface{}) (*ConfigImageLightboxInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigImageLightboxInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOExportObjectTypeInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐExportObjectTypeInput(ctx context.Context, v interface{}) (*ExportObjectTypeInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputExportObjectTypeInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFilterMode2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFilterMode(ctx context.Context, v interface{}) (*FilterMode, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(FilterMode)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFilterMode2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFilterMode(ctx context.Context, sel ast.SelectionSet, v *FilterMode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOFindFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐFindFilterType(ctx context.Context, v interface{}) (*FindFilterType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFindFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) marshalOGallery2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGallery(ctx context.Context, sel ast.SelectionSet, v []*Gallery) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOGallery2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGallery(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOGallery2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGalleryᚄ(ctx context.Context, sel ast.SelectionSet, v []*Gallery) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGallery2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGallery(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOGallery2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGallery(ctx context.Context, sel ast.SelectionSet, v *Gallery) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Gallery(ctx, sel, v)
}

func (ec *executionContext) unmarshalOGalleryFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGalleryFilterType(ctx context.Context, v interface{}) (*GalleryFilterType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputGalleryFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOGenderCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGenderCriterionInput(ctx context.Context, v interface{}) (*GenderCriterionInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputGenderCriterionInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOGenderEnum2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGenderEnum(ctx context.Context, v interface{}) (*GenderEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(GenderEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOGenderEnum2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGenderEnum(ctx context.Context, sel ast.SelectionSet, v *GenderEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOGenerateMetadataInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGenerateMetadataInput(ctx context.Context, v interface{}) (*GenerateMetadataInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputGenerateMetadataInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOGenerateMetadataOptions2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGenerateMetadataOptions(ctx context.Context, sel ast.SelectionSet, v *GenerateMetadataOptions) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GenerateMetadataOptions(ctx, sel, v)
}

func (ec *executionContext) marshalOGeneratePreviewOptions2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGeneratePreviewOptions(ctx context.Context, sel ast.SelectionSet, v *GeneratePreviewOptions) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GeneratePreviewOptions(ctx, sel, v)
}

func (ec *executionContext) unmarshalOGeneratePreviewOptionsInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐGeneratePreviewOptionsInput(ctx context.Context, v interface{}) (*GeneratePreviewOptionsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputGeneratePreviewOptionsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOHashAlgorithm2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐHashAlgorithm(ctx context.Context, v interface{}) (*HashAlgorithm, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(HashAlgorithm)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOHashAlgorithm2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐHashAlgorithm(ctx context.Context, sel ast.SelectionSet, v *HashAlgorithm) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOHierarchicalMultiCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐHierarchicalMultiCriterionInput(ctx context.Context, v interface{}) (*HierarchicalMultiCriterionInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputHierarchicalMultiCriterionInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) marshalOIdentifyFieldOptions2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifyFieldOptionsᚄ(ctx context.Context, sel ast.SelectionSet, v []*IdentifyFieldOptions) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIdentifyFieldOptions2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifyFieldOptions(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOIdentifyFieldOptionsInput2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifyFieldOptionsInputᚄ(ctx context.Context, v interface{}) ([]*IdentifyFieldOptionsInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*IdentifyFieldOptionsInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNIdentifyFieldOptionsInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifyFieldOptionsInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOIdentifyMetadataInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifyMetadataInput(ctx context.Context, v interface{}) (*IdentifyMetadataInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIdentifyMetadataInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOIdentifyMetadataOptions2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifyMetadataOptions(ctx context.Context, sel ast.SelectionSet, v *IdentifyMetadataOptions) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IdentifyMetadataOptions(ctx, sel, v)
}

func (ec *executionContext) unmarshalOIdentifyMetadataOptionsInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifyMetadataOptionsInput(ctx context.Context, v interface{}) (*IdentifyMetadataOptionsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIdentifyMetadataOptionsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOIdentifyMetadataTaskOptions2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIdentifyMetadataTaskOptions(ctx context.Context, sel ast.SelectionSet, v *IdentifyMetadataTaskOptions) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IdentifyMetadataTaskOptions(ctx, sel, v)
}

func (ec *executionContext) marshalOImage2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImage(ctx context.Context, sel ast.SelectionSet, v []*Image) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOImage2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOImage2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImageᚄ(ctx context.Context, sel ast.SelectionSet, v []*Image) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNImage2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOImage2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImage(ctx context.Context, sel ast.SelectionSet, v *Image) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Image(ctx, sel, v)
}

func (ec *executionContext) unmarshalOImageFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImageFilterType(ctx context.Context, v interface{}) (*ImageFilterType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputImageFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOImageLightboxDisplayMode2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImageLightboxDisplayMode(ctx context.Context, v interface{}) (*ImageLightboxDisplayMode, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ImageLightboxDisplayMode)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOImageLightboxDisplayMode2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImageLightboxDisplayMode(ctx context.Context, sel ast.SelectionSet, v *ImageLightboxDisplayMode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOImageLightboxScrollMode2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImageLightboxScrollMode(ctx context.Context, v interface{}) (*ImageLightboxScrollMode, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ImageLightboxScrollMode)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOImageLightboxScrollMode2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐImageLightboxScrollMode(ctx context.Context, sel ast.SelectionSet, v *ImageLightboxScrollMode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOIntCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐIntCriterionInput(ctx context.Context, v interface{}) (*IntCriterionInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIntCriterionInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJob2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐJobᚄ(ctx context.Context, sel ast.SelectionSet, v []*Job) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNJob2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐJob(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOJob2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐJob(ctx context.Context, sel ast.SelectionSet, v *Job) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Job(ctx, sel, v)
}

func (ec *executionContext) marshalOMarkerStringsResultType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMarkerStringsResultType(ctx context.Context, sel ast.SelectionSet, v *MarkerStringsResultType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MarkerStringsResultType(ctx, sel, v)
}

func (ec *executionContext) marshalOMovie2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMovieᚄ(ctx context.Context, sel ast.SelectionSet, v []*Movie) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMovie2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMovie(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMovie2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMovie(ctx context.Context, sel ast.SelectionSet, v *Movie) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Movie(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMovieFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMovieFilterType(ctx context.Context, v interface{}) (*MovieFilterType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMovieFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMultiCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐMultiCriterionInput(ctx context.Context, v interface{}) (*MultiCriterionInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMultiCriterionInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPHashDuplicationCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPHashDuplicationCriterionInput(ctx context.Context, v interface{}) (*PHashDuplicationCriterionInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPHashDuplicationCriterionInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPerformer2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPerformerᚄ(ctx context.Context, sel ast.SelectionSet, v []*Performer) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPerformer2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPerformer(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOPerformer2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPerformer(ctx context.Context, sel ast.SelectionSet, v *Performer) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Performer(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPerformerFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPerformerFilterType(ctx context.Context, v interface{}) (*PerformerFilterType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPerformerFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPlugin2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPluginᚄ(ctx context.Context, sel ast.SelectionSet, v []*Plugin) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPlugin2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPlugin(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOPluginArgInput2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPluginArgInputᚄ(ctx context.Context, v interface{}) ([]*PluginArgInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*PluginArgInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPluginArgInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPluginArgInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPluginHook2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPluginHookᚄ(ctx context.Context, sel ast.SelectionSet, v []*PluginHook) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPluginHook2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPluginHook(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOPluginTask2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPluginTaskᚄ(ctx context.Context, sel ast.SelectionSet, v []*PluginTask) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPluginTask2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPluginTask(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOPluginValueInput2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPluginValueInputᚄ(ctx context.Context, v interface{}) ([]*PluginValueInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*PluginValueInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPluginValueInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPluginValueInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPluginValueInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPluginValueInput(ctx context.Context, v interface{}) (*PluginValueInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPluginValueInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPreviewPreset2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPreviewPreset(ctx context.Context, v interface{}) (*PreviewPreset, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(PreviewPreset)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPreviewPreset2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐPreviewPreset(ctx context.Context, sel ast.SelectionSet, v *PreviewPreset) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOResolutionCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐResolutionCriterionInput(ctx context.Context, v interface{}) (*ResolutionCriterionInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputResolutionCriterionInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSavedFilter2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSavedFilter(ctx context.Context, sel ast.SelectionSet, v *SavedFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SavedFilter(ctx, sel, v)
}

func (ec *executionContext) unmarshalOScanMetaDataFilterInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScanMetaDataFilterInput(ctx context.Context, v interface{}) (*ScanMetaDataFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputScanMetaDataFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOScanMetadataInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScanMetadataInput(ctx context.Context, v interface{}) (*ScanMetadataInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputScanMetadataInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOScanMetadataOptions2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScanMetadataOptions(ctx context.Context, sel ast.SelectionSet, v *ScanMetadataOptions) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ScanMetadataOptions(ctx, sel, v)
}

func (ec *executionContext) marshalOScene2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScene(ctx context.Context, sel ast.SelectionSet, v []*Scene) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOScene2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScene(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOScene2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneᚄ(ctx context.Context, sel ast.SelectionSet, v []*Scene) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNScene2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScene(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOScene2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScene(ctx context.Context, sel ast.SelectionSet, v *Scene) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Scene(ctx, sel, v)
}

func (ec *executionContext) marshalOSceneCaption2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneCaptionᚄ(ctx context.Context, sel ast.SelectionSet, v []*SceneCaption) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSceneCaption2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneCaption(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOSceneFileType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneFileType(ctx context.Context, sel ast.SelectionSet, v *SceneFileType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SceneFileType(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSceneFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneFilterType(ctx context.Context, v interface{}) (*SceneFilterType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSceneFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSceneMarker2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMarker(ctx context.Context, sel ast.SelectionSet, v *SceneMarker) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SceneMarker(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSceneMarkerFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMarkerFilterType(ctx context.Context, v interface{}) (*SceneMarkerFilterType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSceneMarkerFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSceneMovieID2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMovieIDᚄ(ctx context.Context, sel ast.SelectionSet, v []*SceneMovieID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSceneMovieID2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMovieID(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOSceneMovieInput2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMovieInputᚄ(ctx context.Context, v interface{}) ([]*SceneMovieInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*SceneMovieInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSceneMovieInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSceneMovieInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOScrapedContent2githubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedContent(ctx context.Context, sel ast.SelectionSet, v ScrapedContent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ScrapedContent(ctx, sel, v)
}

func (ec *executionContext) marshalOScrapedGallery2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedGallery(ctx context.Context, sel ast.SelectionSet, v *ScrapedGallery) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ScrapedGallery(ctx, sel, v)
}

func (ec *executionContext) unmarshalOScrapedGalleryInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedGalleryInput(ctx context.Context, v interface{}) (*ScrapedGalleryInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputScrapedGalleryInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOScrapedMovie2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedMovieᚄ(ctx context.Context, sel ast.SelectionSet, v []*ScrapedMovie) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNScrapedMovie2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedMovie(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOScrapedMovie2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedMovie(ctx context.Context, sel ast.SelectionSet, v *ScrapedMovie) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ScrapedMovie(ctx, sel, v)
}

func (ec *executionContext) unmarshalOScrapedMovieInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedMovieInput(ctx context.Context, v interface{}) (*ScrapedMovieInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputScrapedMovieInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOScrapedPerformer2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedPerformerᚄ(ctx context.Context, sel ast.SelectionSet, v []*ScrapedPerformer) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNScrapedPerformer2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedPerformer(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOScrapedPerformer2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedPerformer(ctx context.Context, sel ast.SelectionSet, v *ScrapedPerformer) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ScrapedPerformer(ctx, sel, v)
}

func (ec *executionContext) unmarshalOScrapedPerformerInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedPerformerInput(ctx context.Context, v interface{}) (*ScrapedPerformerInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputScrapedPerformerInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOScrapedScene2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedScene(ctx context.Context, sel ast.SelectionSet, v *ScrapedScene) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ScrapedScene(ctx, sel, v)
}

func (ec *executionContext) unmarshalOScrapedSceneInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedSceneInput(ctx context.Context, v interface{}) (*ScrapedSceneInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputScrapedSceneInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOScrapedStudio2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedStudio(ctx context.Context, sel ast.SelectionSet, v *ScrapedStudio) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ScrapedStudio(ctx, sel, v)
}

func (ec *executionContext) marshalOScrapedTag2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedTagᚄ(ctx context.Context, sel ast.SelectionSet, v []*ScrapedTag) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNScrapedTag2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScrapedTag(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOScraperSpec2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐScraperSpec(ctx context.Context, sel ast.SelectionSet, v *ScraperSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ScraperSpec(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSortDirectionEnum2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSortDirectionEnum(ctx context.Context, v interface{}) (*SortDirectionEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(SortDirectionEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSortDirectionEnum2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐSortDirectionEnum(ctx context.Context, sel ast.SelectionSet, v *SortDirectionEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOStashBoxFingerprint2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashBoxFingerprintᚄ(ctx context.Context, sel ast.SelectionSet, v []*StashBoxFingerprint) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStashBoxFingerprint2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashBoxFingerprint(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOStashBoxInput2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashBoxInputᚄ(ctx context.Context, v interface{}) ([]*StashBoxInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*StashBoxInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNStashBoxInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashBoxInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOStashConfigInput2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashConfigInputᚄ(ctx context.Context, v interface{}) ([]*StashConfigInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*StashConfigInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNStashConfigInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashConfigInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOStashIDInput2ᚕᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashIDInputᚄ(ctx context.Context, v interface{}) ([]*StashIDInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*StashIDInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNStashIDInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStashIDInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOStreamingResolutionEnum2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStreamingResolutionEnum(ctx context.Context, v interface{}) (*StreamingResolutionEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(StreamingResolutionEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOStreamingResolutionEnum2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStreamingResolutionEnum(ctx context.Context, sel ast.SelectionSet, v *StreamingResolutionEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOStringCriterionInput2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStringCriterionInput(ctx context.Context, v interface{}) (*StringCriterionInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStringCriterionInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOStudio2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStudio(ctx context.Context, sel ast.SelectionSet, v *Studio) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Studio(ctx, sel, v)
}

func (ec *executionContext) unmarshalOStudioFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐStudioFilterType(ctx context.Context, v interface{}) (*StudioFilterType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStudioFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTag2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTag(ctx context.Context, sel ast.SelectionSet, v *Tag) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Tag(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTagFilterType2ᚖgithubᚗcomᚋstashappᚋstashᚋpkgᚋmodelsᚐTagFilterType(ctx context.Context, v interface{}) (*TagFilterType, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTagFilterType(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) unmarshalOTimestamp2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := UnmarshalTimestamp(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimestamp2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := MarshalTimestamp(*v)
	return res
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
